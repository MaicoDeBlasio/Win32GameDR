#if 0
;
; Note: shader requires additional functionality:
;       Raytracing tier 1.1 features
;       Resource descriptor heap indexing
;
; shader debug name: Shaders\PDB\RaytracingShaderColor.pdb
; shader hash: efaa5b381906427eef0f8d3e235a226d
;
; Buffer Definitions:
;
; cbuffer frameCB
; {
;
;   struct hostlayout.frameCB
;   {
;
;       struct hostlayout.struct.FrameConstants
;       {
;
;           column_major float4x4 viewProj;           ; Offset:    0
;           column_major float4x4 invProj;            ; Offset:   64
;           column_major float4x4 invViewProj;        ; Offset:  128
;           column_major float4x4 viewProjTex;        ; Offset:  192
;           column_major float4x4 prevViewProjTex;    ; Offset:  256
;           float4 cameraPos;                         ; Offset:  320
;           float4 lightDiffuse;                      ; Offset:  336
;           float4 lightAmbient;                      ; Offset:  352
;           float3 lightDir;                          ; Offset:  368
;           uint frameCount;                          ; Offset:  380
;           uint tlasBufferSrvID;                     ; Offset:  384
;           uint instBufferSrvID;                     ; Offset:  388
;           uint prevFrameBufferSrvID;                ; Offset:  392
;           uint isFirstFrame;                        ; Offset:  396
;       
;       } frameCB;                                    ; Offset:    0
;
;   
;   } frameCB;                                        ; Offset:    0 Size:   400
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; frameCB                           cbuffer      NA          NA     CB0            cb0     1
; AnisoClamp                        sampler      NA          NA      S0             s0     1
; LinearClamp                       sampler      NA          NA      S1             s1     1
; AnisoWrap                         sampler      NA          NA      S2             s3     1
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%hostlayout.frameCB = type { %hostlayout.struct.FrameConstants }
%hostlayout.struct.FrameConstants = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <4 x float>, <4 x float>, <3 x float>, i32, i32, i32, i32, i32 }
%struct.ColorPayload = type { <3 x float>, i32, %struct.Ray, %struct.Ray }
%struct.Ray = type { <3 x float>, <3 x float> }
%dx.types.ResourceProperties = type { i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%struct.BuiltInTriangleIntersectionAttributes = type { <2 x float> }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%struct.SamplerState = type { i32 }

@"\01?AnisoClamp@@3USamplerState@@A" = external constant %dx.types.Handle, align 4
@"\01?LinearClamp@@3USamplerState@@A" = external constant %dx.types.Handle, align 4
@"\01?AnisoWrap@@3USamplerState@@A" = external constant %dx.types.Handle, align 4
@frameCB_legacy = external global %hostlayout.frameCB

; Function Attrs: nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #0

; Function Attrs: nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #0

; Function Attrs: nounwind
define void @"\01?RaygenShader@@YAXXZ"() #0 {
  %1 = load %hostlayout.frameCB, %hostlayout.frameCB* @frameCB_legacy
  %2 = alloca %struct.ColorPayload, align 4
  %3 = call %dx.types.Handle @dx.op.createHandleForLib.hostlayout.frameCB(i32 160, %hostlayout.frameCB %1)  ; CreateHandleForLib(Resource)
  %4 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 13, i32 400 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %5 = call i32 @dx.op.dispatchRaysIndex.i32(i32 145, i8 0)  ; DispatchRaysIndex(col)
  %6 = call i32 @dx.op.dispatchRaysIndex.i32(i32 145, i8 1)  ; DispatchRaysIndex(col)
  %7 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 20)  ; CBufferLoadLegacy(handle,regIndex)
  %8 = extractvalue %dx.types.CBufRet.f32 %7, 0
  %9 = extractvalue %dx.types.CBufRet.f32 %7, 1
  %10 = extractvalue %dx.types.CBufRet.f32 %7, 2
  %11 = insertelement <3 x float> undef, float %8, i32 0
  %12 = insertelement <3 x float> %11, float %9, i32 1
  %13 = insertelement <3 x float> %12, float %10, i32 2
  %14 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %15 = extractvalue %dx.types.CBufRet.f32 %14, 0
  %16 = extractvalue %dx.types.CBufRet.f32 %14, 1
  %17 = extractvalue %dx.types.CBufRet.f32 %14, 3
  %18 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %19 = extractvalue %dx.types.CBufRet.f32 %18, 0
  %20 = extractvalue %dx.types.CBufRet.f32 %18, 1
  %21 = extractvalue %dx.types.CBufRet.f32 %18, 3
  %22 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %23 = extractvalue %dx.types.CBufRet.f32 %22, 0
  %24 = extractvalue %dx.types.CBufRet.f32 %22, 1
  %25 = extractvalue %dx.types.CBufRet.f32 %22, 3
  %26 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 11)  ; CBufferLoadLegacy(handle,regIndex)
  %27 = extractvalue %dx.types.CBufRet.f32 %26, 0
  %28 = extractvalue %dx.types.CBufRet.f32 %26, 1
  %29 = extractvalue %dx.types.CBufRet.f32 %26, 3
  %30 = uitofp i32 %5 to float
  %31 = uitofp i32 %6 to float
  %32 = fadd fast float %30, 5.000000e-01
  %33 = fadd fast float %31, 5.000000e-01
  %34 = call i32 @dx.op.dispatchRaysDimensions.i32(i32 146, i8 0)  ; DispatchRaysDimensions(col)
  %35 = call i32 @dx.op.dispatchRaysDimensions.i32(i32 146, i8 1)  ; DispatchRaysDimensions(col)
  %36 = uitofp i32 %34 to float
  %37 = uitofp i32 %35 to float
  %38 = fdiv fast float %32, %36
  %39 = fdiv fast float %33, %37
  %40 = fmul fast float %38, 2.000000e+00
  %41 = fmul fast float %39, 2.000000e+00
  %42 = fadd fast float %40, -1.000000e+00
  %43 = fadd fast float %41, -1.000000e+00
  %44 = fsub fast float -0.000000e+00, %43
  %45 = fmul fast float %42, %15
  %46 = call float @dx.op.tertiary.f32(i32 46, float %44, float %16, float %45)  ; FMad(a,b,c)
  %47 = fadd fast float %46, %17
  %48 = fmul fast float %42, %19
  %49 = call float @dx.op.tertiary.f32(i32 46, float %44, float %20, float %48)  ; FMad(a,b,c)
  %50 = fadd fast float %49, %21
  %51 = fmul fast float %42, %23
  %52 = call float @dx.op.tertiary.f32(i32 46, float %44, float %24, float %51)  ; FMad(a,b,c)
  %53 = fadd fast float %52, %25
  %54 = fmul fast float %42, %27
  %55 = call float @dx.op.tertiary.f32(i32 46, float %44, float %28, float %54)  ; FMad(a,b,c)
  %56 = fadd fast float %55, %29
  %57 = fdiv fast float %47, %56
  %58 = fdiv fast float %50, %56
  %59 = fdiv fast float %53, %56
  %60 = fsub fast float %57, %8
  %61 = fsub fast float %58, %9
  %62 = fsub fast float %59, %10
  %63 = call float @dx.op.dot3.f32(i32 55, float %60, float %61, float %62, float %60, float %61, float %62)  ; Dot3(ax,ay,az,bx,by,bz)
  %64 = call float @dx.op.unary.f32(i32 25, float %63)  ; Rsqrt(value)
  %65 = add i32 %5, 1
  %66 = uitofp i32 %65 to float
  %67 = fadd fast float %66, 5.000000e-01
  %68 = fdiv fast float %67, %36
  %69 = fmul fast float %68, 2.000000e+00
  %70 = fadd fast float %69, -1.000000e+00
  %71 = fmul fast float %70, %15
  %72 = call float @dx.op.tertiary.f32(i32 46, float %44, float %16, float %71)  ; FMad(a,b,c)
  %73 = fadd fast float %72, %17
  %74 = fmul fast float %70, %19
  %75 = call float @dx.op.tertiary.f32(i32 46, float %44, float %20, float %74)  ; FMad(a,b,c)
  %76 = fadd fast float %75, %21
  %77 = fmul fast float %70, %23
  %78 = call float @dx.op.tertiary.f32(i32 46, float %44, float %24, float %77)  ; FMad(a,b,c)
  %79 = fadd fast float %78, %25
  %80 = fmul fast float %70, %27
  %81 = call float @dx.op.tertiary.f32(i32 46, float %44, float %28, float %80)  ; FMad(a,b,c)
  %82 = fadd fast float %81, %29
  %83 = fdiv fast float %73, %82
  %84 = fdiv fast float %76, %82
  %85 = fdiv fast float %79, %82
  %86 = fsub fast float %83, %8
  %87 = fsub fast float %84, %9
  %88 = fsub fast float %85, %10
  %89 = call float @dx.op.dot3.f32(i32 55, float %86, float %87, float %88, float %86, float %87, float %88)  ; Dot3(ax,ay,az,bx,by,bz)
  %90 = call float @dx.op.unary.f32(i32 25, float %89)  ; Rsqrt(value)
  %91 = fmul fast float %90, %86
  %92 = fmul fast float %90, %87
  %93 = fmul fast float %90, %88
  %94 = insertelement <3 x float> undef, float %91, i32 0
  %95 = insertelement <3 x float> %94, float %92, i32 1
  %96 = insertelement <3 x float> %95, float %93, i32 2
  %97 = add i32 %6, 1
  %98 = uitofp i32 %97 to float
  %99 = fadd fast float %98, 5.000000e-01
  %100 = fdiv fast float %99, %37
  %101 = fmul fast float %100, 2.000000e+00
  %102 = fadd fast float %101, -1.000000e+00
  %103 = fsub fast float -0.000000e+00, %102
  %104 = call float @dx.op.tertiary.f32(i32 46, float %103, float %16, float %45)  ; FMad(a,b,c)
  %105 = fadd fast float %104, %17
  %106 = call float @dx.op.tertiary.f32(i32 46, float %103, float %20, float %48)  ; FMad(a,b,c)
  %107 = fadd fast float %106, %21
  %108 = call float @dx.op.tertiary.f32(i32 46, float %103, float %24, float %51)  ; FMad(a,b,c)
  %109 = fadd fast float %108, %25
  %110 = call float @dx.op.tertiary.f32(i32 46, float %103, float %28, float %54)  ; FMad(a,b,c)
  %111 = fadd fast float %110, %29
  %112 = fdiv fast float %105, %111
  %113 = fdiv fast float %107, %111
  %114 = fdiv fast float %109, %111
  %115 = fsub fast float %112, %8
  %116 = fsub fast float %113, %9
  %117 = fsub fast float %114, %10
  %118 = call float @dx.op.dot3.f32(i32 55, float %115, float %116, float %117, float %115, float %116, float %117)  ; Dot3(ax,ay,az,bx,by,bz)
  %119 = call float @dx.op.unary.f32(i32 25, float %118)  ; Rsqrt(value)
  %120 = fmul fast float %119, %115
  %121 = fmul fast float %119, %116
  %122 = fmul fast float %119, %117
  %123 = insertelement <3 x float> undef, float %120, i32 0
  %124 = insertelement <3 x float> %123, float %121, i32 1
  %125 = insertelement <3 x float> %124, float %122, i32 2
  %126 = bitcast %struct.ColorPayload* %2 to i8*
  call void @llvm.lifetime.start(i64 64, i8* %126) #0
  %127 = getelementptr inbounds %struct.ColorPayload, %struct.ColorPayload* %2, i32 0, i32 0
  store <3 x float> zeroinitializer, <3 x float>* %127, align 4, !tbaa !31
  %128 = getelementptr inbounds %struct.ColorPayload, %struct.ColorPayload* %2, i32 0, i32 1
  store i32 0, i32* %128, align 4, !tbaa !34
  %129 = getelementptr inbounds %struct.ColorPayload, %struct.ColorPayload* %2, i32 0, i32 2, i32 0
  store <3 x float> %13, <3 x float>* %129, align 4
  %130 = getelementptr inbounds %struct.ColorPayload, %struct.ColorPayload* %2, i32 0, i32 2, i32 1
  store <3 x float> %96, <3 x float>* %130, align 4
  %131 = getelementptr inbounds %struct.ColorPayload, %struct.ColorPayload* %2, i32 0, i32 3, i32 0
  store <3 x float> %13, <3 x float>* %131, align 4
  %132 = getelementptr inbounds %struct.ColorPayload, %struct.ColorPayload* %2, i32 0, i32 3, i32 1
  store <3 x float> %125, <3 x float>* %132, align 4
  %133 = fmul fast float %64, %60
  %134 = fmul fast float %64, %61
  %135 = fmul fast float %64, %62
  store i32 1, i32* %128, align 4, !tbaa !34, !alias.scope !36
  %136 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %4, i32 24)  ; CBufferLoadLegacy(handle,regIndex)
  %137 = extractvalue %dx.types.CBufRet.i32 %136, 0
  %138 = call %dx.types.Handle @dx.op.createHandleFromHeap(i32 218, i32 %137, i1 false, i1 false)  ; CreateHandleFromHeap(index,samplerHeap,nonUniformIndex)
  %139 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %138, %dx.types.ResourceProperties { i32 16, i32 0 })  ; AnnotateHandle(res,props)  resource: RTAccelerationStructure
  call void @dx.op.traceRay.struct.ColorPayload(i32 157, %dx.types.Handle %139, i32 0, i32 255, i32 0, i32 0, i32 0, float %8, float %9, float %10, float 0.000000e+00, float %133, float %134, float %135, float 5.000000e+03, %struct.ColorPayload* nonnull %2)  ; TraceRay(AccelerationStructure,RayFlags,InstanceInclusionMask,RayContributionToHitGroupIndex,MultiplierForGeometryContributionToShaderIndex,MissShaderIndex,Origin_X,Origin_Y,Origin_Z,TMin,Direction_X,Direction_Y,Direction_Z,TMax,payload)
  %140 = load <3 x float>, <3 x float>* %127, align 4, !tbaa !31
  %141 = call %dx.types.Handle @dx.op.createHandleFromHeap(i32 218, i32 1, i1 false, i1 false)  ; CreateHandleFromHeap(index,samplerHeap,nonUniformIndex)
  %142 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %141, %dx.types.ResourceProperties { i32 4098, i32 1033 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<4xF32>
  %143 = extractelement <3 x float> %140, i64 0
  %144 = extractelement <3 x float> %140, i64 1
  %145 = extractelement <3 x float> %140, i64 2
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %142, i32 %5, i32 %6, i32 undef, float %143, float %144, float %145, float 1.000000e+00, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  call void @llvm.lifetime.end(i64 64, i8* %126) #0
  ret void
}

; Function Attrs: nounwind
define void @"\01?ClosestHitCubeShader@@YAXUColorPayload@@UBuiltInTriangleIntersectionAttributes@@@Z"(%struct.ColorPayload* noalias %payload, %struct.BuiltInTriangleIntersectionAttributes* nocapture readonly %attr) #0 {
  %1 = load %dx.types.Handle, %dx.types.Handle* @"\01?LinearClamp@@3USamplerState@@A", align 4
  %2 = load %dx.types.Handle, %dx.types.Handle* @"\01?AnisoClamp@@3USamplerState@@A", align 4
  %3 = load %hostlayout.frameCB, %hostlayout.frameCB* @frameCB_legacy
  %4 = call %dx.types.Handle @dx.op.createHandleForLib.hostlayout.frameCB(i32 160, %hostlayout.frameCB %3)  ; CreateHandleForLib(Resource)
  %5 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 13, i32 400 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %6 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %5, i32 24)  ; CBufferLoadLegacy(handle,regIndex)
  %7 = extractvalue %dx.types.CBufRet.i32 %6, 1
  %8 = call %dx.types.Handle @dx.op.createHandleFromHeap(i32 218, i32 %7, i1 false, i1 false)  ; CreateHandleFromHeap(index,samplerHeap,nonUniformIndex)
  %9 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %8, %dx.types.ResourceProperties { i32 524, i32 80 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=80>
  %10 = call i32 @dx.op.instanceID.i32(i32 141)  ; InstanceID()
  %11 = extractvalue %dx.types.CBufRet.i32 %6, 2
  %12 = call %dx.types.Handle @dx.op.createHandleFromHeap(i32 218, i32 %11, i1 false, i1 false)  ; CreateHandleFromHeap(index,samplerHeap,nonUniformIndex)
  %13 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 524, i32 64 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=64>
  %14 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %9, i32 %10, i32 60, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %15 = extractvalue %dx.types.ResRet.i32 %14, 0
  %16 = call %dx.types.Handle @dx.op.createHandleFromHeap(i32 218, i32 %15, i1 false, i1 false)  ; CreateHandleFromHeap(index,samplerHeap,nonUniformIndex)
  %17 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %16, %dx.types.ResourceProperties { i32 2, i32 777 })  ; AnnotateHandle(res,props)  resource: Texture2D<3xF32>
  %18 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %9, i32 %10, i32 68, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %19 = extractvalue %dx.types.ResRet.i32 %18, 0
  %20 = call %dx.types.Handle @dx.op.createHandleFromHeap(i32 218, i32 %19, i1 false, i1 false)  ; CreateHandleFromHeap(index,samplerHeap,nonUniformIndex)
  %21 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %20, %dx.types.ResourceProperties { i32 2, i32 777 })  ; AnnotateHandle(res,props)  resource: Texture2D<3xF32>
  %22 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %9, i32 %10, i32 72, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %23 = extractvalue %dx.types.ResRet.i32 %22, 0
  %24 = call %dx.types.Handle @dx.op.createHandleFromHeap(i32 218, i32 %23, i1 false, i1 false)  ; CreateHandleFromHeap(index,samplerHeap,nonUniformIndex)
  %25 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %24, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %26 = call %dx.types.Handle @dx.op.createHandleFromHeap(i32 218, i32 12, i1 false, i1 false)  ; CreateHandleFromHeap(index,samplerHeap,nonUniformIndex)
  %27 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %26, %dx.types.ResourceProperties { i32 2, i32 265 })  ; AnnotateHandle(res,props)  resource: Texture2D<F32>
  %28 = call %dx.types.Handle @dx.op.createHandleFromHeap(i32 218, i32 18, i1 false, i1 false)  ; CreateHandleFromHeap(index,samplerHeap,nonUniformIndex)
  %29 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %28, %dx.types.ResourceProperties { i32 2, i32 265 })  ; AnnotateHandle(res,props)  resource: Texture2D<F32>
  %30 = call %dx.types.Handle @dx.op.createHandleFromHeap(i32 218, i32 3, i1 false, i1 false)  ; CreateHandleFromHeap(index,samplerHeap,nonUniformIndex)
  %31 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %30, %dx.types.ResourceProperties { i32 2, i32 777 })  ; AnnotateHandle(res,props)  resource: Texture2D<3xF32>
  %32 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %9, i32 %10, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %33 = extractvalue %dx.types.ResRet.i32 %32, 0
  %34 = call %dx.types.Handle @dx.op.createHandleFromHeap(i32 218, i32 %33, i1 false, i1 false)  ; CreateHandleFromHeap(index,samplerHeap,nonUniformIndex)
  %35 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %34, %dx.types.ResourceProperties { i32 524, i32 32 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=32>
  %36 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %9, i32 %10, i32 4, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %37 = extractvalue %dx.types.ResRet.i32 %36, 0
  %38 = call %dx.types.Handle @dx.op.createHandleFromHeap(i32 218, i32 %37, i1 false, i1 false)  ; CreateHandleFromHeap(index,samplerHeap,nonUniformIndex)
  %39 = call i32 @dx.op.primitiveIndex.i32(i32 161)  ; PrimitiveIndex()
  %40 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %9, i32 %10, i32 8, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %41 = extractvalue %dx.types.ResRet.i32 %40, 0
  %42 = icmp ne i32 %41, 0
  %43 = select i1 %42, i32 6, i32 12
  %44 = mul i32 %43, %39
  %45 = icmp eq i32 %41, 0
  %46 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %38, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  br i1 %45, label %59, label %47

; <label>:47                                      ; preds = %0
  %48 = and i32 %44, -4
  %49 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %46, i32 %48, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %50 = extractvalue %dx.types.ResRet.i32 %49, 0
  %51 = extractvalue %dx.types.ResRet.i32 %49, 1
  %52 = icmp eq i32 %48, %44
  %53 = lshr i32 %50, 16
  %54 = and i32 %51, 65535
  br i1 %52, label %55, label %57

; <label>:55                                      ; preds = %47
  %56 = and i32 %50, 65535
  br label %64

; <label>:57                                      ; preds = %47
  %58 = lshr i32 %51, 16
  br label %64

; <label>:59                                      ; preds = %0
  %60 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %46, i32 %44, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %61 = extractvalue %dx.types.ResRet.i32 %60, 0
  %62 = extractvalue %dx.types.ResRet.i32 %60, 1
  %63 = extractvalue %dx.types.ResRet.i32 %60, 2
  br label %64

; <label>:64                                      ; preds = %59, %57, %55
  %65 = phi i32 [ %61, %59 ], [ %56, %55 ], [ %53, %57 ]
  %66 = phi i32 [ %62, %59 ], [ %53, %55 ], [ %54, %57 ]
  %67 = phi i32 [ %63, %59 ], [ %54, %55 ], [ %58, %57 ]
  %68 = call float @dx.op.objectToWorld.f32(i32 151, i32 0, i8 0)  ; ObjectToWorld(row,col)
  %69 = call float @dx.op.objectToWorld.f32(i32 151, i32 1, i8 0)  ; ObjectToWorld(row,col)
  %70 = call float @dx.op.objectToWorld.f32(i32 151, i32 2, i8 0)  ; ObjectToWorld(row,col)
  %71 = call float @dx.op.objectToWorld.f32(i32 151, i32 0, i8 1)  ; ObjectToWorld(row,col)
  %72 = call float @dx.op.objectToWorld.f32(i32 151, i32 1, i8 1)  ; ObjectToWorld(row,col)
  %73 = call float @dx.op.objectToWorld.f32(i32 151, i32 2, i8 1)  ; ObjectToWorld(row,col)
  %74 = call float @dx.op.objectToWorld.f32(i32 151, i32 0, i8 2)  ; ObjectToWorld(row,col)
  %75 = call float @dx.op.objectToWorld.f32(i32 151, i32 1, i8 2)  ; ObjectToWorld(row,col)
  %76 = call float @dx.op.objectToWorld.f32(i32 151, i32 2, i8 2)  ; ObjectToWorld(row,col)
  %77 = call float @dx.op.objectToWorld.f32(i32 151, i32 0, i8 3)  ; ObjectToWorld(row,col)
  %78 = call float @dx.op.objectToWorld.f32(i32 151, i32 1, i8 3)  ; ObjectToWorld(row,col)
  %79 = call float @dx.op.objectToWorld.f32(i32 151, i32 2, i8 3)  ; ObjectToWorld(row,col)
  %80 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %35, i32 %65, i32 0, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %81 = extractvalue %dx.types.ResRet.f32 %80, 0
  %82 = extractvalue %dx.types.ResRet.f32 %80, 1
  %83 = extractvalue %dx.types.ResRet.f32 %80, 2
  %84 = fmul fast float %81, %68
  %85 = call float @dx.op.tertiary.f32(i32 46, float %82, float %71, float %84)  ; FMad(a,b,c)
  %86 = call float @dx.op.tertiary.f32(i32 46, float %83, float %74, float %85)  ; FMad(a,b,c)
  %87 = fadd fast float %86, %77
  %88 = fmul fast float %81, %69
  %89 = call float @dx.op.tertiary.f32(i32 46, float %82, float %72, float %88)  ; FMad(a,b,c)
  %90 = call float @dx.op.tertiary.f32(i32 46, float %83, float %75, float %89)  ; FMad(a,b,c)
  %91 = fadd fast float %90, %78
  %92 = fmul fast float %81, %70
  %93 = call float @dx.op.tertiary.f32(i32 46, float %82, float %73, float %92)  ; FMad(a,b,c)
  %94 = call float @dx.op.tertiary.f32(i32 46, float %83, float %76, float %93)  ; FMad(a,b,c)
  %95 = fadd fast float %94, %79
  %96 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %35, i32 %66, i32 0, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %97 = extractvalue %dx.types.ResRet.f32 %96, 0
  %98 = extractvalue %dx.types.ResRet.f32 %96, 1
  %99 = extractvalue %dx.types.ResRet.f32 %96, 2
  %100 = fmul fast float %97, %68
  %101 = call float @dx.op.tertiary.f32(i32 46, float %98, float %71, float %100)  ; FMad(a,b,c)
  %102 = call float @dx.op.tertiary.f32(i32 46, float %99, float %74, float %101)  ; FMad(a,b,c)
  %103 = fmul fast float %97, %69
  %104 = call float @dx.op.tertiary.f32(i32 46, float %98, float %72, float %103)  ; FMad(a,b,c)
  %105 = call float @dx.op.tertiary.f32(i32 46, float %99, float %75, float %104)  ; FMad(a,b,c)
  %106 = fmul fast float %97, %70
  %107 = call float @dx.op.tertiary.f32(i32 46, float %98, float %73, float %106)  ; FMad(a,b,c)
  %108 = call float @dx.op.tertiary.f32(i32 46, float %99, float %76, float %107)  ; FMad(a,b,c)
  %109 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %35, i32 %67, i32 0, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %110 = extractvalue %dx.types.ResRet.f32 %109, 0
  %111 = extractvalue %dx.types.ResRet.f32 %109, 1
  %112 = extractvalue %dx.types.ResRet.f32 %109, 2
  %113 = fmul fast float %110, %68
  %114 = call float @dx.op.tertiary.f32(i32 46, float %111, float %71, float %113)  ; FMad(a,b,c)
  %115 = call float @dx.op.tertiary.f32(i32 46, float %112, float %74, float %114)  ; FMad(a,b,c)
  %116 = fmul fast float %110, %69
  %117 = call float @dx.op.tertiary.f32(i32 46, float %111, float %72, float %116)  ; FMad(a,b,c)
  %118 = call float @dx.op.tertiary.f32(i32 46, float %112, float %75, float %117)  ; FMad(a,b,c)
  %119 = fmul fast float %110, %70
  %120 = call float @dx.op.tertiary.f32(i32 46, float %111, float %73, float %119)  ; FMad(a,b,c)
  %121 = call float @dx.op.tertiary.f32(i32 46, float %112, float %76, float %120)  ; FMad(a,b,c)
  %122 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %35, i32 %65, i32 12, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %123 = extractvalue %dx.types.ResRet.f32 %122, 0
  %124 = extractvalue %dx.types.ResRet.f32 %122, 1
  %125 = extractvalue %dx.types.ResRet.f32 %122, 2
  %126 = fmul fast float %123, %68
  %127 = call float @dx.op.tertiary.f32(i32 46, float %124, float %71, float %126)  ; FMad(a,b,c)
  %128 = call float @dx.op.tertiary.f32(i32 46, float %125, float %74, float %127)  ; FMad(a,b,c)
  %129 = fmul fast float %123, %69
  %130 = call float @dx.op.tertiary.f32(i32 46, float %124, float %72, float %129)  ; FMad(a,b,c)
  %131 = call float @dx.op.tertiary.f32(i32 46, float %125, float %75, float %130)  ; FMad(a,b,c)
  %132 = fmul fast float %123, %70
  %133 = call float @dx.op.tertiary.f32(i32 46, float %124, float %73, float %132)  ; FMad(a,b,c)
  %134 = call float @dx.op.tertiary.f32(i32 46, float %125, float %76, float %133)  ; FMad(a,b,c)
  %135 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %35, i32 %65, i32 24, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %136 = extractvalue %dx.types.ResRet.f32 %135, 0
  %137 = extractvalue %dx.types.ResRet.f32 %135, 1
  %138 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %35, i32 %66, i32 24, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %139 = extractvalue %dx.types.ResRet.f32 %138, 0
  %140 = extractvalue %dx.types.ResRet.f32 %138, 1
  %141 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %35, i32 %67, i32 24, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %142 = extractvalue %dx.types.ResRet.f32 %141, 0
  %143 = extractvalue %dx.types.ResRet.f32 %141, 1
  %144 = call float @dx.op.worldRayOrigin.f32(i32 147, i8 0)  ; WorldRayOrigin(col)
  %145 = call float @dx.op.worldRayOrigin.f32(i32 147, i8 1)  ; WorldRayOrigin(col)
  %146 = call float @dx.op.worldRayOrigin.f32(i32 147, i8 2)  ; WorldRayOrigin(col)
  %147 = call float @dx.op.rayTCurrent.f32(i32 154)  ; RayTCurrent()
  %148 = call float @dx.op.worldRayDirection.f32(i32 148, i8 0)  ; WorldRayDirection(col)
  %149 = call float @dx.op.worldRayDirection.f32(i32 148, i8 1)  ; WorldRayDirection(col)
  %150 = call float @dx.op.worldRayDirection.f32(i32 148, i8 2)  ; WorldRayDirection(col)
  %151 = fmul fast float %148, %147
  %152 = fmul fast float %149, %147
  %153 = fmul fast float %150, %147
  %154 = fadd fast float %151, %144
  %155 = fadd fast float %152, %145
  %156 = fadd fast float %153, %146
  %157 = getelementptr inbounds %struct.BuiltInTriangleIntersectionAttributes, %struct.BuiltInTriangleIntersectionAttributes* %attr, i32 0, i32 0
  %158 = load <2 x float>, <2 x float>* %157, align 4
  %159 = extractelement <2 x float> %158, i32 0
  %160 = fsub fast float %139, %136
  %161 = fsub fast float %140, %137
  %162 = fmul fast float %159, %160
  %163 = fmul fast float %159, %161
  %164 = fadd fast float %162, %136
  %165 = fadd fast float %163, %137
  %166 = extractelement <2 x float> %158, i32 1
  %167 = fsub fast float %142, %136
  %168 = fsub fast float %143, %137
  %169 = fmul fast float %166, %167
  %170 = fmul fast float %166, %168
  %171 = fadd fast float %164, %169
  %172 = fadd fast float %165, %170
  %173 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 20)  ; CBufferLoadLegacy(handle,regIndex)
  %174 = extractvalue %dx.types.CBufRet.f32 %173, 0
  %175 = extractvalue %dx.types.CBufRet.f32 %173, 1
  %176 = extractvalue %dx.types.CBufRet.f32 %173, 2
  %177 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 22)  ; CBufferLoadLegacy(handle,regIndex)
  %178 = extractvalue %dx.types.CBufRet.f32 %177, 0
  %179 = extractvalue %dx.types.CBufRet.f32 %177, 1
  %180 = extractvalue %dx.types.CBufRet.f32 %177, 2
  %181 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 21)  ; CBufferLoadLegacy(handle,regIndex)
  %182 = extractvalue %dx.types.CBufRet.f32 %181, 0
  %183 = extractvalue %dx.types.CBufRet.f32 %181, 1
  %184 = extractvalue %dx.types.CBufRet.f32 %181, 2
  %185 = getelementptr inbounds %struct.ColorPayload, %struct.ColorPayload* %payload, i32 0, i32 2, i32 0
  %186 = load <3 x float>, <3 x float>* %185, align 4
  %187 = extractelement <3 x float> %186, i32 0
  %188 = extractelement <3 x float> %186, i32 1
  %189 = extractelement <3 x float> %186, i32 2
  %190 = getelementptr inbounds %struct.ColorPayload, %struct.ColorPayload* %payload, i32 0, i32 2, i32 1
  %191 = load <3 x float>, <3 x float>* %190, align 4
  %192 = extractelement <3 x float> %191, i32 0
  %193 = extractelement <3 x float> %191, i32 1
  %194 = extractelement <3 x float> %191, i32 2
  %195 = getelementptr inbounds %struct.ColorPayload, %struct.ColorPayload* %payload, i32 0, i32 3, i32 0
  %196 = load <3 x float>, <3 x float>* %195, align 4
  %197 = extractelement <3 x float> %196, i32 0
  %198 = extractelement <3 x float> %196, i32 1
  %199 = extractelement <3 x float> %196, i32 2
  %200 = getelementptr inbounds %struct.ColorPayload, %struct.ColorPayload* %payload, i32 0, i32 3, i32 1
  %201 = load <3 x float>, <3 x float>* %200, align 4
  %202 = extractelement <3 x float> %201, i32 0
  %203 = extractelement <3 x float> %201, i32 1
  %204 = extractelement <3 x float> %201, i32 2
  %205 = fsub fast float %187, %154
  %206 = fsub fast float %188, %155
  %207 = fsub fast float %189, %156
  %208 = fsub fast float -0.000000e+00, %128
  %209 = fsub fast float -0.000000e+00, %131
  %210 = fsub fast float -0.000000e+00, %134
  %211 = call float @dx.op.dot3.f32(i32 55, float %208, float %209, float %210, float %205, float %206, float %207)  ; Dot3(ax,ay,az,bx,by,bz)
  %212 = extractelement <3 x float> %191, i64 0
  %213 = extractelement <3 x float> %191, i64 1
  %214 = extractelement <3 x float> %191, i64 2
  %215 = call float @dx.op.dot3.f32(i32 55, float %128, float %131, float %134, float %212, float %213, float %214)  ; Dot3(ax,ay,az,bx,by,bz)
  %216 = fdiv fast float %211, %215
  %217 = fmul fast float %216, %192
  %218 = fmul fast float %216, %193
  %219 = fmul fast float %216, %194
  %220 = fadd fast float %217, %187
  %221 = fadd fast float %218, %188
  %222 = fadd fast float %219, %189
  %223 = insertelement <3 x float> undef, float %220, i32 0
  %224 = insertelement <3 x float> %223, float %221, i32 1
  %225 = insertelement <3 x float> %224, float %222, i32 2
  %226 = fsub fast float %197, %154
  %227 = fsub fast float %198, %155
  %228 = fsub fast float %199, %156
  %229 = call float @dx.op.dot3.f32(i32 55, float %208, float %209, float %210, float %226, float %227, float %228)  ; Dot3(ax,ay,az,bx,by,bz)
  %230 = extractelement <3 x float> %201, i64 0
  %231 = extractelement <3 x float> %201, i64 1
  %232 = extractelement <3 x float> %201, i64 2
  %233 = call float @dx.op.dot3.f32(i32 55, float %128, float %131, float %134, float %230, float %231, float %232)  ; Dot3(ax,ay,az,bx,by,bz)
  %234 = fdiv fast float %229, %233
  %235 = fmul fast float %234, %202
  %236 = fmul fast float %234, %203
  %237 = fmul fast float %234, %204
  %238 = fadd fast float %235, %197
  %239 = fadd fast float %236, %198
  %240 = fadd fast float %237, %199
  %241 = insertelement <3 x float> undef, float %238, i32 0
  %242 = insertelement <3 x float> %241, float %239, i32 1
  %243 = insertelement <3 x float> %242, float %240, i32 2
  %244 = fsub fast float %102, %86
  %245 = fsub fast float %105, %90
  %246 = fsub fast float %108, %94
  %247 = fsub fast float %115, %86
  %248 = fsub fast float %118, %90
  %249 = fsub fast float %121, %94
  %250 = fsub fast float %220, %87
  %251 = fsub fast float %221, %91
  %252 = fsub fast float %222, %95
  %253 = call float @dx.op.dot3.f32(i32 55, float %244, float %245, float %246, float %244, float %245, float %246)  ; Dot3(ax,ay,az,bx,by,bz)
  %254 = call float @dx.op.dot3.f32(i32 55, float %244, float %245, float %246, float %247, float %248, float %249)  ; Dot3(ax,ay,az,bx,by,bz)
  %255 = call float @dx.op.dot3.f32(i32 55, float %247, float %248, float %249, float %247, float %248, float %249)  ; Dot3(ax,ay,az,bx,by,bz)
  %256 = call float @dx.op.dot3.f32(i32 55, float %250, float %251, float %252, float %244, float %245, float %246)  ; Dot3(ax,ay,az,bx,by,bz)
  %257 = call float @dx.op.dot3.f32(i32 55, float %250, float %251, float %252, float %247, float %248, float %249)  ; Dot3(ax,ay,az,bx,by,bz)
  %258 = fmul fast float %255, %253
  %259 = fmul fast float %254, %254
  %260 = fsub fast float %258, %259
  %261 = fdiv fast float 1.000000e+00, %260
  %262 = fmul fast float %256, %255
  %263 = fmul fast float %257, %254
  %264 = fsub fast float %262, %263
  %265 = fmul fast float %264, %261
  %266 = fmul fast float %257, %253
  %267 = fmul fast float %256, %254
  %268 = fsub fast float %266, %267
  %269 = fmul fast float %268, %261
  %270 = fsub fast float 1.000000e+00, %265
  %271 = fsub fast float %270, %269
  %272 = fsub fast float %238, %87
  %273 = fsub fast float %239, %91
  %274 = fsub fast float %240, %95
  %275 = call float @dx.op.dot3.f32(i32 55, float %272, float %273, float %274, float %244, float %245, float %246)  ; Dot3(ax,ay,az,bx,by,bz)
  %276 = call float @dx.op.dot3.f32(i32 55, float %272, float %273, float %274, float %247, float %248, float %249)  ; Dot3(ax,ay,az,bx,by,bz)
  %277 = fmul fast float %275, %255
  %278 = fmul fast float %276, %254
  %279 = fsub fast float %277, %278
  %280 = fmul fast float %279, %261
  %281 = fmul fast float %276, %253
  %282 = fmul fast float %275, %254
  %283 = fsub fast float %281, %282
  %284 = fmul fast float %283, %261
  %285 = fsub fast float 1.000000e+00, %280
  %286 = fsub fast float %285, %284
  %287 = fmul fast float %271, %136
  %288 = call float @dx.op.tertiary.f32(i32 46, float %265, float %139, float %287)  ; FMad(a,b,c)
  %289 = call float @dx.op.tertiary.f32(i32 46, float %269, float %142, float %288)  ; FMad(a,b,c)
  %290 = fmul fast float %271, %137
  %291 = call float @dx.op.tertiary.f32(i32 46, float %265, float %140, float %290)  ; FMad(a,b,c)
  %292 = call float @dx.op.tertiary.f32(i32 46, float %269, float %143, float %291)  ; FMad(a,b,c)
  %293 = fsub fast float %289, %171
  %294 = fsub fast float %292, %172
  %295 = fmul fast float %286, %136
  %296 = call float @dx.op.tertiary.f32(i32 46, float %280, float %139, float %295)  ; FMad(a,b,c)
  %297 = call float @dx.op.tertiary.f32(i32 46, float %284, float %142, float %296)  ; FMad(a,b,c)
  %298 = fmul fast float %286, %137
  %299 = call float @dx.op.tertiary.f32(i32 46, float %280, float %140, float %298)  ; FMad(a,b,c)
  %300 = call float @dx.op.tertiary.f32(i32 46, float %284, float %143, float %299)  ; FMad(a,b,c)
  %301 = fsub fast float %297, %171
  %302 = fsub fast float %300, %172
  %303 = call %dx.types.Handle @dx.op.createHandleForLib.dx.types.Handle(i32 160, %dx.types.Handle %2)  ; CreateHandleForLib(Resource)
  %304 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %303, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %305 = call %dx.types.ResRet.f32 @dx.op.sampleGrad.f32(i32 63, %dx.types.Handle %17, %dx.types.Handle %304, float %171, float %172, float undef, float undef, i32 0, i32 0, i32 undef, float %293, float %294, float undef, float %301, float %302, float undef, float undef)  ; SampleGrad(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,ddx0,ddx1,ddx2,ddy0,ddy1,ddy2,clamp)
  %306 = extractvalue %dx.types.ResRet.f32 %305, 0
  %307 = extractvalue %dx.types.ResRet.f32 %305, 1
  %308 = extractvalue %dx.types.ResRet.f32 %305, 2
  %309 = call %dx.types.ResRet.f32 @dx.op.sampleGrad.f32(i32 63, %dx.types.Handle %21, %dx.types.Handle %304, float %171, float %172, float undef, float undef, i32 0, i32 0, i32 undef, float %293, float %294, float undef, float %301, float %302, float undef, float undef)  ; SampleGrad(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,ddx0,ddx1,ddx2,ddy0,ddy1,ddy2,clamp)
  %310 = extractvalue %dx.types.ResRet.f32 %309, 0
  %311 = extractvalue %dx.types.ResRet.f32 %309, 1
  %312 = extractvalue %dx.types.ResRet.f32 %309, 2
  %313 = call %dx.types.ResRet.f32 @dx.op.sampleGrad.f32(i32 63, %dx.types.Handle %25, %dx.types.Handle %304, float %171, float %172, float undef, float undef, i32 0, i32 0, i32 undef, float %293, float %294, float undef, float %301, float %302, float undef, float undef)  ; SampleGrad(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,ddx0,ddx1,ddx2,ddy0,ddy1,ddy2,clamp)
  %314 = extractvalue %dx.types.ResRet.f32 %313, 0
  %315 = extractvalue %dx.types.ResRet.f32 %313, 1
  %316 = extractvalue %dx.types.ResRet.f32 %313, 2
  %317 = extractvalue %dx.types.ResRet.f32 %313, 3
  %318 = fadd fast float %306, 0x3FAC28F5C0000000
  %319 = fadd fast float %307, 0x3FAC28F5C0000000
  %320 = fadd fast float %308, 0x3FAC28F5C0000000
  %321 = fmul fast float %318, 0x3FEE54EDE0000000
  %322 = fmul fast float %319, 0x3FEE54EDE0000000
  %323 = fmul fast float %320, 0x3FEE54EDE0000000
  %324 = call float @dx.op.unary.f32(i32 23, float %321)  ; Log(value)
  %325 = call float @dx.op.unary.f32(i32 23, float %322)  ; Log(value)
  %326 = call float @dx.op.unary.f32(i32 23, float %323)  ; Log(value)
  %327 = fmul fast float %324, 0x4003333340000000
  %328 = fmul fast float %325, 0x4003333340000000
  %329 = fmul fast float %326, 0x4003333340000000
  %330 = call float @dx.op.unary.f32(i32 21, float %327)  ; Exp(value)
  %331 = call float @dx.op.unary.f32(i32 21, float %328)  ; Exp(value)
  %332 = call float @dx.op.unary.f32(i32 21, float %329)  ; Exp(value)
  %333 = fmul fast float %306, 0x3FB3D07220000000
  %334 = fmul fast float %307, 0x3FB3D07220000000
  %335 = fmul fast float %308, 0x3FB3D07220000000
  %336 = fcmp fast olt float %306, 0x3FA4B5DCC0000000
  %337 = fcmp fast olt float %307, 0x3FA4B5DCC0000000
  %338 = fcmp fast olt float %308, 0x3FA4B5DCC0000000
  %339 = select i1 %336, float %333, float %330
  %340 = select i1 %337, float %334, float %331
  %341 = select i1 %338, float %335, float %332
  %342 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %9, i32 %10, i32 12, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %343 = extractvalue %dx.types.ResRet.f32 %342, 0
  %344 = extractvalue %dx.types.ResRet.f32 %342, 1
  %345 = extractvalue %dx.types.ResRet.f32 %342, 2
  %346 = fmul fast float %343, %339
  %347 = fmul fast float %344, %340
  %348 = fmul fast float %345, %341
  %349 = fsub fast float %174, %154
  %350 = fsub fast float %175, %155
  %351 = fsub fast float %176, %156
  %352 = call float @dx.op.dot3.f32(i32 55, float %349, float %350, float %351, float %349, float %350, float %351)  ; Dot3(ax,ay,az,bx,by,bz)
  %353 = call float @dx.op.unary.f32(i32 25, float %352)  ; Rsqrt(value)
  %354 = fmul fast float %353, %349
  %355 = fmul fast float %353, %350
  %356 = fmul fast float %353, %351
  %357 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 23)  ; CBufferLoadLegacy(handle,regIndex)
  %358 = extractvalue %dx.types.CBufRet.f32 %357, 0
  %359 = extractvalue %dx.types.CBufRet.f32 %357, 1
  %360 = extractvalue %dx.types.CBufRet.f32 %357, 2
  %361 = fsub fast float -0.000000e+00, %358
  %362 = fsub fast float -0.000000e+00, %359
  %363 = fsub fast float -0.000000e+00, %360
  %364 = call float @dx.op.dot3.f32(i32 55, float %148, float %149, float %150, float %128, float %131, float %134)  ; Dot3(ax,ay,az,bx,by,bz)
  %365 = fmul fast float %364, 2.000000e+00
  %366 = fmul fast float %365, %128
  %367 = fmul fast float %365, %131
  %368 = fmul fast float %365, %134
  %369 = fsub fast float %148, %366
  %370 = fsub fast float %149, %367
  %371 = fsub fast float %150, %368
  %372 = insertelement <3 x float> undef, float %369, i32 0
  %373 = insertelement <3 x float> %372, float %370, i32 1
  %374 = insertelement <3 x float> %373, float %371, i32 2
  %375 = fmul fast float %128, 2.560000e+02
  %376 = fmul fast float %131, 2.560000e+02
  %377 = fmul fast float %134, 2.560000e+02
  %378 = fptosi float %375 to i32
  %379 = fptosi float %376 to i32
  %380 = fptosi float %377 to i32
  store <3 x float> %225, <3 x float>* %185, align 4
  store <3 x float> %374, <3 x float>* %190, align 4
  store <3 x float> %243, <3 x float>* %195, align 4
  store <3 x float> %374, <3 x float>* %200, align 4
  %381 = getelementptr inbounds %struct.ColorPayload, %struct.ColorPayload* %payload, i32 0, i32 1
  %382 = load i32, i32* %381, align 4, !tbaa !34, !alias.scope !39
  %383 = icmp ugt i32 %382, 1
  %384 = getelementptr inbounds %struct.ColorPayload, %struct.ColorPayload* %payload, i32 0, i32 0
  br i1 %383, label %385, label %386

; <label>:385                                     ; preds = %64
  store <3 x float> zeroinitializer, <3 x float>* %384, align 4, !tbaa !31, !alias.scope !39
  br label %426

; <label>:386                                     ; preds = %64
  %387 = call float @dx.op.unary.f32(i32 6, float %154)  ; FAbs(value)
  %388 = fcmp fast olt float %387, 3.125000e-02
  %389 = fmul fast float %128, 0x3EF0000000000000
  %390 = fadd fast float %154, %389
  %391 = bitcast float %154 to i32
  %392 = fcmp fast olt float %154, 0.000000e+00
  %393 = sub nsw i32 0, %378
  %394 = select i1 %392, i32 %393, i32 %378
  %395 = add nsw i32 %394, %391
  %396 = bitcast i32 %395 to float
  %397 = select i1 %388, float %390, float %396
  %398 = call float @dx.op.unary.f32(i32 6, float %155)  ; FAbs(value)
  %399 = fcmp fast olt float %398, 3.125000e-02
  %400 = fmul fast float %131, 0x3EF0000000000000
  %401 = fadd fast float %155, %400
  %402 = bitcast float %155 to i32
  %403 = fcmp fast olt float %155, 0.000000e+00
  %404 = sub nsw i32 0, %379
  %405 = select i1 %403, i32 %404, i32 %379
  %406 = add nsw i32 %405, %402
  %407 = bitcast i32 %406 to float
  %408 = select i1 %399, float %401, float %407
  %409 = call float @dx.op.unary.f32(i32 6, float %156)  ; FAbs(value)
  %410 = fcmp fast olt float %409, 3.125000e-02
  %411 = fmul fast float %134, 0x3EF0000000000000
  %412 = fadd fast float %156, %411
  %413 = bitcast float %156 to i32
  %414 = fcmp fast olt float %156, 0.000000e+00
  %415 = sub nsw i32 0, %380
  %416 = select i1 %414, i32 %415, i32 %380
  %417 = add nsw i32 %416, %413
  %418 = bitcast i32 %417 to float
  %419 = select i1 %410, float %412, float %418
  %420 = add i32 %382, 1
  store i32 %420, i32* %381, align 4, !tbaa !34, !alias.scope !39
  %421 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %5, i32 24)  ; CBufferLoadLegacy(handle,regIndex)
  %422 = extractvalue %dx.types.CBufRet.i32 %421, 0
  %423 = call %dx.types.Handle @dx.op.createHandleFromHeap(i32 218, i32 %422, i1 false, i1 false)  ; CreateHandleFromHeap(index,samplerHeap,nonUniformIndex)
  %424 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %423, %dx.types.ResourceProperties { i32 16, i32 0 })  ; AnnotateHandle(res,props)  resource: RTAccelerationStructure
  call void @dx.op.traceRay.struct.ColorPayload(i32 157, %dx.types.Handle %424, i32 0, i32 255, i32 0, i32 0, i32 0, float %397, float %408, float %419, float 0.000000e+00, float %369, float %370, float %371, float 5.000000e+03, %struct.ColorPayload* %payload)  ; TraceRay(AccelerationStructure,RayFlags,InstanceInclusionMask,RayContributionToHitGroupIndex,MultiplierForGeometryContributionToShaderIndex,MissShaderIndex,Origin_X,Origin_Y,Origin_Z,TMin,Direction_X,Direction_Y,Direction_Z,TMax,payload)
  %425 = load <3 x float>, <3 x float>* %384, align 4, !tbaa !31
  br label %426

; <label>:426                                     ; preds = %386, %385
  %427 = phi <3 x float> [ %425, %386 ], [ zeroinitializer, %385 ]
  %428 = getelementptr inbounds %struct.ColorPayload, %struct.ColorPayload* %payload, i32 0, i32 0
  %429 = extractelement <3 x float> %427, i32 0
  %430 = extractelement <3 x float> %427, i32 1
  %431 = extractelement <3 x float> %427, i32 2
  %432 = call i32 @dx.op.dispatchRaysIndex.i32(i32 145, i8 0)  ; DispatchRaysIndex(col)
  %433 = call i32 @dx.op.dispatchRaysIndex.i32(i32 145, i8 1)  ; DispatchRaysIndex(col)
  %434 = call i32 @dx.op.dispatchRaysDimensions.i32(i32 146, i8 0)  ; DispatchRaysDimensions(col)
  %435 = call i32 @dx.op.dispatchRaysDimensions.i32(i32 146, i8 1)  ; DispatchRaysDimensions(col)
  %436 = uitofp i32 %432 to float
  %437 = uitofp i32 %434 to float
  %438 = fdiv fast float %436, %437
  %439 = uitofp i32 %433 to float
  %440 = uitofp i32 %435 to float
  %441 = fdiv fast float %439, %440
  %442 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %13, i32 %10, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %443 = extractvalue %dx.types.ResRet.f32 %442, 0
  %444 = extractvalue %dx.types.ResRet.f32 %442, 1
  %445 = extractvalue %dx.types.ResRet.f32 %442, 2
  %446 = extractvalue %dx.types.ResRet.f32 %442, 3
  %447 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %13, i32 %10, i32 16, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %448 = extractvalue %dx.types.ResRet.f32 %447, 0
  %449 = extractvalue %dx.types.ResRet.f32 %447, 1
  %450 = extractvalue %dx.types.ResRet.f32 %447, 2
  %451 = extractvalue %dx.types.ResRet.f32 %447, 3
  %452 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %13, i32 %10, i32 32, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %453 = extractvalue %dx.types.ResRet.f32 %452, 0
  %454 = extractvalue %dx.types.ResRet.f32 %452, 1
  %455 = extractvalue %dx.types.ResRet.f32 %452, 2
  %456 = extractvalue %dx.types.ResRet.f32 %452, 3
  %457 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %13, i32 %10, i32 48, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %458 = extractvalue %dx.types.ResRet.f32 %457, 0
  %459 = extractvalue %dx.types.ResRet.f32 %457, 1
  %460 = extractvalue %dx.types.ResRet.f32 %457, 2
  %461 = extractvalue %dx.types.ResRet.f32 %457, 3
  %462 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 16)  ; CBufferLoadLegacy(handle,regIndex)
  %463 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 17)  ; CBufferLoadLegacy(handle,regIndex)
  %464 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 19)  ; CBufferLoadLegacy(handle,regIndex)
  %465 = extractvalue %dx.types.CBufRet.f32 %464, 0
  %466 = extractvalue %dx.types.CBufRet.f32 %464, 1
  %467 = extractvalue %dx.types.CBufRet.f32 %464, 2
  %468 = extractvalue %dx.types.CBufRet.f32 %464, 3
  %469 = call float @dx.op.worldToObject.f32(i32 152, i32 0, i8 0)  ; WorldToObject(row,col)
  %470 = call float @dx.op.worldToObject.f32(i32 152, i32 1, i8 0)  ; WorldToObject(row,col)
  %471 = call float @dx.op.worldToObject.f32(i32 152, i32 2, i8 0)  ; WorldToObject(row,col)
  %472 = call float @dx.op.worldToObject.f32(i32 152, i32 0, i8 1)  ; WorldToObject(row,col)
  %473 = call float @dx.op.worldToObject.f32(i32 152, i32 1, i8 1)  ; WorldToObject(row,col)
  %474 = call float @dx.op.worldToObject.f32(i32 152, i32 2, i8 1)  ; WorldToObject(row,col)
  %475 = call float @dx.op.worldToObject.f32(i32 152, i32 0, i8 2)  ; WorldToObject(row,col)
  %476 = call float @dx.op.worldToObject.f32(i32 152, i32 1, i8 2)  ; WorldToObject(row,col)
  %477 = call float @dx.op.worldToObject.f32(i32 152, i32 2, i8 2)  ; WorldToObject(row,col)
  %478 = call float @dx.op.worldToObject.f32(i32 152, i32 0, i8 3)  ; WorldToObject(row,col)
  %479 = call float @dx.op.worldToObject.f32(i32 152, i32 1, i8 3)  ; WorldToObject(row,col)
  %480 = call float @dx.op.worldToObject.f32(i32 152, i32 2, i8 3)  ; WorldToObject(row,col)
  %481 = fmul fast float %469, %154
  %482 = call float @dx.op.tertiary.f32(i32 46, float %155, float %472, float %481)  ; FMad(a,b,c)
  %483 = call float @dx.op.tertiary.f32(i32 46, float %156, float %475, float %482)  ; FMad(a,b,c)
  %484 = fadd fast float %483, %478
  %485 = fmul fast float %470, %154
  %486 = call float @dx.op.tertiary.f32(i32 46, float %155, float %473, float %485)  ; FMad(a,b,c)
  %487 = call float @dx.op.tertiary.f32(i32 46, float %156, float %476, float %486)  ; FMad(a,b,c)
  %488 = fadd fast float %487, %479
  %489 = fmul fast float %471, %154
  %490 = call float @dx.op.tertiary.f32(i32 46, float %155, float %474, float %489)  ; FMad(a,b,c)
  %491 = call float @dx.op.tertiary.f32(i32 46, float %156, float %477, float %490)  ; FMad(a,b,c)
  %492 = fadd fast float %491, %480
  %493 = fmul fast float %484, %443
  %494 = call float @dx.op.tertiary.f32(i32 46, float %488, float %444, float %493)  ; FMad(a,b,c)
  %495 = call float @dx.op.tertiary.f32(i32 46, float %492, float %445, float %494)  ; FMad(a,b,c)
  %496 = fadd fast float %495, %446
  %497 = fmul fast float %484, %448
  %498 = call float @dx.op.tertiary.f32(i32 46, float %488, float %449, float %497)  ; FMad(a,b,c)
  %499 = call float @dx.op.tertiary.f32(i32 46, float %492, float %450, float %498)  ; FMad(a,b,c)
  %500 = fadd fast float %499, %451
  %501 = fmul fast float %484, %453
  %502 = call float @dx.op.tertiary.f32(i32 46, float %488, float %454, float %501)  ; FMad(a,b,c)
  %503 = call float @dx.op.tertiary.f32(i32 46, float %492, float %455, float %502)  ; FMad(a,b,c)
  %504 = fadd fast float %503, %456
  %505 = fmul fast float %484, %458
  %506 = call float @dx.op.tertiary.f32(i32 46, float %488, float %459, float %505)  ; FMad(a,b,c)
  %507 = call float @dx.op.tertiary.f32(i32 46, float %492, float %460, float %506)  ; FMad(a,b,c)
  %508 = fadd fast float %507, %461
  %509 = fmul fast float %496, %465
  %510 = call float @dx.op.tertiary.f32(i32 46, float %500, float %466, float %509)  ; FMad(a,b,c)
  %511 = call float @dx.op.tertiary.f32(i32 46, float %504, float %467, float %510)  ; FMad(a,b,c)
  %512 = call float @dx.op.tertiary.f32(i32 46, float %508, float %468, float %511)  ; FMad(a,b,c)
  %513 = call %dx.types.Handle @dx.op.createHandleForLib.dx.types.Handle(i32 160, %dx.types.Handle %1)  ; CreateHandleForLib(Resource)
  %514 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %513, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %515 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %27, %dx.types.Handle %514, float %438, float %441, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %516 = extractvalue %dx.types.ResRet.f32 %515, 0
  %517 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %29, %dx.types.Handle %514, float %438, float %441, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %518 = extractvalue %dx.types.ResRet.f32 %517, 0
  %519 = call float @dx.op.dot3.f32(i32 55, float %128, float %131, float %134, float %128, float %131, float %134)  ; Dot3(ax,ay,az,bx,by,bz)
  %520 = call float @dx.op.unary.f32(i32 6, float %519)  ; FAbs(value)
  %521 = call float @dx.op.binary.f32(i32 36, float %520, float 1.000000e+00)  ; FMin(a,b)
  %522 = fmul fast float %521, %521
  %523 = fsub fast float 1.000000e+00, %522
  %524 = fdiv fast float %523, %522
  %525 = fmul fast float %524, 1.250000e-01
  %526 = call float @dx.op.unary.f32(i32 7, float %525)  ; Saturate(value)
  %527 = call float @dx.op.dot3.f32(i32 55, float %128, float %131, float %134, float %361, float %362, float %363)  ; Dot3(ax,ay,az,bx,by,bz)
  %528 = call float @dx.op.unary.f32(i32 6, float %527)  ; FAbs(value)
  %529 = call float @dx.op.binary.f32(i32 35, float %528, float 0x3EB0C6F7A0000000)  ; FMax(a,b)
  %530 = fmul fast float %529, %529
  %531 = fsub fast float 1.000000e+00, %530
  %532 = fdiv fast float %531, %530
  %533 = fmul fast float %532, %526
  %534 = fadd fast float %533, 1.000000e+00
  %535 = call float @dx.op.unary.f32(i32 24, float %534)  ; Sqrt(value)
  %536 = fadd fast float %535, 1.000000e+00
  %537 = fdiv fast float 2.000000e+00, %536
  %538 = call float @dx.op.dot3.f32(i32 55, float %128, float %131, float %134, float %354, float %355, float %356)  ; Dot3(ax,ay,az,bx,by,bz)
  %539 = call float @dx.op.unary.f32(i32 7, float %538)  ; Saturate(value)
  %540 = fmul fast float %315, %315
  %541 = fmul fast float %346, %316
  %542 = fmul fast float %347, %316
  %543 = fmul fast float %348, %316
  %544 = fsub fast float %346, %541
  %545 = fsub fast float %347, %542
  %546 = fsub fast float %348, %543
  %547 = fmul fast float %544, %314
  %548 = fmul fast float %545, %314
  %549 = fmul fast float %546, %314
  %550 = fadd fast float %346, 0xBFA47AE140000000
  %551 = fadd fast float %347, 0xBFA47AE140000000
  %552 = fadd fast float %348, 0xBFA47AE140000000
  %553 = fmul fast float %550, %316
  %554 = fmul fast float %551, %316
  %555 = fmul fast float %552, %316
  %556 = fadd fast float %553, 0x3FA47AE140000000
  %557 = fadd fast float %554, 0x3FA47AE140000000
  %558 = fadd fast float %555, 0x3FA47AE140000000
  %559 = fmul fast float %556, %314
  %560 = fmul fast float %557, %314
  %561 = fmul fast float %558, %314
  %562 = fsub fast float %354, %358
  %563 = fsub fast float %355, %359
  %564 = fsub fast float %356, %360
  %565 = call float @dx.op.dot3.f32(i32 55, float %562, float %563, float %564, float %562, float %563, float %564)  ; Dot3(ax,ay,az,bx,by,bz)
  %566 = call float @dx.op.unary.f32(i32 25, float %565)  ; Rsqrt(value)
  %567 = fmul fast float %566, %562
  %568 = fmul fast float %566, %563
  %569 = fmul fast float %566, %564
  %570 = call float @dx.op.unary.f32(i32 7, float %527)  ; Saturate(value)
  %571 = call float @dx.op.dot3.f32(i32 55, float %361, float %362, float %363, float %567, float %568, float %569)  ; Dot3(ax,ay,az,bx,by,bz)
  %572 = call float @dx.op.unary.f32(i32 7, float %571)  ; Saturate(value)
  %573 = call float @dx.op.dot3.f32(i32 55, float %128, float %131, float %134, float %567, float %568, float %569)  ; Dot3(ax,ay,az,bx,by,bz)
  %574 = call float @dx.op.unary.f32(i32 7, float %573)  ; Saturate(value)
  %575 = fmul fast float %315, 2.000000e+00
  %576 = fmul fast float %572, %572
  %577 = fmul fast float %576, %575
  %578 = fadd fast float %577, -5.000000e-01
  %579 = fsub fast float 1.000000e+00, %570
  %580 = call float @dx.op.unary.f32(i32 23, float %579)  ; Log(value)
  %581 = fmul fast float %580, 5.000000e+00
  %582 = call float @dx.op.unary.f32(i32 21, float %581)  ; Exp(value)
  %583 = fmul fast float %582, %578
  %584 = fadd fast float %583, 1.000000e+00
  %585 = fsub fast float 1.000000e+00, %539
  %586 = call float @dx.op.unary.f32(i32 23, float %585)  ; Log(value)
  %587 = fmul fast float %586, 5.000000e+00
  %588 = call float @dx.op.unary.f32(i32 21, float %587)  ; Exp(value)
  %589 = fmul fast float %588, %578
  %590 = fadd fast float %589, 1.000000e+00
  %591 = fmul fast float %590, %584
  %592 = fmul fast float %540, %540
  %593 = fadd fast float %592, -1.000000e+00
  %594 = fmul fast float %574, %574
  %595 = fmul fast float %594, %593
  %596 = fadd fast float %595, 1.000000e+00
  %597 = fmul fast float %596, %596
  %598 = fmul fast float %597, 0x400921FB60000000
  %599 = call float @dx.op.binary.f32(i32 35, float 0x3EB0C6F7A0000000, float %598)  ; FMax(a,b)
  %600 = fdiv fast float %592, %599
  %601 = fsub fast float 1.000000e+00, %572
  %602 = call float @dx.op.unary.f32(i32 23, float %601)  ; Log(value)
  %603 = fmul fast float %602, 5.000000e+00
  %604 = call float @dx.op.unary.f32(i32 21, float %603)  ; Exp(value)
  %605 = fsub fast float 1.000000e+00, %576
  %606 = fmul fast float %592, 2.500000e-01
  %607 = fmul fast float %606, %605
  %608 = fadd fast float %607, %576
  %609 = fdiv fast float 1.000000e+00, %608
  %610 = fmul fast float %591, %549
  %611 = fsub fast float 1.000000e+00, %561
  %612 = fmul fast float %604, %611
  %613 = fadd fast float %612, %561
  %614 = fmul fast float %600, %317
  %615 = fmul fast float %614, %609
  %616 = fmul fast float %615, %613
  %617 = fadd fast float %616, %610
  %618 = fmul fast float %537, %184
  %619 = fmul fast float %618, %570
  %620 = fmul fast float %619, %617
  %621 = fmul fast float %591, %548
  %622 = fsub fast float 1.000000e+00, %560
  %623 = fmul fast float %604, %622
  %624 = fadd fast float %623, %560
  %625 = fmul fast float %615, %624
  %626 = fadd fast float %625, %621
  %627 = fmul fast float %537, %183
  %628 = fmul fast float %627, %570
  %629 = fmul fast float %628, %626
  %630 = fmul fast float %591, %547
  %631 = fsub fast float 1.000000e+00, %559
  %632 = fmul fast float %604, %631
  %633 = fadd fast float %632, %559
  %634 = fmul fast float %615, %633
  %635 = fadd fast float %634, %630
  %636 = fmul fast float %537, %182
  %637 = fmul fast float %636, %570
  %638 = fmul fast float %637, %635
  %639 = fmul fast float %547, %178
  %640 = fmul fast float %639, %516
  %641 = fmul fast float %548, %179
  %642 = fmul fast float %641, %516
  %643 = fmul fast float %549, %180
  %644 = fmul fast float %643, %516
  %645 = fmul fast float %429, %559
  %646 = fmul fast float %430, %560
  %647 = fmul fast float %431, %561
  %648 = fadd fast float %638, %645
  %649 = fmul fast float %648, %518
  %650 = fadd fast float %640, %310
  %651 = fadd fast float %650, %649
  %652 = fadd fast float %629, %646
  %653 = fmul fast float %652, %518
  %654 = fadd fast float %642, %311
  %655 = fadd fast float %654, %653
  %656 = fadd fast float %620, %647
  %657 = fmul fast float %656, %518
  %658 = fadd fast float %644, %312
  %659 = fadd fast float %658, %657
  %660 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %5, i32 24)  ; CBufferLoadLegacy(handle,regIndex)
  %661 = extractvalue %dx.types.CBufRet.i32 %660, 3
  %662 = icmp eq i32 %661, 0
  br i1 %662, label %667, label %663

; <label>:663                                     ; preds = %426
  %664 = insertelement <3 x float> undef, float %651, i32 0
  %665 = insertelement <3 x float> %664, float %655, i32 1
  %666 = insertelement <3 x float> %665, float %659, i32 2
  br label %702

; <label>:667                                     ; preds = %426
  %668 = extractvalue %dx.types.CBufRet.f32 %463, 3
  %669 = extractvalue %dx.types.CBufRet.f32 %463, 2
  %670 = extractvalue %dx.types.CBufRet.f32 %463, 1
  %671 = extractvalue %dx.types.CBufRet.f32 %463, 0
  %672 = fmul fast float %496, %671
  %673 = call float @dx.op.tertiary.f32(i32 46, float %500, float %670, float %672)  ; FMad(a,b,c)
  %674 = call float @dx.op.tertiary.f32(i32 46, float %504, float %669, float %673)  ; FMad(a,b,c)
  %675 = call float @dx.op.tertiary.f32(i32 46, float %508, float %668, float %674)  ; FMad(a,b,c)
  %676 = fdiv fast float %675, %512
  %677 = extractvalue %dx.types.CBufRet.f32 %462, 3
  %678 = extractvalue %dx.types.CBufRet.f32 %462, 2
  %679 = extractvalue %dx.types.CBufRet.f32 %462, 1
  %680 = extractvalue %dx.types.CBufRet.f32 %462, 0
  %681 = fmul fast float %496, %680
  %682 = call float @dx.op.tertiary.f32(i32 46, float %500, float %679, float %681)  ; FMad(a,b,c)
  %683 = call float @dx.op.tertiary.f32(i32 46, float %504, float %678, float %682)  ; FMad(a,b,c)
  %684 = call float @dx.op.tertiary.f32(i32 46, float %508, float %677, float %683)  ; FMad(a,b,c)
  %685 = fdiv fast float %684, %512
  %686 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %31, %dx.types.Handle %514, float %685, float %676, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %687 = extractvalue %dx.types.ResRet.f32 %686, 0
  %688 = extractvalue %dx.types.ResRet.f32 %686, 1
  %689 = extractvalue %dx.types.ResRet.f32 %686, 2
  %690 = fsub fast float %687, %651
  %691 = fsub fast float %688, %655
  %692 = fsub fast float %689, %659
  %693 = fmul fast float %690, 5.000000e-01
  %694 = fmul fast float %691, 5.000000e-01
  %695 = fmul fast float %692, 5.000000e-01
  %696 = fadd fast float %693, %651
  %697 = fadd fast float %694, %655
  %698 = fadd fast float %695, %659
  %699 = insertelement <3 x float> undef, float %696, i32 0
  %700 = insertelement <3 x float> %699, float %697, i32 1
  %701 = insertelement <3 x float> %700, float %698, i32 2
  br label %702

; <label>:702                                     ; preds = %667, %663
  %703 = phi <3 x float> [ %701, %667 ], [ %666, %663 ]
  store <3 x float> %703, <3 x float>* %428, align 4
  ret void
}

; Function Attrs: nounwind
define void @"\01?ClosestHitShader@@YAXUColorPayload@@UBuiltInTriangleIntersectionAttributes@@@Z"(%struct.ColorPayload* noalias %payload, %struct.BuiltInTriangleIntersectionAttributes* nocapture readonly %attr) #0 {
  %1 = load %dx.types.Handle, %dx.types.Handle* @"\01?AnisoWrap@@3USamplerState@@A", align 4
  %2 = load %dx.types.Handle, %dx.types.Handle* @"\01?LinearClamp@@3USamplerState@@A", align 4
  %3 = load %hostlayout.frameCB, %hostlayout.frameCB* @frameCB_legacy
  %4 = call %dx.types.Handle @dx.op.createHandleForLib.hostlayout.frameCB(i32 160, %hostlayout.frameCB %3)  ; CreateHandleForLib(Resource)
  %5 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 13, i32 400 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %6 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %5, i32 24)  ; CBufferLoadLegacy(handle,regIndex)
  %7 = extractvalue %dx.types.CBufRet.i32 %6, 1
  %8 = call %dx.types.Handle @dx.op.createHandleFromHeap(i32 218, i32 %7, i1 false, i1 false)  ; CreateHandleFromHeap(index,samplerHeap,nonUniformIndex)
  %9 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %8, %dx.types.ResourceProperties { i32 524, i32 80 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=80>
  %10 = call i32 @dx.op.instanceID.i32(i32 141)  ; InstanceID()
  %11 = call i32 @dx.op.geometryIndex.i32(i32 213)  ; GeometryIndex()
  %12 = add i32 %11, %10
  %13 = extractvalue %dx.types.CBufRet.i32 %6, 2
  %14 = call %dx.types.Handle @dx.op.createHandleFromHeap(i32 218, i32 %13, i1 false, i1 false)  ; CreateHandleFromHeap(index,samplerHeap,nonUniformIndex)
  %15 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %14, %dx.types.ResourceProperties { i32 524, i32 64 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=64>
  %16 = call i32 @dx.op.instanceIndex.i32(i32 142)  ; InstanceIndex()
  %17 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %9, i32 %12, i32 60, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %18 = extractvalue %dx.types.ResRet.i32 %17, 0
  %19 = call %dx.types.Handle @dx.op.createHandleFromHeap(i32 218, i32 %18, i1 false, i1 false)  ; CreateHandleFromHeap(index,samplerHeap,nonUniformIndex)
  %20 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %19, %dx.types.ResourceProperties { i32 2, i32 777 })  ; AnnotateHandle(res,props)  resource: Texture2D<3xF32>
  %21 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %9, i32 %12, i32 64, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %22 = extractvalue %dx.types.ResRet.i32 %21, 0
  %23 = call %dx.types.Handle @dx.op.createHandleFromHeap(i32 218, i32 %22, i1 false, i1 false)  ; CreateHandleFromHeap(index,samplerHeap,nonUniformIndex)
  %24 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %23, %dx.types.ResourceProperties { i32 2, i32 521 })  ; AnnotateHandle(res,props)  resource: Texture2D<2xF32>
  %25 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %9, i32 %12, i32 72, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %26 = extractvalue %dx.types.ResRet.i32 %25, 0
  %27 = call %dx.types.Handle @dx.op.createHandleFromHeap(i32 218, i32 %26, i1 false, i1 false)  ; CreateHandleFromHeap(index,samplerHeap,nonUniformIndex)
  %28 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %27, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %29 = call %dx.types.Handle @dx.op.createHandleFromHeap(i32 218, i32 12, i1 false, i1 false)  ; CreateHandleFromHeap(index,samplerHeap,nonUniformIndex)
  %30 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %29, %dx.types.ResourceProperties { i32 2, i32 265 })  ; AnnotateHandle(res,props)  resource: Texture2D<F32>
  %31 = call %dx.types.Handle @dx.op.createHandleFromHeap(i32 218, i32 18, i1 false, i1 false)  ; CreateHandleFromHeap(index,samplerHeap,nonUniformIndex)
  %32 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %31, %dx.types.ResourceProperties { i32 2, i32 265 })  ; AnnotateHandle(res,props)  resource: Texture2D<F32>
  %33 = call %dx.types.Handle @dx.op.createHandleFromHeap(i32 218, i32 3, i1 false, i1 false)  ; CreateHandleFromHeap(index,samplerHeap,nonUniformIndex)
  %34 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %33, %dx.types.ResourceProperties { i32 2, i32 777 })  ; AnnotateHandle(res,props)  resource: Texture2D<3xF32>
  %35 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %9, i32 %12, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %36 = extractvalue %dx.types.ResRet.i32 %35, 0
  %37 = call %dx.types.Handle @dx.op.createHandleFromHeap(i32 218, i32 %36, i1 false, i1 false)  ; CreateHandleFromHeap(index,samplerHeap,nonUniformIndex)
  %38 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %37, %dx.types.ResourceProperties { i32 524, i32 44 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=44>
  %39 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %9, i32 %12, i32 4, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %40 = extractvalue %dx.types.ResRet.i32 %39, 0
  %41 = call %dx.types.Handle @dx.op.createHandleFromHeap(i32 218, i32 %40, i1 false, i1 false)  ; CreateHandleFromHeap(index,samplerHeap,nonUniformIndex)
  %42 = call i32 @dx.op.primitiveIndex.i32(i32 161)  ; PrimitiveIndex()
  %43 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %9, i32 %12, i32 8, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %44 = extractvalue %dx.types.ResRet.i32 %43, 0
  %45 = icmp ne i32 %44, 0
  %46 = select i1 %45, i32 6, i32 12
  %47 = mul i32 %46, %42
  %48 = icmp eq i32 %44, 0
  %49 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %41, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  br i1 %48, label %62, label %50

; <label>:50                                      ; preds = %0
  %51 = and i32 %47, -4
  %52 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %49, i32 %51, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %53 = extractvalue %dx.types.ResRet.i32 %52, 0
  %54 = extractvalue %dx.types.ResRet.i32 %52, 1
  %55 = icmp eq i32 %51, %47
  %56 = lshr i32 %53, 16
  %57 = and i32 %54, 65535
  br i1 %55, label %58, label %60

; <label>:58                                      ; preds = %50
  %59 = and i32 %53, 65535
  br label %67

; <label>:60                                      ; preds = %50
  %61 = lshr i32 %54, 16
  br label %67

; <label>:62                                      ; preds = %0
  %63 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %49, i32 %47, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %64 = extractvalue %dx.types.ResRet.i32 %63, 0
  %65 = extractvalue %dx.types.ResRet.i32 %63, 1
  %66 = extractvalue %dx.types.ResRet.i32 %63, 2
  br label %67

; <label>:67                                      ; preds = %62, %60, %58
  %68 = phi i32 [ %64, %62 ], [ %59, %58 ], [ %56, %60 ]
  %69 = phi i32 [ %65, %62 ], [ %56, %58 ], [ %57, %60 ]
  %70 = phi i32 [ %66, %62 ], [ %57, %58 ], [ %61, %60 ]
  %71 = call float @dx.op.objectToWorld.f32(i32 151, i32 0, i8 0)  ; ObjectToWorld(row,col)
  %72 = call float @dx.op.objectToWorld.f32(i32 151, i32 1, i8 0)  ; ObjectToWorld(row,col)
  %73 = call float @dx.op.objectToWorld.f32(i32 151, i32 2, i8 0)  ; ObjectToWorld(row,col)
  %74 = call float @dx.op.objectToWorld.f32(i32 151, i32 0, i8 1)  ; ObjectToWorld(row,col)
  %75 = call float @dx.op.objectToWorld.f32(i32 151, i32 1, i8 1)  ; ObjectToWorld(row,col)
  %76 = call float @dx.op.objectToWorld.f32(i32 151, i32 2, i8 1)  ; ObjectToWorld(row,col)
  %77 = call float @dx.op.objectToWorld.f32(i32 151, i32 0, i8 2)  ; ObjectToWorld(row,col)
  %78 = call float @dx.op.objectToWorld.f32(i32 151, i32 1, i8 2)  ; ObjectToWorld(row,col)
  %79 = call float @dx.op.objectToWorld.f32(i32 151, i32 2, i8 2)  ; ObjectToWorld(row,col)
  %80 = call float @dx.op.objectToWorld.f32(i32 151, i32 0, i8 3)  ; ObjectToWorld(row,col)
  %81 = call float @dx.op.objectToWorld.f32(i32 151, i32 1, i8 3)  ; ObjectToWorld(row,col)
  %82 = call float @dx.op.objectToWorld.f32(i32 151, i32 2, i8 3)  ; ObjectToWorld(row,col)
  %83 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %38, i32 %68, i32 0, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %84 = extractvalue %dx.types.ResRet.f32 %83, 0
  %85 = extractvalue %dx.types.ResRet.f32 %83, 1
  %86 = extractvalue %dx.types.ResRet.f32 %83, 2
  %87 = fmul fast float %84, %71
  %88 = call float @dx.op.tertiary.f32(i32 46, float %85, float %74, float %87)  ; FMad(a,b,c)
  %89 = call float @dx.op.tertiary.f32(i32 46, float %86, float %77, float %88)  ; FMad(a,b,c)
  %90 = fadd fast float %89, %80
  %91 = fmul fast float %84, %72
  %92 = call float @dx.op.tertiary.f32(i32 46, float %85, float %75, float %91)  ; FMad(a,b,c)
  %93 = call float @dx.op.tertiary.f32(i32 46, float %86, float %78, float %92)  ; FMad(a,b,c)
  %94 = fadd fast float %93, %81
  %95 = fmul fast float %84, %73
  %96 = call float @dx.op.tertiary.f32(i32 46, float %85, float %76, float %95)  ; FMad(a,b,c)
  %97 = call float @dx.op.tertiary.f32(i32 46, float %86, float %79, float %96)  ; FMad(a,b,c)
  %98 = fadd fast float %97, %82
  %99 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %38, i32 %69, i32 0, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %100 = extractvalue %dx.types.ResRet.f32 %99, 0
  %101 = extractvalue %dx.types.ResRet.f32 %99, 1
  %102 = extractvalue %dx.types.ResRet.f32 %99, 2
  %103 = fmul fast float %100, %71
  %104 = call float @dx.op.tertiary.f32(i32 46, float %101, float %74, float %103)  ; FMad(a,b,c)
  %105 = call float @dx.op.tertiary.f32(i32 46, float %102, float %77, float %104)  ; FMad(a,b,c)
  %106 = fmul fast float %100, %72
  %107 = call float @dx.op.tertiary.f32(i32 46, float %101, float %75, float %106)  ; FMad(a,b,c)
  %108 = call float @dx.op.tertiary.f32(i32 46, float %102, float %78, float %107)  ; FMad(a,b,c)
  %109 = fmul fast float %100, %73
  %110 = call float @dx.op.tertiary.f32(i32 46, float %101, float %76, float %109)  ; FMad(a,b,c)
  %111 = call float @dx.op.tertiary.f32(i32 46, float %102, float %79, float %110)  ; FMad(a,b,c)
  %112 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %38, i32 %70, i32 0, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %113 = extractvalue %dx.types.ResRet.f32 %112, 0
  %114 = extractvalue %dx.types.ResRet.f32 %112, 1
  %115 = extractvalue %dx.types.ResRet.f32 %112, 2
  %116 = fmul fast float %113, %71
  %117 = call float @dx.op.tertiary.f32(i32 46, float %114, float %74, float %116)  ; FMad(a,b,c)
  %118 = call float @dx.op.tertiary.f32(i32 46, float %115, float %77, float %117)  ; FMad(a,b,c)
  %119 = fmul fast float %113, %72
  %120 = call float @dx.op.tertiary.f32(i32 46, float %114, float %75, float %119)  ; FMad(a,b,c)
  %121 = call float @dx.op.tertiary.f32(i32 46, float %115, float %78, float %120)  ; FMad(a,b,c)
  %122 = fmul fast float %113, %73
  %123 = call float @dx.op.tertiary.f32(i32 46, float %114, float %76, float %122)  ; FMad(a,b,c)
  %124 = call float @dx.op.tertiary.f32(i32 46, float %115, float %79, float %123)  ; FMad(a,b,c)
  %125 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %38, i32 %68, i32 12, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %126 = extractvalue %dx.types.ResRet.f32 %125, 0
  %127 = extractvalue %dx.types.ResRet.f32 %125, 1
  %128 = extractvalue %dx.types.ResRet.f32 %125, 2
  %129 = fmul fast float %126, %71
  %130 = call float @dx.op.tertiary.f32(i32 46, float %127, float %74, float %129)  ; FMad(a,b,c)
  %131 = call float @dx.op.tertiary.f32(i32 46, float %128, float %77, float %130)  ; FMad(a,b,c)
  %132 = fmul fast float %126, %72
  %133 = call float @dx.op.tertiary.f32(i32 46, float %127, float %75, float %132)  ; FMad(a,b,c)
  %134 = call float @dx.op.tertiary.f32(i32 46, float %128, float %78, float %133)  ; FMad(a,b,c)
  %135 = fmul fast float %126, %73
  %136 = call float @dx.op.tertiary.f32(i32 46, float %127, float %76, float %135)  ; FMad(a,b,c)
  %137 = call float @dx.op.tertiary.f32(i32 46, float %128, float %79, float %136)  ; FMad(a,b,c)
  %138 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %38, i32 %69, i32 12, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %139 = extractvalue %dx.types.ResRet.f32 %138, 0
  %140 = extractvalue %dx.types.ResRet.f32 %138, 1
  %141 = extractvalue %dx.types.ResRet.f32 %138, 2
  %142 = fmul fast float %139, %71
  %143 = call float @dx.op.tertiary.f32(i32 46, float %140, float %74, float %142)  ; FMad(a,b,c)
  %144 = call float @dx.op.tertiary.f32(i32 46, float %141, float %77, float %143)  ; FMad(a,b,c)
  %145 = fmul fast float %139, %72
  %146 = call float @dx.op.tertiary.f32(i32 46, float %140, float %75, float %145)  ; FMad(a,b,c)
  %147 = call float @dx.op.tertiary.f32(i32 46, float %141, float %78, float %146)  ; FMad(a,b,c)
  %148 = fmul fast float %139, %73
  %149 = call float @dx.op.tertiary.f32(i32 46, float %140, float %76, float %148)  ; FMad(a,b,c)
  %150 = call float @dx.op.tertiary.f32(i32 46, float %141, float %79, float %149)  ; FMad(a,b,c)
  %151 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %38, i32 %70, i32 12, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %152 = extractvalue %dx.types.ResRet.f32 %151, 0
  %153 = extractvalue %dx.types.ResRet.f32 %151, 1
  %154 = extractvalue %dx.types.ResRet.f32 %151, 2
  %155 = fmul fast float %152, %71
  %156 = call float @dx.op.tertiary.f32(i32 46, float %153, float %74, float %155)  ; FMad(a,b,c)
  %157 = call float @dx.op.tertiary.f32(i32 46, float %154, float %77, float %156)  ; FMad(a,b,c)
  %158 = fmul fast float %152, %72
  %159 = call float @dx.op.tertiary.f32(i32 46, float %153, float %75, float %158)  ; FMad(a,b,c)
  %160 = call float @dx.op.tertiary.f32(i32 46, float %154, float %78, float %159)  ; FMad(a,b,c)
  %161 = fmul fast float %152, %73
  %162 = call float @dx.op.tertiary.f32(i32 46, float %153, float %76, float %161)  ; FMad(a,b,c)
  %163 = call float @dx.op.tertiary.f32(i32 46, float %154, float %79, float %162)  ; FMad(a,b,c)
  %164 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %9, i32 %12, i32 76, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %165 = extractvalue %dx.types.ResRet.f32 %164, 0
  %166 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %38, i32 %68, i32 24, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %167 = extractvalue %dx.types.ResRet.f32 %166, 0
  %168 = extractvalue %dx.types.ResRet.f32 %166, 1
  %169 = fmul fast float %167, %165
  %170 = fmul fast float %168, %165
  %171 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %38, i32 %69, i32 24, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %172 = extractvalue %dx.types.ResRet.f32 %171, 0
  %173 = extractvalue %dx.types.ResRet.f32 %171, 1
  %174 = fmul fast float %172, %165
  %175 = fmul fast float %173, %165
  %176 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %38, i32 %70, i32 24, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %177 = extractvalue %dx.types.ResRet.f32 %176, 0
  %178 = extractvalue %dx.types.ResRet.f32 %176, 1
  %179 = fmul fast float %177, %165
  %180 = fmul fast float %178, %165
  %181 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %38, i32 %68, i32 32, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %182 = extractvalue %dx.types.ResRet.f32 %181, 0
  %183 = extractvalue %dx.types.ResRet.f32 %181, 1
  %184 = extractvalue %dx.types.ResRet.f32 %181, 2
  %185 = fmul fast float %182, %71
  %186 = call float @dx.op.tertiary.f32(i32 46, float %183, float %74, float %185)  ; FMad(a,b,c)
  %187 = call float @dx.op.tertiary.f32(i32 46, float %184, float %77, float %186)  ; FMad(a,b,c)
  %188 = fmul fast float %182, %72
  %189 = call float @dx.op.tertiary.f32(i32 46, float %183, float %75, float %188)  ; FMad(a,b,c)
  %190 = call float @dx.op.tertiary.f32(i32 46, float %184, float %78, float %189)  ; FMad(a,b,c)
  %191 = fmul fast float %182, %73
  %192 = call float @dx.op.tertiary.f32(i32 46, float %183, float %76, float %191)  ; FMad(a,b,c)
  %193 = call float @dx.op.tertiary.f32(i32 46, float %184, float %79, float %192)  ; FMad(a,b,c)
  %194 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %38, i32 %69, i32 32, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %195 = extractvalue %dx.types.ResRet.f32 %194, 0
  %196 = extractvalue %dx.types.ResRet.f32 %194, 1
  %197 = extractvalue %dx.types.ResRet.f32 %194, 2
  %198 = fmul fast float %195, %71
  %199 = call float @dx.op.tertiary.f32(i32 46, float %196, float %74, float %198)  ; FMad(a,b,c)
  %200 = call float @dx.op.tertiary.f32(i32 46, float %197, float %77, float %199)  ; FMad(a,b,c)
  %201 = fmul fast float %195, %72
  %202 = call float @dx.op.tertiary.f32(i32 46, float %196, float %75, float %201)  ; FMad(a,b,c)
  %203 = call float @dx.op.tertiary.f32(i32 46, float %197, float %78, float %202)  ; FMad(a,b,c)
  %204 = fmul fast float %195, %73
  %205 = call float @dx.op.tertiary.f32(i32 46, float %196, float %76, float %204)  ; FMad(a,b,c)
  %206 = call float @dx.op.tertiary.f32(i32 46, float %197, float %79, float %205)  ; FMad(a,b,c)
  %207 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %38, i32 %70, i32 32, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %208 = extractvalue %dx.types.ResRet.f32 %207, 0
  %209 = extractvalue %dx.types.ResRet.f32 %207, 1
  %210 = extractvalue %dx.types.ResRet.f32 %207, 2
  %211 = fmul fast float %208, %71
  %212 = call float @dx.op.tertiary.f32(i32 46, float %209, float %74, float %211)  ; FMad(a,b,c)
  %213 = call float @dx.op.tertiary.f32(i32 46, float %210, float %77, float %212)  ; FMad(a,b,c)
  %214 = fmul fast float %208, %72
  %215 = call float @dx.op.tertiary.f32(i32 46, float %209, float %75, float %214)  ; FMad(a,b,c)
  %216 = call float @dx.op.tertiary.f32(i32 46, float %210, float %78, float %215)  ; FMad(a,b,c)
  %217 = fmul fast float %208, %73
  %218 = call float @dx.op.tertiary.f32(i32 46, float %209, float %76, float %217)  ; FMad(a,b,c)
  %219 = call float @dx.op.tertiary.f32(i32 46, float %210, float %79, float %218)  ; FMad(a,b,c)
  %220 = call float @dx.op.worldRayOrigin.f32(i32 147, i8 0)  ; WorldRayOrigin(col)
  %221 = call float @dx.op.worldRayOrigin.f32(i32 147, i8 1)  ; WorldRayOrigin(col)
  %222 = call float @dx.op.worldRayOrigin.f32(i32 147, i8 2)  ; WorldRayOrigin(col)
  %223 = call float @dx.op.rayTCurrent.f32(i32 154)  ; RayTCurrent()
  %224 = call float @dx.op.worldRayDirection.f32(i32 148, i8 0)  ; WorldRayDirection(col)
  %225 = call float @dx.op.worldRayDirection.f32(i32 148, i8 1)  ; WorldRayDirection(col)
  %226 = call float @dx.op.worldRayDirection.f32(i32 148, i8 2)  ; WorldRayDirection(col)
  %227 = fmul fast float %224, %223
  %228 = fmul fast float %225, %223
  %229 = fmul fast float %226, %223
  %230 = fadd fast float %227, %220
  %231 = fadd fast float %228, %221
  %232 = fadd fast float %229, %222
  %233 = getelementptr inbounds %struct.BuiltInTriangleIntersectionAttributes, %struct.BuiltInTriangleIntersectionAttributes* %attr, i32 0, i32 0
  %234 = load <2 x float>, <2 x float>* %233, align 4
  %235 = extractelement <2 x float> %234, i32 0
  %236 = fsub fast float %144, %131
  %237 = fsub fast float %147, %134
  %238 = fsub fast float %150, %137
  %239 = fmul fast float %235, %236
  %240 = fmul fast float %235, %237
  %241 = fmul fast float %235, %238
  %242 = fadd fast float %239, %131
  %243 = fadd fast float %240, %134
  %244 = fadd fast float %241, %137
  %245 = extractelement <2 x float> %234, i32 1
  %246 = fsub fast float %157, %131
  %247 = fsub fast float %160, %134
  %248 = fsub fast float %163, %137
  %249 = fmul fast float %245, %246
  %250 = fmul fast float %245, %247
  %251 = fmul fast float %245, %248
  %252 = fadd fast float %242, %249
  %253 = fadd fast float %243, %250
  %254 = fadd fast float %244, %251
  %255 = fsub fast float %172, %167
  %256 = fsub fast float %173, %168
  %257 = fmul fast float %235, %255
  %258 = fmul fast float %235, %256
  %259 = fsub fast float %177, %167
  %260 = fsub fast float %178, %168
  %261 = fmul fast float %245, %259
  %262 = fmul fast float %245, %260
  %263 = fadd fast float %261, %257
  %264 = fadd fast float %263, %167
  %265 = fmul fast float %165, %264
  %266 = fadd fast float %262, %258
  %267 = fadd fast float %266, %168
  %268 = fmul fast float %165, %267
  %269 = fsub fast float %200, %187
  %270 = fsub fast float %203, %190
  %271 = fsub fast float %206, %193
  %272 = fmul fast float %235, %269
  %273 = fmul fast float %235, %270
  %274 = fmul fast float %235, %271
  %275 = fadd fast float %272, %187
  %276 = fadd fast float %273, %190
  %277 = fadd fast float %274, %193
  %278 = fsub fast float %213, %187
  %279 = fsub fast float %216, %190
  %280 = fsub fast float %219, %193
  %281 = fmul fast float %245, %278
  %282 = fmul fast float %245, %279
  %283 = fmul fast float %245, %280
  %284 = fadd fast float %275, %281
  %285 = fadd fast float %276, %282
  %286 = fadd fast float %277, %283
  %287 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 20)  ; CBufferLoadLegacy(handle,regIndex)
  %288 = extractvalue %dx.types.CBufRet.f32 %287, 0
  %289 = extractvalue %dx.types.CBufRet.f32 %287, 1
  %290 = extractvalue %dx.types.CBufRet.f32 %287, 2
  %291 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 22)  ; CBufferLoadLegacy(handle,regIndex)
  %292 = extractvalue %dx.types.CBufRet.f32 %291, 0
  %293 = extractvalue %dx.types.CBufRet.f32 %291, 1
  %294 = extractvalue %dx.types.CBufRet.f32 %291, 2
  %295 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 21)  ; CBufferLoadLegacy(handle,regIndex)
  %296 = extractvalue %dx.types.CBufRet.f32 %295, 0
  %297 = extractvalue %dx.types.CBufRet.f32 %295, 1
  %298 = extractvalue %dx.types.CBufRet.f32 %295, 2
  %299 = getelementptr inbounds %struct.ColorPayload, %struct.ColorPayload* %payload, i32 0, i32 2, i32 0
  %300 = load <3 x float>, <3 x float>* %299, align 4
  %301 = extractelement <3 x float> %300, i32 0
  %302 = extractelement <3 x float> %300, i32 1
  %303 = extractelement <3 x float> %300, i32 2
  %304 = getelementptr inbounds %struct.ColorPayload, %struct.ColorPayload* %payload, i32 0, i32 2, i32 1
  %305 = load <3 x float>, <3 x float>* %304, align 4
  %306 = extractelement <3 x float> %305, i32 0
  %307 = extractelement <3 x float> %305, i32 1
  %308 = extractelement <3 x float> %305, i32 2
  %309 = getelementptr inbounds %struct.ColorPayload, %struct.ColorPayload* %payload, i32 0, i32 3, i32 0
  %310 = load <3 x float>, <3 x float>* %309, align 4
  %311 = extractelement <3 x float> %310, i32 0
  %312 = extractelement <3 x float> %310, i32 1
  %313 = extractelement <3 x float> %310, i32 2
  %314 = getelementptr inbounds %struct.ColorPayload, %struct.ColorPayload* %payload, i32 0, i32 3, i32 1
  %315 = load <3 x float>, <3 x float>* %314, align 4
  %316 = extractelement <3 x float> %315, i32 0
  %317 = extractelement <3 x float> %315, i32 1
  %318 = extractelement <3 x float> %315, i32 2
  %319 = fsub fast float %301, %230
  %320 = fsub fast float %302, %231
  %321 = fsub fast float %303, %232
  %322 = fsub fast float -0.000000e+00, %252
  %323 = fsub fast float -0.000000e+00, %253
  %324 = fsub fast float -0.000000e+00, %254
  %325 = call float @dx.op.dot3.f32(i32 55, float %322, float %323, float %324, float %319, float %320, float %321)  ; Dot3(ax,ay,az,bx,by,bz)
  %326 = extractelement <3 x float> %305, i64 0
  %327 = extractelement <3 x float> %305, i64 1
  %328 = extractelement <3 x float> %305, i64 2
  %329 = call float @dx.op.dot3.f32(i32 55, float %252, float %253, float %254, float %326, float %327, float %328)  ; Dot3(ax,ay,az,bx,by,bz)
  %330 = fdiv fast float %325, %329
  %331 = fmul fast float %330, %306
  %332 = fmul fast float %330, %307
  %333 = fmul fast float %330, %308
  %334 = fadd fast float %331, %301
  %335 = fadd fast float %332, %302
  %336 = fadd fast float %333, %303
  %337 = fsub fast float %311, %230
  %338 = fsub fast float %312, %231
  %339 = fsub fast float %313, %232
  %340 = call float @dx.op.dot3.f32(i32 55, float %322, float %323, float %324, float %337, float %338, float %339)  ; Dot3(ax,ay,az,bx,by,bz)
  %341 = extractelement <3 x float> %315, i64 0
  %342 = extractelement <3 x float> %315, i64 1
  %343 = extractelement <3 x float> %315, i64 2
  %344 = call float @dx.op.dot3.f32(i32 55, float %252, float %253, float %254, float %341, float %342, float %343)  ; Dot3(ax,ay,az,bx,by,bz)
  %345 = fdiv fast float %340, %344
  %346 = fmul fast float %345, %316
  %347 = fmul fast float %345, %317
  %348 = fmul fast float %345, %318
  %349 = fadd fast float %346, %311
  %350 = fadd fast float %347, %312
  %351 = fadd fast float %348, %313
  %352 = fsub fast float %105, %89
  %353 = fsub fast float %108, %93
  %354 = fsub fast float %111, %97
  %355 = fsub fast float %118, %89
  %356 = fsub fast float %121, %93
  %357 = fsub fast float %124, %97
  %358 = fsub fast float %334, %90
  %359 = fsub fast float %335, %94
  %360 = fsub fast float %336, %98
  %361 = call float @dx.op.dot3.f32(i32 55, float %352, float %353, float %354, float %352, float %353, float %354)  ; Dot3(ax,ay,az,bx,by,bz)
  %362 = call float @dx.op.dot3.f32(i32 55, float %352, float %353, float %354, float %355, float %356, float %357)  ; Dot3(ax,ay,az,bx,by,bz)
  %363 = call float @dx.op.dot3.f32(i32 55, float %355, float %356, float %357, float %355, float %356, float %357)  ; Dot3(ax,ay,az,bx,by,bz)
  %364 = call float @dx.op.dot3.f32(i32 55, float %358, float %359, float %360, float %352, float %353, float %354)  ; Dot3(ax,ay,az,bx,by,bz)
  %365 = call float @dx.op.dot3.f32(i32 55, float %358, float %359, float %360, float %355, float %356, float %357)  ; Dot3(ax,ay,az,bx,by,bz)
  %366 = fmul fast float %363, %361
  %367 = fmul fast float %362, %362
  %368 = fsub fast float %366, %367
  %369 = fdiv fast float 1.000000e+00, %368
  %370 = fmul fast float %364, %363
  %371 = fmul fast float %365, %362
  %372 = fsub fast float %370, %371
  %373 = fmul fast float %372, %369
  %374 = fmul fast float %365, %361
  %375 = fmul fast float %364, %362
  %376 = fsub fast float %374, %375
  %377 = fmul fast float %376, %369
  %378 = fsub fast float 1.000000e+00, %373
  %379 = fsub fast float %378, %377
  %380 = fsub fast float %349, %90
  %381 = fsub fast float %350, %94
  %382 = fsub fast float %351, %98
  %383 = call float @dx.op.dot3.f32(i32 55, float %380, float %381, float %382, float %352, float %353, float %354)  ; Dot3(ax,ay,az,bx,by,bz)
  %384 = call float @dx.op.dot3.f32(i32 55, float %380, float %381, float %382, float %355, float %356, float %357)  ; Dot3(ax,ay,az,bx,by,bz)
  %385 = fmul fast float %383, %363
  %386 = fmul fast float %384, %362
  %387 = fsub fast float %385, %386
  %388 = fmul fast float %387, %369
  %389 = fmul fast float %384, %361
  %390 = fmul fast float %383, %362
  %391 = fsub fast float %389, %390
  %392 = fmul fast float %391, %369
  %393 = fsub fast float 1.000000e+00, %388
  %394 = fsub fast float %393, %392
  %395 = fmul fast float %379, %169
  %396 = call float @dx.op.tertiary.f32(i32 46, float %373, float %174, float %395)  ; FMad(a,b,c)
  %397 = call float @dx.op.tertiary.f32(i32 46, float %377, float %179, float %396)  ; FMad(a,b,c)
  %398 = fmul fast float %379, %170
  %399 = call float @dx.op.tertiary.f32(i32 46, float %373, float %175, float %398)  ; FMad(a,b,c)
  %400 = call float @dx.op.tertiary.f32(i32 46, float %377, float %180, float %399)  ; FMad(a,b,c)
  %401 = fsub fast float %397, %265
  %402 = fsub fast float %400, %268
  %403 = fmul fast float %394, %169
  %404 = call float @dx.op.tertiary.f32(i32 46, float %388, float %174, float %403)  ; FMad(a,b,c)
  %405 = call float @dx.op.tertiary.f32(i32 46, float %392, float %179, float %404)  ; FMad(a,b,c)
  %406 = fmul fast float %394, %170
  %407 = call float @dx.op.tertiary.f32(i32 46, float %388, float %175, float %406)  ; FMad(a,b,c)
  %408 = call float @dx.op.tertiary.f32(i32 46, float %392, float %180, float %407)  ; FMad(a,b,c)
  %409 = fsub fast float %405, %265
  %410 = fsub fast float %408, %268
  %411 = call %dx.types.Handle @dx.op.createHandleForLib.dx.types.Handle(i32 160, %dx.types.Handle %1)  ; CreateHandleForLib(Resource)
  %412 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %411, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %413 = call %dx.types.ResRet.f32 @dx.op.sampleGrad.f32(i32 63, %dx.types.Handle %20, %dx.types.Handle %412, float %265, float %268, float undef, float undef, i32 0, i32 0, i32 undef, float %401, float %402, float undef, float %409, float %410, float undef, float undef)  ; SampleGrad(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,ddx0,ddx1,ddx2,ddy0,ddy1,ddy2,clamp)
  %414 = extractvalue %dx.types.ResRet.f32 %413, 0
  %415 = extractvalue %dx.types.ResRet.f32 %413, 1
  %416 = extractvalue %dx.types.ResRet.f32 %413, 2
  %417 = call %dx.types.ResRet.f32 @dx.op.sampleGrad.f32(i32 63, %dx.types.Handle %24, %dx.types.Handle %412, float %265, float %268, float undef, float undef, i32 0, i32 0, i32 undef, float %401, float %402, float undef, float %409, float %410, float undef, float undef)  ; SampleGrad(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,ddx0,ddx1,ddx2,ddy0,ddy1,ddy2,clamp)
  %418 = extractvalue %dx.types.ResRet.f32 %417, 0
  %419 = extractvalue %dx.types.ResRet.f32 %417, 1
  %420 = call %dx.types.ResRet.f32 @dx.op.sampleGrad.f32(i32 63, %dx.types.Handle %28, %dx.types.Handle %412, float %265, float %268, float undef, float undef, i32 0, i32 0, i32 undef, float %401, float %402, float undef, float %409, float %410, float undef, float undef)  ; SampleGrad(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,ddx0,ddx1,ddx2,ddy0,ddy1,ddy2,clamp)
  %421 = extractvalue %dx.types.ResRet.f32 %420, 0
  %422 = extractvalue %dx.types.ResRet.f32 %420, 1
  %423 = extractvalue %dx.types.ResRet.f32 %420, 2
  %424 = extractvalue %dx.types.ResRet.f32 %420, 3
  %425 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %9, i32 %12, i32 28, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %426 = extractvalue %dx.types.ResRet.f32 %425, 0
  %427 = extractvalue %dx.types.ResRet.f32 %425, 1
  %428 = extractvalue %dx.types.ResRet.f32 %425, 2
  %429 = fadd fast float %414, 0x3FAC28F5C0000000
  %430 = fadd fast float %415, 0x3FAC28F5C0000000
  %431 = fadd fast float %416, 0x3FAC28F5C0000000
  %432 = fmul fast float %429, 0x3FEE54EDE0000000
  %433 = fmul fast float %430, 0x3FEE54EDE0000000
  %434 = fmul fast float %431, 0x3FEE54EDE0000000
  %435 = call float @dx.op.unary.f32(i32 23, float %432)  ; Log(value)
  %436 = call float @dx.op.unary.f32(i32 23, float %433)  ; Log(value)
  %437 = call float @dx.op.unary.f32(i32 23, float %434)  ; Log(value)
  %438 = fmul fast float %435, 0x4003333340000000
  %439 = fmul fast float %436, 0x4003333340000000
  %440 = fmul fast float %437, 0x4003333340000000
  %441 = call float @dx.op.unary.f32(i32 21, float %438)  ; Exp(value)
  %442 = call float @dx.op.unary.f32(i32 21, float %439)  ; Exp(value)
  %443 = call float @dx.op.unary.f32(i32 21, float %440)  ; Exp(value)
  %444 = fmul fast float %414, 0x3FB3D07220000000
  %445 = fmul fast float %415, 0x3FB3D07220000000
  %446 = fmul fast float %416, 0x3FB3D07220000000
  %447 = fcmp fast olt float %414, 0x3FA4B5DCC0000000
  %448 = fcmp fast olt float %415, 0x3FA4B5DCC0000000
  %449 = fcmp fast olt float %416, 0x3FA4B5DCC0000000
  %450 = select i1 %447, float %444, float %441
  %451 = select i1 %448, float %445, float %442
  %452 = select i1 %449, float %446, float %443
  %453 = fsub fast float %288, %230
  %454 = fsub fast float %289, %231
  %455 = fsub fast float %290, %232
  %456 = call float @dx.op.dot3.f32(i32 55, float %453, float %454, float %455, float %453, float %454, float %455)  ; Dot3(ax,ay,az,bx,by,bz)
  %457 = call float @dx.op.unary.f32(i32 25, float %456)  ; Rsqrt(value)
  %458 = fmul fast float %457, %453
  %459 = fmul fast float %457, %454
  %460 = fmul fast float %457, %455
  %461 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 23)  ; CBufferLoadLegacy(handle,regIndex)
  %462 = extractvalue %dx.types.CBufRet.f32 %461, 0
  %463 = extractvalue %dx.types.CBufRet.f32 %461, 1
  %464 = extractvalue %dx.types.CBufRet.f32 %461, 2
  %465 = fsub fast float -0.000000e+00, %462
  %466 = fsub fast float -0.000000e+00, %463
  %467 = fsub fast float -0.000000e+00, %464
  %468 = fmul fast float %418, 2.000000e+00
  %469 = fmul fast float %419, 2.000000e+00
  %470 = fadd fast float %468, -1.000000e+00
  %471 = fadd fast float %469, -1.000000e+00
  %472 = call float @dx.op.dot2.f32(i32 54, float %470, float %471, float %470, float %471)  ; Dot2(ax,ay,bx,by)
  %473 = fsub fast float 1.000000e+00, %472
  %474 = call float @dx.op.unary.f32(i32 24, float %473)  ; Sqrt(value)
  %475 = call float @dx.op.dot3.f32(i32 55, float %284, float %285, float %286, float %252, float %253, float %254)  ; Dot3(ax,ay,az,bx,by,bz)
  %476 = fmul fast float %475, %252
  %477 = fmul fast float %475, %253
  %478 = fmul fast float %475, %254
  %479 = fsub fast float %284, %476
  %480 = fsub fast float %285, %477
  %481 = fsub fast float %286, %478
  %482 = fmul fast float %481, %253
  %483 = fmul fast float %480, %254
  %484 = fsub fast float %482, %483
  %485 = fmul fast float %479, %254
  %486 = fmul fast float %481, %252
  %487 = fsub fast float %485, %486
  %488 = fmul fast float %480, %252
  %489 = fmul fast float %479, %253
  %490 = fsub fast float %488, %489
  %491 = fmul fast float %479, %470
  %492 = call float @dx.op.tertiary.f32(i32 46, float %471, float %484, float %491)  ; FMad(a,b,c)
  %493 = call float @dx.op.tertiary.f32(i32 46, float %474, float %252, float %492)  ; FMad(a,b,c)
  %494 = fmul fast float %480, %470
  %495 = call float @dx.op.tertiary.f32(i32 46, float %471, float %487, float %494)  ; FMad(a,b,c)
  %496 = call float @dx.op.tertiary.f32(i32 46, float %474, float %253, float %495)  ; FMad(a,b,c)
  %497 = fmul fast float %481, %470
  %498 = call float @dx.op.tertiary.f32(i32 46, float %471, float %490, float %497)  ; FMad(a,b,c)
  %499 = call float @dx.op.tertiary.f32(i32 46, float %474, float %254, float %498)  ; FMad(a,b,c)
  %500 = call float @dx.op.dot3.f32(i32 55, float %493, float %496, float %499, float %493, float %496, float %499)  ; Dot3(ax,ay,az,bx,by,bz)
  %501 = call float @dx.op.unary.f32(i32 25, float %500)  ; Rsqrt(value)
  %502 = fmul fast float %501, %493
  %503 = fmul fast float %501, %496
  %504 = fmul fast float %501, %499
  %505 = fcmp fast olt float %422, 5.000000e-01
  br i1 %505, label %506, label %580

; <label>:506                                     ; preds = %67
  %507 = insertelement <3 x float> undef, float %349, i32 0
  %508 = insertelement <3 x float> %507, float %350, i32 1
  %509 = insertelement <3 x float> %508, float %351, i32 2
  %510 = insertelement <3 x float> undef, float %334, i32 0
  %511 = insertelement <3 x float> %510, float %335, i32 1
  %512 = insertelement <3 x float> %511, float %336, i32 2
  %513 = call float @dx.op.dot3.f32(i32 55, float %224, float %225, float %226, float %502, float %503, float %504)  ; Dot3(ax,ay,az,bx,by,bz)
  %514 = fmul fast float %513, 2.000000e+00
  %515 = fmul fast float %514, %502
  %516 = fmul fast float %514, %503
  %517 = fmul fast float %514, %504
  %518 = fsub fast float %224, %515
  %519 = fsub fast float %225, %516
  %520 = fsub fast float %226, %517
  %521 = insertelement <3 x float> undef, float %518, i32 0
  %522 = insertelement <3 x float> %521, float %519, i32 1
  %523 = insertelement <3 x float> %522, float %520, i32 2
  %524 = fmul fast float %252, 2.560000e+02
  %525 = fmul fast float %253, 2.560000e+02
  %526 = fmul fast float %254, 2.560000e+02
  %527 = fptosi float %524 to i32
  %528 = fptosi float %525 to i32
  %529 = fptosi float %526 to i32
  store <3 x float> %512, <3 x float>* %299, align 4
  store <3 x float> %523, <3 x float>* %304, align 4
  store <3 x float> %509, <3 x float>* %309, align 4
  store <3 x float> %523, <3 x float>* %314, align 4
  %530 = getelementptr inbounds %struct.ColorPayload, %struct.ColorPayload* %payload, i32 0, i32 1
  %531 = load i32, i32* %530, align 4, !tbaa !34, !alias.scope !42
  %532 = icmp ugt i32 %531, 1
  %533 = getelementptr inbounds %struct.ColorPayload, %struct.ColorPayload* %payload, i32 0, i32 0
  br i1 %532, label %534, label %535

; <label>:534                                     ; preds = %506
  store <3 x float> zeroinitializer, <3 x float>* %533, align 4, !tbaa !31, !alias.scope !42
  br label %575

; <label>:535                                     ; preds = %506
  %536 = call float @dx.op.unary.f32(i32 6, float %230)  ; FAbs(value)
  %537 = fcmp fast olt float %536, 3.125000e-02
  %538 = fmul fast float %252, 0x3EF0000000000000
  %539 = fadd fast float %538, %230
  %540 = bitcast float %230 to i32
  %541 = fcmp fast olt float %230, 0.000000e+00
  %542 = sub nsw i32 0, %527
  %543 = select i1 %541, i32 %542, i32 %527
  %544 = add nsw i32 %543, %540
  %545 = bitcast i32 %544 to float
  %546 = select i1 %537, float %539, float %545
  %547 = call float @dx.op.unary.f32(i32 6, float %231)  ; FAbs(value)
  %548 = fcmp fast olt float %547, 3.125000e-02
  %549 = fmul fast float %253, 0x3EF0000000000000
  %550 = fadd fast float %549, %231
  %551 = bitcast float %231 to i32
  %552 = fcmp fast olt float %231, 0.000000e+00
  %553 = sub nsw i32 0, %528
  %554 = select i1 %552, i32 %553, i32 %528
  %555 = add nsw i32 %554, %551
  %556 = bitcast i32 %555 to float
  %557 = select i1 %548, float %550, float %556
  %558 = call float @dx.op.unary.f32(i32 6, float %232)  ; FAbs(value)
  %559 = fcmp fast olt float %558, 3.125000e-02
  %560 = fmul fast float %254, 0x3EF0000000000000
  %561 = fadd fast float %560, %232
  %562 = bitcast float %232 to i32
  %563 = fcmp fast olt float %232, 0.000000e+00
  %564 = sub nsw i32 0, %529
  %565 = select i1 %563, i32 %564, i32 %529
  %566 = add nsw i32 %565, %562
  %567 = bitcast i32 %566 to float
  %568 = select i1 %559, float %561, float %567
  %569 = add i32 %531, 1
  store i32 %569, i32* %530, align 4, !tbaa !34, !alias.scope !42
  %570 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %5, i32 24)  ; CBufferLoadLegacy(handle,regIndex)
  %571 = extractvalue %dx.types.CBufRet.i32 %570, 0
  %572 = call %dx.types.Handle @dx.op.createHandleFromHeap(i32 218, i32 %571, i1 false, i1 false)  ; CreateHandleFromHeap(index,samplerHeap,nonUniformIndex)
  %573 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %572, %dx.types.ResourceProperties { i32 16, i32 0 })  ; AnnotateHandle(res,props)  resource: RTAccelerationStructure
  call void @dx.op.traceRay.struct.ColorPayload(i32 157, %dx.types.Handle %573, i32 0, i32 255, i32 0, i32 0, i32 0, float %546, float %557, float %568, float 0.000000e+00, float %518, float %519, float %520, float 5.000000e+03, %struct.ColorPayload* %payload)  ; TraceRay(AccelerationStructure,RayFlags,InstanceInclusionMask,RayContributionToHitGroupIndex,MultiplierForGeometryContributionToShaderIndex,MissShaderIndex,Origin_X,Origin_Y,Origin_Z,TMin,Direction_X,Direction_Y,Direction_Z,TMax,payload)
  %574 = load <3 x float>, <3 x float>* %533, align 4, !tbaa !31
  br label %575

; <label>:575                                     ; preds = %535, %534
  %576 = phi <3 x float> [ zeroinitializer, %534 ], [ %574, %535 ]
  %577 = extractelement <3 x float> %576, i32 0
  %578 = extractelement <3 x float> %576, i32 1
  %579 = extractelement <3 x float> %576, i32 2
  br label %580

; <label>:580                                     ; preds = %575, %67
  %581 = phi float [ %577, %575 ], [ 0.000000e+00, %67 ]
  %582 = phi float [ %578, %575 ], [ 0.000000e+00, %67 ]
  %583 = phi float [ %579, %575 ], [ 0.000000e+00, %67 ]
  %584 = call i32 @dx.op.dispatchRaysIndex.i32(i32 145, i8 0)  ; DispatchRaysIndex(col)
  %585 = call i32 @dx.op.dispatchRaysIndex.i32(i32 145, i8 1)  ; DispatchRaysIndex(col)
  %586 = call i32 @dx.op.dispatchRaysDimensions.i32(i32 146, i8 0)  ; DispatchRaysDimensions(col)
  %587 = call i32 @dx.op.dispatchRaysDimensions.i32(i32 146, i8 1)  ; DispatchRaysDimensions(col)
  %588 = uitofp i32 %584 to float
  %589 = uitofp i32 %586 to float
  %590 = fdiv fast float %588, %589
  %591 = uitofp i32 %585 to float
  %592 = uitofp i32 %587 to float
  %593 = fdiv fast float %591, %592
  %594 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %15, i32 %16, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %595 = extractvalue %dx.types.ResRet.f32 %594, 0
  %596 = extractvalue %dx.types.ResRet.f32 %594, 1
  %597 = extractvalue %dx.types.ResRet.f32 %594, 2
  %598 = extractvalue %dx.types.ResRet.f32 %594, 3
  %599 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %15, i32 %16, i32 16, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %600 = extractvalue %dx.types.ResRet.f32 %599, 0
  %601 = extractvalue %dx.types.ResRet.f32 %599, 1
  %602 = extractvalue %dx.types.ResRet.f32 %599, 2
  %603 = extractvalue %dx.types.ResRet.f32 %599, 3
  %604 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %15, i32 %16, i32 32, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %605 = extractvalue %dx.types.ResRet.f32 %604, 0
  %606 = extractvalue %dx.types.ResRet.f32 %604, 1
  %607 = extractvalue %dx.types.ResRet.f32 %604, 2
  %608 = extractvalue %dx.types.ResRet.f32 %604, 3
  %609 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %15, i32 %16, i32 48, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %610 = extractvalue %dx.types.ResRet.f32 %609, 0
  %611 = extractvalue %dx.types.ResRet.f32 %609, 1
  %612 = extractvalue %dx.types.ResRet.f32 %609, 2
  %613 = extractvalue %dx.types.ResRet.f32 %609, 3
  %614 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 16)  ; CBufferLoadLegacy(handle,regIndex)
  %615 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 17)  ; CBufferLoadLegacy(handle,regIndex)
  %616 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 19)  ; CBufferLoadLegacy(handle,regIndex)
  %617 = extractvalue %dx.types.CBufRet.f32 %616, 0
  %618 = extractvalue %dx.types.CBufRet.f32 %616, 1
  %619 = extractvalue %dx.types.CBufRet.f32 %616, 2
  %620 = extractvalue %dx.types.CBufRet.f32 %616, 3
  %621 = call float @dx.op.worldToObject.f32(i32 152, i32 0, i8 0)  ; WorldToObject(row,col)
  %622 = call float @dx.op.worldToObject.f32(i32 152, i32 1, i8 0)  ; WorldToObject(row,col)
  %623 = call float @dx.op.worldToObject.f32(i32 152, i32 2, i8 0)  ; WorldToObject(row,col)
  %624 = call float @dx.op.worldToObject.f32(i32 152, i32 0, i8 1)  ; WorldToObject(row,col)
  %625 = call float @dx.op.worldToObject.f32(i32 152, i32 1, i8 1)  ; WorldToObject(row,col)
  %626 = call float @dx.op.worldToObject.f32(i32 152, i32 2, i8 1)  ; WorldToObject(row,col)
  %627 = call float @dx.op.worldToObject.f32(i32 152, i32 0, i8 2)  ; WorldToObject(row,col)
  %628 = call float @dx.op.worldToObject.f32(i32 152, i32 1, i8 2)  ; WorldToObject(row,col)
  %629 = call float @dx.op.worldToObject.f32(i32 152, i32 2, i8 2)  ; WorldToObject(row,col)
  %630 = call float @dx.op.worldToObject.f32(i32 152, i32 0, i8 3)  ; WorldToObject(row,col)
  %631 = call float @dx.op.worldToObject.f32(i32 152, i32 1, i8 3)  ; WorldToObject(row,col)
  %632 = call float @dx.op.worldToObject.f32(i32 152, i32 2, i8 3)  ; WorldToObject(row,col)
  %633 = fmul fast float %621, %230
  %634 = call float @dx.op.tertiary.f32(i32 46, float %231, float %624, float %633)  ; FMad(a,b,c)
  %635 = call float @dx.op.tertiary.f32(i32 46, float %232, float %627, float %634)  ; FMad(a,b,c)
  %636 = fadd fast float %635, %630
  %637 = fmul fast float %622, %230
  %638 = call float @dx.op.tertiary.f32(i32 46, float %231, float %625, float %637)  ; FMad(a,b,c)
  %639 = call float @dx.op.tertiary.f32(i32 46, float %232, float %628, float %638)  ; FMad(a,b,c)
  %640 = fadd fast float %639, %631
  %641 = fmul fast float %623, %230
  %642 = call float @dx.op.tertiary.f32(i32 46, float %231, float %626, float %641)  ; FMad(a,b,c)
  %643 = call float @dx.op.tertiary.f32(i32 46, float %232, float %629, float %642)  ; FMad(a,b,c)
  %644 = fadd fast float %643, %632
  %645 = fmul fast float %636, %595
  %646 = call float @dx.op.tertiary.f32(i32 46, float %640, float %596, float %645)  ; FMad(a,b,c)
  %647 = call float @dx.op.tertiary.f32(i32 46, float %644, float %597, float %646)  ; FMad(a,b,c)
  %648 = fadd fast float %647, %598
  %649 = fmul fast float %636, %600
  %650 = call float @dx.op.tertiary.f32(i32 46, float %640, float %601, float %649)  ; FMad(a,b,c)
  %651 = call float @dx.op.tertiary.f32(i32 46, float %644, float %602, float %650)  ; FMad(a,b,c)
  %652 = fadd fast float %651, %603
  %653 = fmul fast float %636, %605
  %654 = call float @dx.op.tertiary.f32(i32 46, float %640, float %606, float %653)  ; FMad(a,b,c)
  %655 = call float @dx.op.tertiary.f32(i32 46, float %644, float %607, float %654)  ; FMad(a,b,c)
  %656 = fadd fast float %655, %608
  %657 = fmul fast float %636, %610
  %658 = call float @dx.op.tertiary.f32(i32 46, float %640, float %611, float %657)  ; FMad(a,b,c)
  %659 = call float @dx.op.tertiary.f32(i32 46, float %644, float %612, float %658)  ; FMad(a,b,c)
  %660 = fadd fast float %659, %613
  %661 = fmul fast float %648, %617
  %662 = call float @dx.op.tertiary.f32(i32 46, float %652, float %618, float %661)  ; FMad(a,b,c)
  %663 = call float @dx.op.tertiary.f32(i32 46, float %656, float %619, float %662)  ; FMad(a,b,c)
  %664 = call float @dx.op.tertiary.f32(i32 46, float %660, float %620, float %663)  ; FMad(a,b,c)
  %665 = call %dx.types.Handle @dx.op.createHandleForLib.dx.types.Handle(i32 160, %dx.types.Handle %2)  ; CreateHandleForLib(Resource)
  %666 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %665, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %667 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %30, %dx.types.Handle %666, float %590, float %593, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %668 = extractvalue %dx.types.ResRet.f32 %667, 0
  %669 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %32, %dx.types.Handle %666, float %590, float %593, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %670 = extractvalue %dx.types.ResRet.f32 %669, 0
  %671 = call float @dx.op.dot3.f32(i32 55, float %252, float %253, float %254, float %502, float %503, float %504)  ; Dot3(ax,ay,az,bx,by,bz)
  %672 = call float @dx.op.unary.f32(i32 6, float %671)  ; FAbs(value)
  %673 = call float @dx.op.binary.f32(i32 36, float %672, float 1.000000e+00)  ; FMin(a,b)
  %674 = fmul fast float %673, %673
  %675 = fsub fast float 1.000000e+00, %674
  %676 = fdiv fast float %675, %674
  %677 = fmul fast float %676, 1.250000e-01
  %678 = call float @dx.op.unary.f32(i32 7, float %677)  ; Saturate(value)
  %679 = call float @dx.op.dot3.f32(i32 55, float %252, float %253, float %254, float %465, float %466, float %467)  ; Dot3(ax,ay,az,bx,by,bz)
  %680 = call float @dx.op.unary.f32(i32 6, float %679)  ; FAbs(value)
  %681 = call float @dx.op.binary.f32(i32 35, float %680, float 0x3EB0C6F7A0000000)  ; FMax(a,b)
  %682 = fmul fast float %681, %681
  %683 = fsub fast float 1.000000e+00, %682
  %684 = fdiv fast float %683, %682
  %685 = fmul fast float %684, %678
  %686 = fadd fast float %685, 1.000000e+00
  %687 = call float @dx.op.unary.f32(i32 24, float %686)  ; Sqrt(value)
  %688 = fadd fast float %687, 1.000000e+00
  %689 = fdiv fast float 2.000000e+00, %688
  %690 = call float @dx.op.dot3.f32(i32 55, float %502, float %503, float %504, float %458, float %459, float %460)  ; Dot3(ax,ay,az,bx,by,bz)
  %691 = call float @dx.op.unary.f32(i32 7, float %690)  ; Saturate(value)
  %692 = fmul fast float %422, %422
  %693 = fmul fast float %450, %423
  %694 = fmul fast float %451, %423
  %695 = fmul fast float %452, %423
  %696 = fsub fast float %450, %693
  %697 = fsub fast float %451, %694
  %698 = fsub fast float %452, %695
  %699 = fmul fast float %696, %421
  %700 = fmul fast float %697, %421
  %701 = fmul fast float %698, %421
  %702 = fadd fast float %450, 0xBFA47AE140000000
  %703 = fadd fast float %451, 0xBFA47AE140000000
  %704 = fadd fast float %452, 0xBFA47AE140000000
  %705 = fmul fast float %702, %423
  %706 = fmul fast float %703, %423
  %707 = fmul fast float %704, %423
  %708 = fadd fast float %705, 0x3FA47AE140000000
  %709 = fadd fast float %706, 0x3FA47AE140000000
  %710 = fadd fast float %707, 0x3FA47AE140000000
  %711 = fmul fast float %708, %421
  %712 = fmul fast float %709, %421
  %713 = fmul fast float %710, %421
  %714 = fsub fast float %458, %462
  %715 = fsub fast float %459, %463
  %716 = fsub fast float %460, %464
  %717 = call float @dx.op.dot3.f32(i32 55, float %714, float %715, float %716, float %714, float %715, float %716)  ; Dot3(ax,ay,az,bx,by,bz)
  %718 = call float @dx.op.unary.f32(i32 25, float %717)  ; Rsqrt(value)
  %719 = fmul fast float %718, %714
  %720 = fmul fast float %718, %715
  %721 = fmul fast float %718, %716
  %722 = call float @dx.op.dot3.f32(i32 55, float %502, float %503, float %504, float %465, float %466, float %467)  ; Dot3(ax,ay,az,bx,by,bz)
  %723 = call float @dx.op.unary.f32(i32 7, float %722)  ; Saturate(value)
  %724 = call float @dx.op.dot3.f32(i32 55, float %465, float %466, float %467, float %719, float %720, float %721)  ; Dot3(ax,ay,az,bx,by,bz)
  %725 = call float @dx.op.unary.f32(i32 7, float %724)  ; Saturate(value)
  %726 = call float @dx.op.dot3.f32(i32 55, float %502, float %503, float %504, float %719, float %720, float %721)  ; Dot3(ax,ay,az,bx,by,bz)
  %727 = call float @dx.op.unary.f32(i32 7, float %726)  ; Saturate(value)
  %728 = fmul fast float %422, 2.000000e+00
  %729 = fmul fast float %725, %725
  %730 = fmul fast float %729, %728
  %731 = fadd fast float %730, -5.000000e-01
  %732 = fsub fast float 1.000000e+00, %723
  %733 = call float @dx.op.unary.f32(i32 23, float %732)  ; Log(value)
  %734 = fmul fast float %733, 5.000000e+00
  %735 = call float @dx.op.unary.f32(i32 21, float %734)  ; Exp(value)
  %736 = fmul fast float %735, %731
  %737 = fadd fast float %736, 1.000000e+00
  %738 = fsub fast float 1.000000e+00, %691
  %739 = call float @dx.op.unary.f32(i32 23, float %738)  ; Log(value)
  %740 = fmul fast float %739, 5.000000e+00
  %741 = call float @dx.op.unary.f32(i32 21, float %740)  ; Exp(value)
  %742 = fmul fast float %741, %731
  %743 = fadd fast float %742, 1.000000e+00
  %744 = fmul fast float %743, %737
  %745 = fmul fast float %692, %692
  %746 = fadd fast float %745, -1.000000e+00
  %747 = fmul fast float %727, %727
  %748 = fmul fast float %747, %746
  %749 = fadd fast float %748, 1.000000e+00
  %750 = fmul fast float %749, %749
  %751 = fmul fast float %750, 0x400921FB60000000
  %752 = call float @dx.op.binary.f32(i32 35, float 0x3EB0C6F7A0000000, float %751)  ; FMax(a,b)
  %753 = fdiv fast float %745, %752
  %754 = fsub fast float 1.000000e+00, %725
  %755 = call float @dx.op.unary.f32(i32 23, float %754)  ; Log(value)
  %756 = fmul fast float %755, 5.000000e+00
  %757 = call float @dx.op.unary.f32(i32 21, float %756)  ; Exp(value)
  %758 = fsub fast float 1.000000e+00, %729
  %759 = fmul fast float %745, 2.500000e-01
  %760 = fmul fast float %759, %758
  %761 = fadd fast float %760, %729
  %762 = fdiv fast float 1.000000e+00, %761
  %763 = fmul fast float %744, %701
  %764 = fsub fast float 1.000000e+00, %713
  %765 = fmul fast float %757, %764
  %766 = fadd fast float %765, %713
  %767 = fmul fast float %753, %424
  %768 = fmul fast float %767, %762
  %769 = fmul fast float %768, %766
  %770 = fadd fast float %769, %763
  %771 = fmul fast float %689, %298
  %772 = fmul fast float %771, %723
  %773 = fmul fast float %772, %770
  %774 = fmul fast float %744, %700
  %775 = fsub fast float 1.000000e+00, %712
  %776 = fmul fast float %757, %775
  %777 = fadd fast float %776, %712
  %778 = fmul fast float %768, %777
  %779 = fadd fast float %778, %774
  %780 = fmul fast float %689, %297
  %781 = fmul fast float %780, %723
  %782 = fmul fast float %781, %779
  %783 = fmul fast float %744, %699
  %784 = fsub fast float 1.000000e+00, %711
  %785 = fmul fast float %757, %784
  %786 = fadd fast float %785, %711
  %787 = fmul fast float %768, %786
  %788 = fadd fast float %787, %783
  %789 = fmul fast float %689, %296
  %790 = fmul fast float %789, %723
  %791 = fmul fast float %790, %788
  %792 = fmul fast float %699, %292
  %793 = fmul fast float %792, %668
  %794 = fmul fast float %700, %293
  %795 = fmul fast float %794, %668
  %796 = fmul fast float %701, %294
  %797 = fmul fast float %796, %668
  %798 = fmul fast float %581, %711
  %799 = fmul fast float %582, %712
  %800 = fmul fast float %583, %713
  %801 = fadd fast float %791, %798
  %802 = fmul fast float %801, %670
  %803 = fadd fast float %793, %426
  %804 = fadd fast float %803, %802
  %805 = fadd fast float %782, %799
  %806 = fmul fast float %805, %670
  %807 = fadd fast float %795, %427
  %808 = fadd fast float %807, %806
  %809 = fadd fast float %773, %800
  %810 = fmul fast float %809, %670
  %811 = fadd fast float %797, %428
  %812 = fadd fast float %811, %810
  %813 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %5, i32 24)  ; CBufferLoadLegacy(handle,regIndex)
  %814 = extractvalue %dx.types.CBufRet.i32 %813, 3
  %815 = icmp eq i32 %814, 0
  br i1 %815, label %820, label %816

; <label>:816                                     ; preds = %580
  %817 = insertelement <3 x float> undef, float %804, i32 0
  %818 = insertelement <3 x float> %817, float %808, i32 1
  %819 = insertelement <3 x float> %818, float %812, i32 2
  br label %855

; <label>:820                                     ; preds = %580
  %821 = extractvalue %dx.types.CBufRet.f32 %615, 3
  %822 = extractvalue %dx.types.CBufRet.f32 %615, 2
  %823 = extractvalue %dx.types.CBufRet.f32 %615, 1
  %824 = extractvalue %dx.types.CBufRet.f32 %615, 0
  %825 = fmul fast float %648, %824
  %826 = call float @dx.op.tertiary.f32(i32 46, float %652, float %823, float %825)  ; FMad(a,b,c)
  %827 = call float @dx.op.tertiary.f32(i32 46, float %656, float %822, float %826)  ; FMad(a,b,c)
  %828 = call float @dx.op.tertiary.f32(i32 46, float %660, float %821, float %827)  ; FMad(a,b,c)
  %829 = fdiv fast float %828, %664
  %830 = extractvalue %dx.types.CBufRet.f32 %614, 3
  %831 = extractvalue %dx.types.CBufRet.f32 %614, 2
  %832 = extractvalue %dx.types.CBufRet.f32 %614, 1
  %833 = extractvalue %dx.types.CBufRet.f32 %614, 0
  %834 = fmul fast float %648, %833
  %835 = call float @dx.op.tertiary.f32(i32 46, float %652, float %832, float %834)  ; FMad(a,b,c)
  %836 = call float @dx.op.tertiary.f32(i32 46, float %656, float %831, float %835)  ; FMad(a,b,c)
  %837 = call float @dx.op.tertiary.f32(i32 46, float %660, float %830, float %836)  ; FMad(a,b,c)
  %838 = fdiv fast float %837, %664
  %839 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %34, %dx.types.Handle %666, float %838, float %829, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %840 = extractvalue %dx.types.ResRet.f32 %839, 0
  %841 = extractvalue %dx.types.ResRet.f32 %839, 1
  %842 = extractvalue %dx.types.ResRet.f32 %839, 2
  %843 = fsub fast float %840, %804
  %844 = fsub fast float %841, %808
  %845 = fsub fast float %842, %812
  %846 = fmul fast float %843, 5.000000e-01
  %847 = fmul fast float %844, 5.000000e-01
  %848 = fmul fast float %845, 5.000000e-01
  %849 = fadd fast float %846, %804
  %850 = fadd fast float %847, %808
  %851 = fadd fast float %848, %812
  %852 = insertelement <3 x float> undef, float %849, i32 0
  %853 = insertelement <3 x float> %852, float %850, i32 1
  %854 = insertelement <3 x float> %853, float %851, i32 2
  br label %855

; <label>:855                                     ; preds = %820, %816
  %856 = phi <3 x float> [ %854, %820 ], [ %819, %816 ]
  %857 = getelementptr inbounds %struct.ColorPayload, %struct.ColorPayload* %payload, i32 0, i32 0
  store <3 x float> %856, <3 x float>* %857, align 4
  ret void
}

; Function Attrs: nounwind
define void @"\01?AnyHitShader@@YAXUColorPayload@@UBuiltInTriangleIntersectionAttributes@@@Z"(%struct.ColorPayload* noalias nocapture %payload, %struct.BuiltInTriangleIntersectionAttributes* nocapture readonly %attr) #0 {
  %1 = load %dx.types.Handle, %dx.types.Handle* @"\01?AnisoClamp@@3USamplerState@@A", align 4
  %2 = load %hostlayout.frameCB, %hostlayout.frameCB* @frameCB_legacy
  %3 = call %dx.types.Handle @dx.op.createHandleForLib.hostlayout.frameCB(i32 160, %hostlayout.frameCB %2)  ; CreateHandleForLib(Resource)
  %4 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 13, i32 400 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %5 = getelementptr inbounds %struct.ColorPayload, %struct.ColorPayload* %payload, i32 0, i32 0
  %6 = load <3 x float>, <3 x float>* %5, align 4
  %7 = getelementptr inbounds %struct.ColorPayload, %struct.ColorPayload* %payload, i32 0, i32 1
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.ColorPayload, %struct.ColorPayload* %payload, i32 0, i32 2, i32 0
  %10 = load <3 x float>, <3 x float>* %9, align 4
  %11 = extractelement <3 x float> %10, i32 0
  %12 = extractelement <3 x float> %10, i32 1
  %13 = extractelement <3 x float> %10, i32 2
  %14 = getelementptr inbounds %struct.ColorPayload, %struct.ColorPayload* %payload, i32 0, i32 2, i32 1
  %15 = load <3 x float>, <3 x float>* %14, align 4
  %16 = extractelement <3 x float> %15, i32 0
  %17 = extractelement <3 x float> %15, i32 1
  %18 = extractelement <3 x float> %15, i32 2
  %19 = getelementptr inbounds %struct.ColorPayload, %struct.ColorPayload* %payload, i32 0, i32 3, i32 0
  %20 = load <3 x float>, <3 x float>* %19, align 4
  %21 = extractelement <3 x float> %20, i32 0
  %22 = extractelement <3 x float> %20, i32 1
  %23 = extractelement <3 x float> %20, i32 2
  %24 = getelementptr inbounds %struct.ColorPayload, %struct.ColorPayload* %payload, i32 0, i32 3, i32 1
  %25 = load <3 x float>, <3 x float>* %24, align 4
  %26 = extractelement <3 x float> %25, i32 0
  %27 = extractelement <3 x float> %25, i32 1
  %28 = extractelement <3 x float> %25, i32 2
  %29 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %4, i32 24)  ; CBufferLoadLegacy(handle,regIndex)
  %30 = extractvalue %dx.types.CBufRet.i32 %29, 1
  %31 = call %dx.types.Handle @dx.op.createHandleFromHeap(i32 218, i32 %30, i1 false, i1 false)  ; CreateHandleFromHeap(index,samplerHeap,nonUniformIndex)
  %32 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %31, %dx.types.ResourceProperties { i32 524, i32 80 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=80>
  %33 = call i32 @dx.op.instanceID.i32(i32 141)  ; InstanceID()
  %34 = call i32 @dx.op.geometryIndex.i32(i32 213)  ; GeometryIndex()
  %35 = add i32 %34, %33
  %36 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %32, i32 %35, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %37 = extractvalue %dx.types.ResRet.i32 %36, 0
  %38 = call %dx.types.Handle @dx.op.createHandleFromHeap(i32 218, i32 %37, i1 false, i1 false)  ; CreateHandleFromHeap(index,samplerHeap,nonUniformIndex)
  %39 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %38, %dx.types.ResourceProperties { i32 524, i32 44 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=44>
  %40 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %32, i32 %35, i32 4, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %41 = extractvalue %dx.types.ResRet.i32 %40, 0
  %42 = call %dx.types.Handle @dx.op.createHandleFromHeap(i32 218, i32 %41, i1 false, i1 false)  ; CreateHandleFromHeap(index,samplerHeap,nonUniformIndex)
  %43 = call i32 @dx.op.primitiveIndex.i32(i32 161)  ; PrimitiveIndex()
  %44 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %32, i32 %35, i32 8, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %45 = extractvalue %dx.types.ResRet.i32 %44, 0
  %46 = icmp ne i32 %45, 0
  %47 = select i1 %46, i32 6, i32 12
  %48 = mul i32 %47, %43
  %49 = icmp eq i32 %45, 0
  %50 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %42, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  br i1 %49, label %63, label %51

; <label>:51                                      ; preds = %0
  %52 = and i32 %48, -4
  %53 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %50, i32 %52, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %54 = extractvalue %dx.types.ResRet.i32 %53, 0
  %55 = extractvalue %dx.types.ResRet.i32 %53, 1
  %56 = icmp eq i32 %52, %48
  %57 = lshr i32 %54, 16
  %58 = and i32 %55, 65535
  br i1 %56, label %59, label %61

; <label>:59                                      ; preds = %51
  %60 = and i32 %54, 65535
  br label %68

; <label>:61                                      ; preds = %51
  %62 = lshr i32 %55, 16
  br label %68

; <label>:63                                      ; preds = %0
  %64 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %50, i32 %48, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %65 = extractvalue %dx.types.ResRet.i32 %64, 0
  %66 = extractvalue %dx.types.ResRet.i32 %64, 1
  %67 = extractvalue %dx.types.ResRet.i32 %64, 2
  br label %68

; <label>:68                                      ; preds = %63, %61, %59
  %69 = phi i32 [ %65, %63 ], [ %60, %59 ], [ %57, %61 ]
  %70 = phi i32 [ %66, %63 ], [ %57, %59 ], [ %58, %61 ]
  %71 = phi i32 [ %67, %63 ], [ %58, %59 ], [ %62, %61 ]
  %72 = call float @dx.op.objectToWorld.f32(i32 151, i32 0, i8 0)  ; ObjectToWorld(row,col)
  %73 = call float @dx.op.objectToWorld.f32(i32 151, i32 1, i8 0)  ; ObjectToWorld(row,col)
  %74 = call float @dx.op.objectToWorld.f32(i32 151, i32 2, i8 0)  ; ObjectToWorld(row,col)
  %75 = call float @dx.op.objectToWorld.f32(i32 151, i32 0, i8 1)  ; ObjectToWorld(row,col)
  %76 = call float @dx.op.objectToWorld.f32(i32 151, i32 1, i8 1)  ; ObjectToWorld(row,col)
  %77 = call float @dx.op.objectToWorld.f32(i32 151, i32 2, i8 1)  ; ObjectToWorld(row,col)
  %78 = call float @dx.op.objectToWorld.f32(i32 151, i32 0, i8 2)  ; ObjectToWorld(row,col)
  %79 = call float @dx.op.objectToWorld.f32(i32 151, i32 1, i8 2)  ; ObjectToWorld(row,col)
  %80 = call float @dx.op.objectToWorld.f32(i32 151, i32 2, i8 2)  ; ObjectToWorld(row,col)
  %81 = call float @dx.op.objectToWorld.f32(i32 151, i32 0, i8 3)  ; ObjectToWorld(row,col)
  %82 = call float @dx.op.objectToWorld.f32(i32 151, i32 1, i8 3)  ; ObjectToWorld(row,col)
  %83 = call float @dx.op.objectToWorld.f32(i32 151, i32 2, i8 3)  ; ObjectToWorld(row,col)
  %84 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %39, i32 %69, i32 0, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %85 = extractvalue %dx.types.ResRet.f32 %84, 0
  %86 = extractvalue %dx.types.ResRet.f32 %84, 1
  %87 = extractvalue %dx.types.ResRet.f32 %84, 2
  %88 = fmul fast float %85, %72
  %89 = call float @dx.op.tertiary.f32(i32 46, float %86, float %75, float %88)  ; FMad(a,b,c)
  %90 = call float @dx.op.tertiary.f32(i32 46, float %87, float %78, float %89)  ; FMad(a,b,c)
  %91 = fadd fast float %90, %81
  %92 = fmul fast float %85, %73
  %93 = call float @dx.op.tertiary.f32(i32 46, float %86, float %76, float %92)  ; FMad(a,b,c)
  %94 = call float @dx.op.tertiary.f32(i32 46, float %87, float %79, float %93)  ; FMad(a,b,c)
  %95 = fadd fast float %94, %82
  %96 = fmul fast float %85, %74
  %97 = call float @dx.op.tertiary.f32(i32 46, float %86, float %77, float %96)  ; FMad(a,b,c)
  %98 = call float @dx.op.tertiary.f32(i32 46, float %87, float %80, float %97)  ; FMad(a,b,c)
  %99 = fadd fast float %98, %83
  %100 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %39, i32 %70, i32 0, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %101 = extractvalue %dx.types.ResRet.f32 %100, 0
  %102 = extractvalue %dx.types.ResRet.f32 %100, 1
  %103 = extractvalue %dx.types.ResRet.f32 %100, 2
  %104 = fmul fast float %101, %72
  %105 = call float @dx.op.tertiary.f32(i32 46, float %102, float %75, float %104)  ; FMad(a,b,c)
  %106 = call float @dx.op.tertiary.f32(i32 46, float %103, float %78, float %105)  ; FMad(a,b,c)
  %107 = fmul fast float %101, %73
  %108 = call float @dx.op.tertiary.f32(i32 46, float %102, float %76, float %107)  ; FMad(a,b,c)
  %109 = call float @dx.op.tertiary.f32(i32 46, float %103, float %79, float %108)  ; FMad(a,b,c)
  %110 = fmul fast float %101, %74
  %111 = call float @dx.op.tertiary.f32(i32 46, float %102, float %77, float %110)  ; FMad(a,b,c)
  %112 = call float @dx.op.tertiary.f32(i32 46, float %103, float %80, float %111)  ; FMad(a,b,c)
  %113 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %39, i32 %71, i32 0, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %114 = extractvalue %dx.types.ResRet.f32 %113, 0
  %115 = extractvalue %dx.types.ResRet.f32 %113, 1
  %116 = extractvalue %dx.types.ResRet.f32 %113, 2
  %117 = fmul fast float %114, %72
  %118 = call float @dx.op.tertiary.f32(i32 46, float %115, float %75, float %117)  ; FMad(a,b,c)
  %119 = call float @dx.op.tertiary.f32(i32 46, float %116, float %78, float %118)  ; FMad(a,b,c)
  %120 = fmul fast float %114, %73
  %121 = call float @dx.op.tertiary.f32(i32 46, float %115, float %76, float %120)  ; FMad(a,b,c)
  %122 = call float @dx.op.tertiary.f32(i32 46, float %116, float %79, float %121)  ; FMad(a,b,c)
  %123 = fmul fast float %114, %74
  %124 = call float @dx.op.tertiary.f32(i32 46, float %115, float %77, float %123)  ; FMad(a,b,c)
  %125 = call float @dx.op.tertiary.f32(i32 46, float %116, float %80, float %124)  ; FMad(a,b,c)
  %126 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %39, i32 %69, i32 12, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %127 = extractvalue %dx.types.ResRet.f32 %126, 0
  %128 = extractvalue %dx.types.ResRet.f32 %126, 1
  %129 = extractvalue %dx.types.ResRet.f32 %126, 2
  %130 = fmul fast float %127, %72
  %131 = call float @dx.op.tertiary.f32(i32 46, float %128, float %75, float %130)  ; FMad(a,b,c)
  %132 = call float @dx.op.tertiary.f32(i32 46, float %129, float %78, float %131)  ; FMad(a,b,c)
  %133 = fmul fast float %127, %73
  %134 = call float @dx.op.tertiary.f32(i32 46, float %128, float %76, float %133)  ; FMad(a,b,c)
  %135 = call float @dx.op.tertiary.f32(i32 46, float %129, float %79, float %134)  ; FMad(a,b,c)
  %136 = fmul fast float %127, %74
  %137 = call float @dx.op.tertiary.f32(i32 46, float %128, float %77, float %136)  ; FMad(a,b,c)
  %138 = call float @dx.op.tertiary.f32(i32 46, float %129, float %80, float %137)  ; FMad(a,b,c)
  %139 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %39, i32 %70, i32 12, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %140 = extractvalue %dx.types.ResRet.f32 %139, 0
  %141 = extractvalue %dx.types.ResRet.f32 %139, 1
  %142 = extractvalue %dx.types.ResRet.f32 %139, 2
  %143 = fmul fast float %140, %72
  %144 = call float @dx.op.tertiary.f32(i32 46, float %141, float %75, float %143)  ; FMad(a,b,c)
  %145 = call float @dx.op.tertiary.f32(i32 46, float %142, float %78, float %144)  ; FMad(a,b,c)
  %146 = fmul fast float %140, %73
  %147 = call float @dx.op.tertiary.f32(i32 46, float %141, float %76, float %146)  ; FMad(a,b,c)
  %148 = call float @dx.op.tertiary.f32(i32 46, float %142, float %79, float %147)  ; FMad(a,b,c)
  %149 = fmul fast float %140, %74
  %150 = call float @dx.op.tertiary.f32(i32 46, float %141, float %77, float %149)  ; FMad(a,b,c)
  %151 = call float @dx.op.tertiary.f32(i32 46, float %142, float %80, float %150)  ; FMad(a,b,c)
  %152 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %39, i32 %71, i32 12, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %153 = extractvalue %dx.types.ResRet.f32 %152, 0
  %154 = extractvalue %dx.types.ResRet.f32 %152, 1
  %155 = extractvalue %dx.types.ResRet.f32 %152, 2
  %156 = fmul fast float %153, %72
  %157 = call float @dx.op.tertiary.f32(i32 46, float %154, float %75, float %156)  ; FMad(a,b,c)
  %158 = call float @dx.op.tertiary.f32(i32 46, float %155, float %78, float %157)  ; FMad(a,b,c)
  %159 = fmul fast float %153, %73
  %160 = call float @dx.op.tertiary.f32(i32 46, float %154, float %76, float %159)  ; FMad(a,b,c)
  %161 = call float @dx.op.tertiary.f32(i32 46, float %155, float %79, float %160)  ; FMad(a,b,c)
  %162 = fmul fast float %153, %74
  %163 = call float @dx.op.tertiary.f32(i32 46, float %154, float %77, float %162)  ; FMad(a,b,c)
  %164 = call float @dx.op.tertiary.f32(i32 46, float %155, float %80, float %163)  ; FMad(a,b,c)
  %165 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %39, i32 %69, i32 24, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %166 = extractvalue %dx.types.ResRet.f32 %165, 0
  %167 = extractvalue %dx.types.ResRet.f32 %165, 1
  %168 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %39, i32 %70, i32 24, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %169 = extractvalue %dx.types.ResRet.f32 %168, 0
  %170 = extractvalue %dx.types.ResRet.f32 %168, 1
  %171 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %39, i32 %71, i32 24, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %172 = extractvalue %dx.types.ResRet.f32 %171, 0
  %173 = extractvalue %dx.types.ResRet.f32 %171, 1
  %174 = call float @dx.op.worldRayOrigin.f32(i32 147, i8 0)  ; WorldRayOrigin(col)
  %175 = call float @dx.op.worldRayOrigin.f32(i32 147, i8 1)  ; WorldRayOrigin(col)
  %176 = call float @dx.op.worldRayOrigin.f32(i32 147, i8 2)  ; WorldRayOrigin(col)
  %177 = call float @dx.op.rayTCurrent.f32(i32 154)  ; RayTCurrent()
  %178 = call float @dx.op.worldRayDirection.f32(i32 148, i8 0)  ; WorldRayDirection(col)
  %179 = call float @dx.op.worldRayDirection.f32(i32 148, i8 1)  ; WorldRayDirection(col)
  %180 = call float @dx.op.worldRayDirection.f32(i32 148, i8 2)  ; WorldRayDirection(col)
  %181 = fmul fast float %178, %177
  %182 = fmul fast float %179, %177
  %183 = fmul fast float %180, %177
  %184 = fadd fast float %181, %174
  %185 = fadd fast float %182, %175
  %186 = fadd fast float %183, %176
  %187 = getelementptr inbounds %struct.BuiltInTriangleIntersectionAttributes, %struct.BuiltInTriangleIntersectionAttributes* %attr, i32 0, i32 0
  %188 = load <2 x float>, <2 x float>* %187, align 4
  %189 = extractelement <2 x float> %188, i32 0
  %190 = fsub fast float %145, %132
  %191 = fsub fast float %148, %135
  %192 = fsub fast float %151, %138
  %193 = fmul fast float %189, %190
  %194 = fmul fast float %189, %191
  %195 = fmul fast float %189, %192
  %196 = fadd fast float %193, %132
  %197 = fadd fast float %194, %135
  %198 = fadd fast float %195, %138
  %199 = extractelement <2 x float> %188, i32 1
  %200 = fsub fast float %158, %132
  %201 = fsub fast float %161, %135
  %202 = fsub fast float %164, %138
  %203 = fmul fast float %199, %200
  %204 = fmul fast float %199, %201
  %205 = fmul fast float %199, %202
  %206 = fadd fast float %196, %203
  %207 = fadd fast float %197, %204
  %208 = fadd fast float %198, %205
  %209 = fsub fast float %169, %166
  %210 = fsub fast float %170, %167
  %211 = fmul fast float %189, %209
  %212 = fmul fast float %189, %210
  %213 = fadd fast float %211, %166
  %214 = fadd fast float %212, %167
  %215 = fsub fast float %172, %166
  %216 = fsub fast float %173, %167
  %217 = fmul fast float %199, %215
  %218 = fmul fast float %199, %216
  %219 = fadd fast float %213, %217
  %220 = fadd fast float %214, %218
  %221 = fsub fast float %11, %184
  %222 = fsub fast float %12, %185
  %223 = fsub fast float %13, %186
  %224 = fsub fast float -0.000000e+00, %206
  %225 = fsub fast float -0.000000e+00, %207
  %226 = fsub fast float -0.000000e+00, %208
  %227 = call float @dx.op.dot3.f32(i32 55, float %224, float %225, float %226, float %221, float %222, float %223)  ; Dot3(ax,ay,az,bx,by,bz)
  %228 = extractelement <3 x float> %15, i64 0
  %229 = extractelement <3 x float> %15, i64 1
  %230 = extractelement <3 x float> %15, i64 2
  %231 = call float @dx.op.dot3.f32(i32 55, float %206, float %207, float %208, float %228, float %229, float %230)  ; Dot3(ax,ay,az,bx,by,bz)
  %232 = fdiv fast float %227, %231
  %233 = fmul fast float %232, %16
  %234 = fmul fast float %232, %17
  %235 = fmul fast float %232, %18
  %236 = fsub fast float %21, %184
  %237 = fsub fast float %22, %185
  %238 = fsub fast float %23, %186
  %239 = call float @dx.op.dot3.f32(i32 55, float %224, float %225, float %226, float %236, float %237, float %238)  ; Dot3(ax,ay,az,bx,by,bz)
  %240 = extractelement <3 x float> %25, i64 0
  %241 = extractelement <3 x float> %25, i64 1
  %242 = extractelement <3 x float> %25, i64 2
  %243 = call float @dx.op.dot3.f32(i32 55, float %206, float %207, float %208, float %240, float %241, float %242)  ; Dot3(ax,ay,az,bx,by,bz)
  %244 = fdiv fast float %239, %243
  %245 = fmul fast float %244, %26
  %246 = fmul fast float %244, %27
  %247 = fmul fast float %244, %28
  %248 = fsub fast float %106, %90
  %249 = fsub fast float %109, %94
  %250 = fsub fast float %112, %98
  %251 = fsub fast float %119, %90
  %252 = fsub fast float %122, %94
  %253 = fsub fast float %125, %98
  %254 = fsub fast float %11, %91
  %255 = fadd fast float %254, %233
  %256 = fsub fast float %12, %95
  %257 = fadd fast float %256, %234
  %258 = fsub fast float %13, %99
  %259 = fadd fast float %258, %235
  %260 = call float @dx.op.dot3.f32(i32 55, float %248, float %249, float %250, float %248, float %249, float %250)  ; Dot3(ax,ay,az,bx,by,bz)
  %261 = call float @dx.op.dot3.f32(i32 55, float %248, float %249, float %250, float %251, float %252, float %253)  ; Dot3(ax,ay,az,bx,by,bz)
  %262 = call float @dx.op.dot3.f32(i32 55, float %251, float %252, float %253, float %251, float %252, float %253)  ; Dot3(ax,ay,az,bx,by,bz)
  %263 = call float @dx.op.dot3.f32(i32 55, float %255, float %257, float %259, float %248, float %249, float %250)  ; Dot3(ax,ay,az,bx,by,bz)
  %264 = call float @dx.op.dot3.f32(i32 55, float %255, float %257, float %259, float %251, float %252, float %253)  ; Dot3(ax,ay,az,bx,by,bz)
  %265 = fmul fast float %262, %260
  %266 = fmul fast float %261, %261
  %267 = fsub fast float %265, %266
  %268 = fdiv fast float 1.000000e+00, %267
  %269 = fmul fast float %263, %262
  %270 = fmul fast float %264, %261
  %271 = fsub fast float %269, %270
  %272 = fmul fast float %271, %268
  %273 = fmul fast float %264, %260
  %274 = fmul fast float %263, %261
  %275 = fsub fast float %273, %274
  %276 = fmul fast float %275, %268
  %277 = fsub fast float 1.000000e+00, %272
  %278 = fsub fast float %277, %276
  %279 = fsub fast float %21, %91
  %280 = fadd fast float %279, %245
  %281 = fsub fast float %22, %95
  %282 = fadd fast float %281, %246
  %283 = fsub fast float %23, %99
  %284 = fadd fast float %283, %247
  %285 = call float @dx.op.dot3.f32(i32 55, float %280, float %282, float %284, float %248, float %249, float %250)  ; Dot3(ax,ay,az,bx,by,bz)
  %286 = call float @dx.op.dot3.f32(i32 55, float %280, float %282, float %284, float %251, float %252, float %253)  ; Dot3(ax,ay,az,bx,by,bz)
  %287 = fmul fast float %285, %262
  %288 = fmul fast float %286, %261
  %289 = fsub fast float %287, %288
  %290 = fmul fast float %289, %268
  %291 = fmul fast float %286, %260
  %292 = fmul fast float %285, %261
  %293 = fsub fast float %291, %292
  %294 = fmul fast float %293, %268
  %295 = fsub fast float 1.000000e+00, %290
  %296 = fsub fast float %295, %294
  %297 = fmul fast float %278, %166
  %298 = call float @dx.op.tertiary.f32(i32 46, float %272, float %169, float %297)  ; FMad(a,b,c)
  %299 = call float @dx.op.tertiary.f32(i32 46, float %276, float %172, float %298)  ; FMad(a,b,c)
  %300 = fmul fast float %278, %167
  %301 = call float @dx.op.tertiary.f32(i32 46, float %272, float %170, float %300)  ; FMad(a,b,c)
  %302 = call float @dx.op.tertiary.f32(i32 46, float %276, float %173, float %301)  ; FMad(a,b,c)
  %303 = fsub fast float %299, %219
  %304 = fsub fast float %302, %220
  %305 = fmul fast float %296, %166
  %306 = call float @dx.op.tertiary.f32(i32 46, float %290, float %169, float %305)  ; FMad(a,b,c)
  %307 = call float @dx.op.tertiary.f32(i32 46, float %294, float %172, float %306)  ; FMad(a,b,c)
  %308 = fmul fast float %296, %167
  %309 = call float @dx.op.tertiary.f32(i32 46, float %290, float %170, float %308)  ; FMad(a,b,c)
  %310 = call float @dx.op.tertiary.f32(i32 46, float %294, float %173, float %309)  ; FMad(a,b,c)
  %311 = fsub fast float %307, %219
  %312 = fsub fast float %310, %220
  %313 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %32, i32 %35, i32 60, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %314 = extractvalue %dx.types.ResRet.i32 %313, 0
  %315 = call %dx.types.Handle @dx.op.createHandleFromHeap(i32 218, i32 %314, i1 false, i1 false)  ; CreateHandleFromHeap(index,samplerHeap,nonUniformIndex)
  %316 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %315, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %317 = call %dx.types.Handle @dx.op.createHandleForLib.dx.types.Handle(i32 160, %dx.types.Handle %1)  ; CreateHandleForLib(Resource)
  %318 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %317, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %319 = call %dx.types.ResRet.f32 @dx.op.sampleGrad.f32(i32 63, %dx.types.Handle %316, %dx.types.Handle %318, float %219, float %220, float undef, float undef, i32 0, i32 0, i32 undef, float %303, float %304, float undef, float %311, float %312, float undef, float undef)  ; SampleGrad(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,ddx0,ddx1,ddx2,ddy0,ddy1,ddy2,clamp)
  %320 = extractvalue %dx.types.ResRet.f32 %319, 3
  %321 = fcmp fast olt float %320, 0x3FB99999A0000000
  br i1 %321, label %322, label %323

; <label>:322                                     ; preds = %68
  store <3 x float> %6, <3 x float>* %5, align 4
  store i32 %8, i32* %7, align 4
  store <3 x float> %10, <3 x float>* %9, align 4
  store <3 x float> %15, <3 x float>* %14, align 4
  store <3 x float> %20, <3 x float>* %19, align 4
  store <3 x float> %25, <3 x float>* %24, align 4
  call void @dx.op.ignoreHit(i32 155)  ; IgnoreHit()
  unreachable

; <label>:323                                     ; preds = %68
  store <3 x float> %6, <3 x float>* %5, align 4
  store i32 %8, i32* %7, align 4
  store <3 x float> %10, <3 x float>* %9, align 4
  store <3 x float> %15, <3 x float>* %14, align 4
  store <3 x float> %20, <3 x float>* %19, align 4
  store <3 x float> %25, <3 x float>* %24, align 4
  ret void
}

; Function Attrs: nounwind
define void @"\01?MissShader_CameraRay@@YAXUColorPayload@@@Z"(%struct.ColorPayload* noalias nocapture %payload) #0 {
  %1 = load %dx.types.Handle, %dx.types.Handle* @"\01?LinearClamp@@3USamplerState@@A", align 4
  %2 = load %hostlayout.frameCB, %hostlayout.frameCB* @frameCB_legacy
  %3 = call %dx.types.Handle @dx.op.createHandleForLib.hostlayout.frameCB(i32 160, %hostlayout.frameCB %2)  ; CreateHandleForLib(Resource)
  %4 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 13, i32 400 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %5 = call float @dx.op.worldRayDirection.f32(i32 148, i8 0)  ; WorldRayDirection(col)
  %6 = call float @dx.op.worldRayDirection.f32(i32 148, i8 1)  ; WorldRayDirection(col)
  %7 = call float @dx.op.worldRayDirection.f32(i32 148, i8 2)  ; WorldRayDirection(col)
  %8 = call %dx.types.Handle @dx.op.createHandleFromHeap(i32 218, i32 59, i1 false, i1 false)  ; CreateHandleFromHeap(index,samplerHeap,nonUniformIndex)
  %9 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %8, %dx.types.ResourceProperties { i32 5, i32 777 })  ; AnnotateHandle(res,props)  resource: TextureCube<3xF32>
  %10 = call %dx.types.Handle @dx.op.createHandleForLib.dx.types.Handle(i32 160, %dx.types.Handle %1)  ; CreateHandleForLib(Resource)
  %11 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %10, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %12 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %9, %dx.types.Handle %11, float %5, float %6, float %7, float undef, i32 undef, i32 undef, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %13 = extractvalue %dx.types.ResRet.f32 %12, 0
  %14 = extractvalue %dx.types.ResRet.f32 %12, 1
  %15 = extractvalue %dx.types.ResRet.f32 %12, 2
  %16 = fadd fast float %13, 0x3FAC28F5C0000000
  %17 = fadd fast float %14, 0x3FAC28F5C0000000
  %18 = fadd fast float %15, 0x3FAC28F5C0000000
  %19 = fmul fast float %16, 0x3FEE54EDE0000000
  %20 = fmul fast float %17, 0x3FEE54EDE0000000
  %21 = fmul fast float %18, 0x3FEE54EDE0000000
  %22 = call float @dx.op.unary.f32(i32 23, float %19)  ; Log(value)
  %23 = call float @dx.op.unary.f32(i32 23, float %20)  ; Log(value)
  %24 = call float @dx.op.unary.f32(i32 23, float %21)  ; Log(value)
  %25 = fmul fast float %22, 0x4003333340000000
  %26 = fmul fast float %23, 0x4003333340000000
  %27 = fmul fast float %24, 0x4003333340000000
  %28 = call float @dx.op.unary.f32(i32 21, float %25)  ; Exp(value)
  %29 = call float @dx.op.unary.f32(i32 21, float %26)  ; Exp(value)
  %30 = call float @dx.op.unary.f32(i32 21, float %27)  ; Exp(value)
  %31 = fmul fast float %13, 0x3FB3D07220000000
  %32 = fmul fast float %14, 0x3FB3D07220000000
  %33 = fmul fast float %15, 0x3FB3D07220000000
  %34 = fcmp fast olt float %13, 0x3FA4B5DCC0000000
  %35 = fcmp fast olt float %14, 0x3FA4B5DCC0000000
  %36 = fcmp fast olt float %15, 0x3FA4B5DCC0000000
  %37 = select i1 %34, float %31, float %28
  %38 = select i1 %35, float %32, float %29
  %39 = select i1 %36, float %33, float %30
  %40 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 23)  ; CBufferLoadLegacy(handle,regIndex)
  %41 = extractvalue %dx.types.CBufRet.f32 %40, 0
  %42 = extractvalue %dx.types.CBufRet.f32 %40, 1
  %43 = extractvalue %dx.types.CBufRet.f32 %40, 2
  %44 = fsub fast float -0.000000e+00, %41
  %45 = fsub fast float -0.000000e+00, %42
  %46 = fsub fast float -0.000000e+00, %43
  %47 = call float @dx.op.dot3.f32(i32 55, float %5, float %6, float %7, float %44, float %45, float %46)  ; Dot3(ax,ay,az,bx,by,bz)
  %48 = call float @dx.op.unary.f32(i32 7, float %47)  ; Saturate(value)
  %49 = call float @dx.op.unary.f32(i32 23, float %48)  ; Log(value)
  %50 = fmul fast float %49, 2.000000e+01
  %51 = call float @dx.op.unary.f32(i32 21, float %50)  ; Exp(value)
  %52 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 21)  ; CBufferLoadLegacy(handle,regIndex)
  %53 = extractvalue %dx.types.CBufRet.f32 %52, 0
  %54 = extractvalue %dx.types.CBufRet.f32 %52, 1
  %55 = extractvalue %dx.types.CBufRet.f32 %52, 2
  %56 = fsub fast float %53, %37
  %57 = fsub fast float %54, %38
  %58 = fsub fast float %55, %39
  %59 = fmul fast float %56, %51
  %60 = fmul fast float %57, %51
  %61 = fmul fast float %58, %51
  %62 = fadd fast float %59, %37
  %63 = fadd fast float %60, %38
  %64 = fadd fast float %61, %39
  %65 = insertelement <3 x float> undef, float %62, i32 0
  %66 = insertelement <3 x float> %65, float %63, i32 1
  %67 = insertelement <3 x float> %66, float %64, i32 2
  %68 = getelementptr inbounds %struct.ColorPayload, %struct.ColorPayload* %payload, i32 0, i32 0
  store <3 x float> %67, <3 x float>* %68, align 4
  ret void
}

; Function Attrs: nounwind
define void @"\01?MissShader_Occlusion@@YAXUColorPayload@@@Z"(%struct.ColorPayload* noalias nocapture %payload) #0 {
  ret void
}

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.createHandleFromHeap(i32, i32, i1, i1) #1

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32, %dx.types.Handle, i32, i32, i8, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.worldRayDirection.f32(i32, i8) #1

; Function Attrs: nounwind readnone
declare float @dx.op.worldRayOrigin.f32(i32, i8) #1

; Function Attrs: nounwind readonly
declare float @dx.op.rayTCurrent.f32(i32) #2

; Function Attrs: nounwind readnone
declare i32 @dx.op.dispatchRaysDimensions.i32(i32, i8) #1

; Function Attrs: nounwind readnone
declare i32 @dx.op.dispatchRaysIndex.i32(i32, i8) #1

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.dot2.f32(i32, float, float, float, float) #1

; Function Attrs: nounwind
declare void @dx.op.traceRay.struct.ColorPayload(i32, %dx.types.Handle, i32, i32, i32, i32, i32, float, float, float, float, float, float, float, float, %struct.ColorPayload*) #0

; Function Attrs: nounwind
declare void @dx.op.textureStore.f32(i32, %dx.types.Handle, i32, i32, i32, float, float, float, float, i8) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32, %dx.types.Handle, i32, i32, i8, i32) #2

; Function Attrs: nounwind readnone
declare i32 @dx.op.instanceIndex.i32(i32) #1

; Function Attrs: nounwind readnone
declare i32 @dx.op.geometryIndex.i32(i32) #1

; Function Attrs: nounwind readnone
declare i32 @dx.op.primitiveIndex.i32(i32) #1

; Function Attrs: nounwind readnone
declare i32 @dx.op.instanceID.i32(i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleGrad.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float, float, float, float, float, float, float) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #2

; Function Attrs: noreturn nounwind
declare void @dx.op.ignoreHit(i32) #3

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.objectToWorld.f32(i32, i32, i8) #1

; Function Attrs: nounwind readnone
declare float @dx.op.worldToObject.f32(i32, i32, i8) #1

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.annotateHandle(i32, %dx.types.Handle, %dx.types.ResourceProperties) #1

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandleForLib.dx.types.Handle(i32, %dx.types.Handle) #2

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandleForLib.hostlayout.frameCB(i32, %hostlayout.frameCB) #2

attributes #0 = { nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind readonly }
attributes #3 = { noreturn nounwind }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!1}
!dx.shaderModel = !{!2}
!dx.resources = !{!3}
!dx.typeAnnotations = !{!10}
!dx.entryPoints = !{!18, !20, !23, !25, !26, !28, !29}

!0 = !{!"dxcoob 1.7.2308.7 (69e54e290)"}
!1 = !{i32 1, i32 7}
!2 = !{!"lib", i32 6, i32 7}
!3 = !{null, null, !4, !6}
!4 = !{!5}
!5 = !{i32 0, %hostlayout.frameCB* @frameCB_legacy, !"frameCB", i32 0, i32 0, i32 1, i32 400, null}
!6 = !{!7, !8, !9}
!7 = !{i32 0, %struct.SamplerState* bitcast (%dx.types.Handle* @"\01?AnisoClamp@@3USamplerState@@A" to %struct.SamplerState*), !"AnisoClamp", i32 0, i32 0, i32 1, i32 0, null}
!8 = !{i32 1, %struct.SamplerState* bitcast (%dx.types.Handle* @"\01?LinearClamp@@3USamplerState@@A" to %struct.SamplerState*), !"LinearClamp", i32 0, i32 1, i32 1, i32 0, null}
!9 = !{i32 2, %struct.SamplerState* bitcast (%dx.types.Handle* @"\01?AnisoWrap@@3USamplerState@@A" to %struct.SamplerState*), !"AnisoWrap", i32 0, i32 3, i32 1, i32 0, null}
!10 = !{i32 1, void ()* @"\01?RaygenShader@@YAXXZ", !11, void (%struct.ColorPayload*, %struct.BuiltInTriangleIntersectionAttributes*)* @"\01?ClosestHitCubeShader@@YAXUColorPayload@@UBuiltInTriangleIntersectionAttributes@@@Z", !14, void (%struct.ColorPayload*, %struct.BuiltInTriangleIntersectionAttributes*)* @"\01?ClosestHitShader@@YAXUColorPayload@@UBuiltInTriangleIntersectionAttributes@@@Z", !14, void (%struct.ColorPayload*, %struct.BuiltInTriangleIntersectionAttributes*)* @"\01?AnyHitShader@@YAXUColorPayload@@UBuiltInTriangleIntersectionAttributes@@@Z", !14, void (%struct.ColorPayload*)* @"\01?MissShader_CameraRay@@YAXUColorPayload@@@Z", !17, void (%struct.ColorPayload*)* @"\01?MissShader_Occlusion@@YAXUColorPayload@@@Z", !17}
!11 = !{!12}
!12 = !{i32 1, !13, !13}
!13 = !{}
!14 = !{!12, !15, !16}
!15 = !{i32 2, !13, !13}
!16 = !{i32 0, !13, !13}
!17 = !{!12, !15}
!18 = !{null, !"", null, !3, !19}
!19 = !{i32 0, i64 1107296256}
!20 = !{void (%struct.ColorPayload*, %struct.BuiltInTriangleIntersectionAttributes*)* @"\01?AnyHitShader@@YAXUColorPayload@@UBuiltInTriangleIntersectionAttributes@@@Z", !"\01?AnyHitShader@@YAXUColorPayload@@UBuiltInTriangleIntersectionAttributes@@@Z", null, null, !21}
!21 = !{i32 8, i32 9, i32 6, i32 64, i32 7, i32 8, i32 5, !22}
!22 = !{i32 0}
!23 = !{void (%struct.ColorPayload*, %struct.BuiltInTriangleIntersectionAttributes*)* @"\01?ClosestHitCubeShader@@YAXUColorPayload@@UBuiltInTriangleIntersectionAttributes@@@Z", !"\01?ClosestHitCubeShader@@YAXUColorPayload@@UBuiltInTriangleIntersectionAttributes@@@Z", null, null, !24}
!24 = !{i32 8, i32 10, i32 6, i32 64, i32 7, i32 8, i32 5, !22}
!25 = !{void (%struct.ColorPayload*, %struct.BuiltInTriangleIntersectionAttributes*)* @"\01?ClosestHitShader@@YAXUColorPayload@@UBuiltInTriangleIntersectionAttributes@@@Z", !"\01?ClosestHitShader@@YAXUColorPayload@@UBuiltInTriangleIntersectionAttributes@@@Z", null, null, !24}
!26 = !{void (%struct.ColorPayload*)* @"\01?MissShader_CameraRay@@YAXUColorPayload@@@Z", !"\01?MissShader_CameraRay@@YAXUColorPayload@@@Z", null, null, !27}
!27 = !{i32 8, i32 11, i32 6, i32 64, i32 5, !22}
!28 = !{void (%struct.ColorPayload*)* @"\01?MissShader_Occlusion@@YAXUColorPayload@@@Z", !"\01?MissShader_Occlusion@@YAXUColorPayload@@@Z", null, null, !27}
!29 = !{void ()* @"\01?RaygenShader@@YAXXZ", !"\01?RaygenShader@@YAXXZ", null, null, !30}
!30 = !{i32 8, i32 7, i32 5, !22}
!31 = !{!32, !32, i64 0}
!32 = !{!"omnipotent char", !33, i64 0}
!33 = !{!"Simple C/C++ TBAA"}
!34 = !{!35, !35, i64 0}
!35 = !{!"int", !32, i64 0}
!36 = !{!37}
!37 = distinct !{!37, !38, !"\01?TraceRadianceRay@@YAXURay@@UColorPayload@@@Z: %payload"}
!38 = distinct !{!38, !"\01?TraceRadianceRay@@YAXURay@@UColorPayload@@@Z"}
!39 = !{!40}
!40 = distinct !{!40, !41, !"\01?TraceRadianceRay@@YAXURay@@UColorPayload@@@Z: %payload"}
!41 = distinct !{!41, !"\01?TraceRadianceRay@@YAXURay@@UColorPayload@@@Z"}
!42 = !{!43}
!43 = distinct !{!43, !44, !"\01?TraceRadianceRay@@YAXURay@@UColorPayload@@@Z: %payload"}
!44 = distinct !{!44, !"\01?TraceRadianceRay@@YAXURay@@UColorPayload@@@Z"}

#endif

const unsigned char g_RaytracingShaderColor[] = {
  0x44, 0x58, 0x42, 0x43, 0x5d, 0x32, 0x21, 0xfd, 0x60, 0x2b, 0x46, 0x41,
  0xe8, 0xb5, 0x9e, 0x0a, 0x41, 0xe4, 0xb5, 0xc0, 0x01, 0x00, 0x00, 0x00,
  0x70, 0x67, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00,
  0x48, 0x00, 0x00, 0x00, 0x58, 0x04, 0x00, 0x00, 0x60, 0x16, 0x00, 0x00,
  0x94, 0x16, 0x00, 0x00, 0xb0, 0x16, 0x00, 0x00, 0x53, 0x46, 0x49, 0x30,
  0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x02, 0x00, 0x00, 0x00, 0x00,
  0x52, 0x44, 0x41, 0x54, 0x08, 0x04, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x18, 0x02, 0x00, 0x00,
  0xa8, 0x02, 0x00, 0x00, 0xc0, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0xf8, 0x01, 0x00, 0x00, 0x00, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x43, 0x42,
  0x00, 0x41, 0x6e, 0x69, 0x73, 0x6f, 0x43, 0x6c, 0x61, 0x6d, 0x70, 0x00,
  0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x43, 0x6c, 0x61, 0x6d, 0x70, 0x00,
  0x41, 0x6e, 0x69, 0x73, 0x6f, 0x57, 0x72, 0x61, 0x70, 0x00, 0x01, 0x3f,
  0x52, 0x61, 0x79, 0x67, 0x65, 0x6e, 0x53, 0x68, 0x61, 0x64, 0x65, 0x72,
  0x40, 0x40, 0x59, 0x41, 0x58, 0x58, 0x5a, 0x00, 0x52, 0x61, 0x79, 0x67,
  0x65, 0x6e, 0x53, 0x68, 0x61, 0x64, 0x65, 0x72, 0x00, 0x01, 0x3f, 0x43,
  0x6c, 0x6f, 0x73, 0x65, 0x73, 0x74, 0x48, 0x69, 0x74, 0x43, 0x75, 0x62,
  0x65, 0x53, 0x68, 0x61, 0x64, 0x65, 0x72, 0x40, 0x40, 0x59, 0x41, 0x58,
  0x55, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
  0x64, 0x40, 0x40, 0x55, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x49, 0x6e, 0x54,
  0x72, 0x69, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72,
  0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69,
  0x62, 0x75, 0x74, 0x65, 0x73, 0x40, 0x40, 0x40, 0x5a, 0x00, 0x43, 0x6c,
  0x6f, 0x73, 0x65, 0x73, 0x74, 0x48, 0x69, 0x74, 0x43, 0x75, 0x62, 0x65,
  0x53, 0x68, 0x61, 0x64, 0x65, 0x72, 0x00, 0x01, 0x3f, 0x43, 0x6c, 0x6f,
  0x73, 0x65, 0x73, 0x74, 0x48, 0x69, 0x74, 0x53, 0x68, 0x61, 0x64, 0x65,
  0x72, 0x40, 0x40, 0x59, 0x41, 0x58, 0x55, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
  0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x40, 0x40, 0x55, 0x42, 0x75,
  0x69, 0x6c, 0x74, 0x49, 0x6e, 0x54, 0x72, 0x69, 0x61, 0x6e, 0x67, 0x6c,
  0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f,
  0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x40,
  0x40, 0x40, 0x5a, 0x00, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x73, 0x74, 0x48,
  0x69, 0x74, 0x53, 0x68, 0x61, 0x64, 0x65, 0x72, 0x00, 0x01, 0x3f, 0x41,
  0x6e, 0x79, 0x48, 0x69, 0x74, 0x53, 0x68, 0x61, 0x64, 0x65, 0x72, 0x40,
  0x40, 0x59, 0x41, 0x58, 0x55, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x50, 0x61,
  0x79, 0x6c, 0x6f, 0x61, 0x64, 0x40, 0x40, 0x55, 0x42, 0x75, 0x69, 0x6c,
  0x74, 0x49, 0x6e, 0x54, 0x72, 0x69, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x49,
  0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41,
  0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x40, 0x40, 0x40,
  0x5a, 0x00, 0x41, 0x6e, 0x79, 0x48, 0x69, 0x74, 0x53, 0x68, 0x61, 0x64,
  0x65, 0x72, 0x00, 0x01, 0x3f, 0x4d, 0x69, 0x73, 0x73, 0x53, 0x68, 0x61,
  0x64, 0x65, 0x72, 0x5f, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x52, 0x61,
  0x79, 0x40, 0x40, 0x59, 0x41, 0x58, 0x55, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
  0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x40, 0x40, 0x40, 0x5a, 0x00,
  0x4d, 0x69, 0x73, 0x73, 0x53, 0x68, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x43,
  0x61, 0x6d, 0x65, 0x72, 0x61, 0x52, 0x61, 0x79, 0x00, 0x01, 0x3f, 0x4d,
  0x69, 0x73, 0x73, 0x53, 0x68, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x4f, 0x63,
  0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x40, 0x40, 0x59, 0x41, 0x58,
  0x55, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
  0x64, 0x40, 0x40, 0x40, 0x5a, 0x00, 0x4d, 0x69, 0x73, 0x73, 0x53, 0x68,
  0x61, 0x64, 0x65, 0x72, 0x5f, 0x4f, 0x63, 0x63, 0x6c, 0x75, 0x73, 0x69,
  0x6f, 0x6e, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x0e, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x10, 0x01, 0x00, 0x00,
  0x06, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00,
  0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
  0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00,
  0x66, 0x00, 0x07, 0x00, 0x4d, 0x00, 0x00, 0x00, 0xa2, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x0a, 0x00, 0x00, 0x00,
  0x40, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x66, 0x00, 0x0a, 0x00,
  0xb7, 0x00, 0x00, 0x00, 0x08, 0x01, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,
  0xff, 0xff, 0xff, 0xff, 0x0a, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x02, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x04, 0x00, 0x00, 0x66, 0x00, 0x0a, 0x00, 0x19, 0x01, 0x00, 0x00,
  0x66, 0x01, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
  0x09, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x10, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
  0x66, 0x00, 0x09, 0x00, 0x73, 0x01, 0x00, 0x00, 0xa0, 0x01, 0x00, 0x00,
  0x0d, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x0b, 0x00, 0x00, 0x00,
  0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x66, 0x00, 0x0b, 0x00,
  0xb5, 0x01, 0x00, 0x00, 0xe2, 0x01, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0x0b, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x08, 0x00, 0x00, 0x60, 0x00, 0x0b, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x40, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x53, 0x54, 0x41, 0x54,
  0x00, 0x12, 0x00, 0x00, 0x67, 0x00, 0x06, 0x00, 0x80, 0x04, 0x00, 0x00,
  0x44, 0x58, 0x49, 0x4c, 0x07, 0x01, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
  0xe8, 0x11, 0x00, 0x00, 0x42, 0x43, 0xc0, 0xde, 0x21, 0x0c, 0x00, 0x00,
  0x77, 0x04, 0x00, 0x00, 0x0b, 0x82, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x13, 0x00, 0x00, 0x00, 0x07, 0x81, 0x23, 0x91, 0x41, 0xc8, 0x04, 0x49,
  0x06, 0x10, 0x32, 0x39, 0x92, 0x01, 0x84, 0x0c, 0x25, 0x05, 0x08, 0x19,
  0x1e, 0x04, 0x8b, 0x62, 0x80, 0x1c, 0x45, 0x02, 0x42, 0x92, 0x0b, 0x42,
  0xe4, 0x10, 0x32, 0x14, 0x38, 0x08, 0x18, 0x4b, 0x0a, 0x32, 0x72, 0x88,
  0x48, 0x90, 0x14, 0x20, 0x43, 0x46, 0x88, 0xa5, 0x00, 0x19, 0x32, 0x42,
  0xe4, 0x48, 0x0e, 0x90, 0x91, 0x23, 0xc4, 0x50, 0x41, 0x51, 0x81, 0x8c,
  0xe1, 0x83, 0xe5, 0x8a, 0x04, 0x39, 0x46, 0x06, 0x51, 0x18, 0x00, 0x00,
  0x11, 0x00, 0x00, 0x00, 0x1b, 0x88, 0x40, 0x00, 0x96, 0x0d, 0x84, 0xf0,
  0xff, 0xff, 0xff, 0xff, 0x03, 0x20, 0x6d, 0x20, 0x86, 0x00, 0x48, 0x36,
  0x18, 0x84, 0x00, 0x2c, 0x40, 0xb5, 0xc1, 0x28, 0x02, 0x20, 0x01, 0x96,
  0x0d, 0x86, 0xf1, 0xff, 0xff, 0xff, 0xff, 0x03, 0x20, 0x01, 0xd4, 0x06,
  0xe3, 0xf8, 0xff, 0xff, 0xff, 0xff, 0x01, 0x90, 0x80, 0x6a, 0x83, 0x81,
  0xfc, 0xff, 0xff, 0xff, 0xff, 0x00, 0x44, 0x80, 0x04, 0x00, 0x00, 0x00,
  0x49, 0x18, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x13, 0x84, 0x40, 0x98,
  0x10, 0x08, 0x13, 0x86, 0x81, 0x10, 0x26, 0x0c, 0x05, 0x21, 0x4c, 0x10,
  0x0a, 0x61, 0x42, 0x60, 0x4c, 0x08, 0x8e, 0x09, 0x01, 0x02, 0x00, 0x00,
  0x89, 0x20, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x32, 0x22, 0xc8, 0x09,
  0x20, 0x64, 0x85, 0x04, 0x93, 0x23, 0xa4, 0x84, 0x04, 0x93, 0x23, 0xe3,
  0x84, 0xa1, 0x90, 0x14, 0x12, 0x4c, 0x8e, 0x8c, 0x0b, 0x84, 0xe4, 0x4c,
  0x10, 0xcc, 0xc2, 0x1c, 0x01, 0x42, 0x80, 0x7b, 0x86, 0xcb, 0x9f, 0xb0,
  0x87, 0x90, 0xfc, 0x10, 0x68, 0x86, 0x85, 0x40, 0x41, 0x80, 0x04, 0x33,
  0x00, 0xc3, 0x08, 0x04, 0x91, 0x04, 0x85, 0x61, 0x84, 0x81, 0x98, 0x23,
  0x00, 0x83, 0x03, 0x83, 0xc3, 0x91, 0xa6, 0x05, 0xc0, 0x1c, 0x6a, 0xf2,
  0xa5, 0x29, 0xa2, 0x84, 0xc9, 0xff, 0x22, 0x80, 0x21, 0x38, 0xa7, 0x91,
  0x26, 0xa0, 0x99, 0x24, 0xe4, 0x18, 0x0c, 0x06, 0x83, 0xa1, 0x50, 0x28,
  0x1c, 0x10, 0x08, 0x04, 0x02, 0x71, 0xd2, 0xe1, 0x48, 0xd3, 0x02, 0x60,
  0x0e, 0x35, 0xf9, 0x45, 0x04, 0x30, 0x04, 0xb7, 0xa1, 0x20, 0x41, 0x8a,
  0x11, 0x80, 0x39, 0x02, 0x50, 0x28, 0x03, 0xa3, 0x11, 0x20, 0x47, 0x09,
  0x18, 0x04, 0x39, 0x45, 0x9a, 0x22, 0x4a, 0x98, 0xfc, 0x15, 0xc0, 0x90,
  0x70, 0x38, 0xdc, 0x24, 0x4d, 0x11, 0x25, 0x4c, 0x3e, 0xe7, 0x2c, 0x4e,
  0x94, 0x02, 0xd8, 0xe2, 0x00, 0x03, 0x22, 0x0e, 0x08, 0x89, 0x84, 0x26,
  0xc3, 0x08, 0x02, 0x71, 0x6c, 0x20, 0x4d, 0x11, 0x25, 0x4c, 0xfe, 0x46,
  0x21, 0xcb, 0x24, 0x36, 0x6d, 0x84, 0x00, 0x8d, 0xb1, 0x10, 0x62, 0x33,
  0x11, 0x91, 0x44, 0x08, 0x13, 0xe2, 0x34, 0xda, 0x34, 0x45, 0x48, 0x40,
  0x4d, 0x84, 0x84, 0x82, 0x0a, 0x59, 0xca, 0xc0, 0xa0, 0x5c, 0x08, 0x53,
  0x04, 0x06, 0x85, 0x34, 0x73, 0x04, 0x41, 0x29, 0x04, 0x08, 0x04, 0x87,
  0x43, 0x9d, 0x32, 0x10, 0x10, 0x04, 0xfa, 0x14, 0x84, 0x80, 0x20, 0x10,
  0x08, 0x04, 0x02, 0x81, 0x42, 0x37, 0x0d, 0x97, 0x3f, 0x61, 0x0f, 0x21,
  0xf9, 0x2b, 0x21, 0xad, 0xc4, 0xe4, 0x23, 0xb7, 0x8d, 0x0a, 0x04, 0x02,
  0x81, 0x40, 0x94, 0x63, 0x84, 0x10, 0x20, 0x10, 0x00, 0x04, 0x91, 0xca,
  0x40, 0x40, 0x00, 0xc8, 0x54, 0x04, 0x02, 0x82, 0x50, 0x65, 0x40, 0x20,
  0x00, 0xa4, 0x2a, 0x04, 0x01, 0x41, 0x20, 0x10, 0xab, 0x18, 0x04, 0x04,
  0x81, 0x40, 0x20, 0x90, 0xab, 0x44, 0x0c, 0x84, 0x00, 0x81, 0x40, 0x20,
  0x10, 0x04, 0x02, 0x81, 0x40, 0x20, 0x10, 0x08, 0x14, 0x82, 0x95, 0x85,
  0x81, 0x10, 0x20, 0x10, 0x08, 0x02, 0x81, 0x40, 0x00, 0x90, 0xec, 0xa6,
  0xe1, 0xf2, 0x27, 0xec, 0x21, 0x24, 0x7f, 0x25, 0xa4, 0x95, 0x98, 0xfc,
  0xe2, 0xb6, 0x51, 0x41, 0x20, 0x10, 0x08, 0x88, 0x72, 0xd0, 0x10, 0x02,
  0x04, 0x02, 0x80, 0xa0, 0x5a, 0x11, 0x10, 0x08, 0xba, 0x15, 0x89, 0x86,
  0x10, 0x08, 0x08, 0x04, 0x02, 0x01, 0x81, 0x40, 0x10, 0x08, 0x04, 0x02,
  0x81, 0x40, 0xa0, 0x5c, 0x61, 0x68, 0x08, 0x81, 0x80, 0x40, 0x20, 0x10,
  0x10, 0x08, 0x04, 0x81, 0x76, 0x45, 0x60, 0x20, 0xa8, 0x77, 0xd4, 0x70,
  0xf9, 0x13, 0xf6, 0x10, 0x92, 0xcf, 0x6d, 0x54, 0xb1, 0x12, 0x93, 0x8f,
  0xdc, 0x36, 0x22, 0x10, 0x08, 0x04, 0xa2, 0x10, 0x3f, 0x84, 0x00, 0x41,
  0xc0, 0xa3, 0x86, 0xcb, 0x9f, 0xb0, 0x87, 0x90, 0x7c, 0x6e, 0xa3, 0x8a,
  0x95, 0x98, 0xfc, 0xe2, 0xb6, 0x11, 0x41, 0x20, 0x10, 0x08, 0x85, 0x10,
  0x22, 0x04, 0x08, 0x1a, 0x96, 0x82, 0x80, 0x20, 0x10, 0x08, 0x54, 0x2c,
  0x04, 0x01, 0x81, 0x00, 0xd0, 0xf1, 0xb6, 0xe1, 0xf2, 0x27, 0xec, 0x21,
  0x24, 0x7f, 0x25, 0x24, 0x87, 0x8a, 0x04, 0x22, 0x8d, 0x9c, 0x87, 0x88,
  0x26, 0x84, 0x90, 0x90, 0x80, 0x40, 0x14, 0x42, 0x80, 0x10, 0x24, 0x49,
  0x59, 0x06, 0x01, 0x42, 0x40, 0xcc, 0x32, 0x08, 0x10, 0x0a, 0x72, 0x0e,
  0x04, 0xdc, 0x24, 0x4d, 0x11, 0x25, 0x4c, 0x3e, 0x0b, 0x30, 0xcf, 0x42,
  0x44, 0xec, 0x04, 0x4c, 0x04, 0x0a, 0x10, 0x14, 0x05, 0x00, 0x00, 0x00,
  0x13, 0x14, 0x72, 0xc0, 0x87, 0x74, 0x60, 0x87, 0x36, 0x68, 0x87, 0x79,
  0x68, 0x03, 0x72, 0xc0, 0x87, 0x0d, 0xaf, 0x50, 0x0e, 0x6d, 0xd0, 0x0e,
  0x7a, 0x50, 0x0e, 0x6d, 0x00, 0x0f, 0x7a, 0x30, 0x07, 0x72, 0xa0, 0x07,
  0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x71, 0xa0, 0x07, 0x73, 0x20, 0x07,
  0x6d, 0x90, 0x0e, 0x78, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e,
  0x71, 0x60, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9, 0x30, 0x07,
  0x72, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x76, 0x40, 0x07,
  0x7a, 0x60, 0x07, 0x74, 0xd0, 0x06, 0xe6, 0x10, 0x07, 0x76, 0xa0, 0x07,
  0x73, 0x20, 0x07, 0x6d, 0x60, 0x0e, 0x73, 0x20, 0x07, 0x7a, 0x30, 0x07,
  0x72, 0xd0, 0x06, 0xe6, 0x60, 0x07, 0x74, 0xa0, 0x07, 0x76, 0x40, 0x07,
  0x6d, 0xe0, 0x0e, 0x78, 0xa0, 0x07, 0x71, 0x60, 0x07, 0x7a, 0x30, 0x07,
  0x72, 0xa0, 0x07, 0x76, 0x40, 0x07, 0x3a, 0x0f, 0x84, 0x90, 0x21, 0x23,
  0x45, 0x44, 0x00, 0xca, 0x00, 0x80, 0x29, 0x03, 0x00, 0xa6, 0x0c, 0x00,
  0x98, 0x2a, 0x00, 0x80, 0x21, 0x8f, 0x03, 0x04, 0x40, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x1e, 0x07, 0x08, 0x80, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x3c, 0x10, 0x10, 0x00, 0x02,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x79, 0x30, 0x20, 0x00,
  0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0xf2, 0x60, 0x40,
  0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0xe4, 0xc1,
  0x80, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xc8,
  0xa3, 0x01, 0x01, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0,
  0x90, 0x47, 0x03, 0x02, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x80, 0x21, 0x4f, 0x07, 0x04, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x43, 0x9e, 0x0f, 0x08, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x86, 0x3c, 0x61, 0x00, 0x04, 0x80, 0x01, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x1e, 0x32, 0x00, 0x02, 0xe0, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x21, 0x8f, 0x19, 0x00, 0x01,
  0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x90, 0xc7, 0x0c,
  0x80, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xc8,
  0x83, 0x06, 0x40, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x30, 0xe4, 0x51, 0x03, 0x20, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x18, 0xf2, 0xa8, 0x01, 0x10, 0x00, 0x06, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0c, 0x79, 0xd8, 0x00, 0x08, 0x00, 0x03, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x3c, 0x6e, 0x00, 0x04, 0x80,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x1e, 0x38, 0x00,
  0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x21, 0x8f,
  0x1c, 0x00, 0x01, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0,
  0x90, 0xa7, 0x0e, 0x80, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x60, 0xc8, 0x73, 0x07, 0x40, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x30, 0xe4, 0xb9, 0x03, 0x20, 0x00, 0x0c, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0xf2, 0xdc, 0x01, 0x10, 0x00, 0x06,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x79, 0xee, 0x00, 0x08,
  0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x3c, 0x79,
  0x00, 0x04, 0xc0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43,
  0x9e, 0x3d, 0x00, 0x02, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x80, 0x21, 0x4f, 0x1f, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0xc0, 0x90, 0x07, 0x14, 0x80, 0x00, 0x38, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x60, 0xc8, 0x33, 0x0a, 0x40, 0x00, 0x1c, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0xe4, 0x29, 0x05, 0x20, 0x00,
  0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0xf2, 0x9c, 0x02,
  0x10, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x79,
  0x4e, 0x01, 0x08, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x86, 0x3c, 0xaa, 0x00, 0x04, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x43, 0x1e, 0x56, 0x00, 0x02, 0xe0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x80, 0x21, 0x8f, 0x2b, 0x00, 0x01, 0x70, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x16, 0x08, 0x1f, 0x00, 0x00, 0x00,
  0x32, 0x1e, 0x98, 0x1c, 0x19, 0x11, 0x4c, 0x90, 0x8c, 0x09, 0x26, 0x47,
  0xc6, 0x04, 0x43, 0x42, 0x94, 0x40, 0x39, 0x8c, 0x00, 0x14, 0x43, 0x81,
  0x1a, 0x14, 0x41, 0x19, 0x14, 0x4e, 0x49, 0x14, 0x48, 0x41, 0x14, 0x66,
  0x40, 0x61, 0x94, 0x42, 0x81, 0x15, 0x42, 0x01, 0x06, 0x14, 0xa0, 0x40,
  0x01, 0x0e, 0x14, 0x20, 0x41, 0x01, 0x16, 0x14, 0x68, 0x41, 0x01, 0x17,
  0x14, 0x78, 0x41, 0xe1, 0x17, 0x14, 0xa0, 0x41, 0x21, 0x1a, 0x14, 0xa4,
  0x41, 0x61, 0x1a, 0x14, 0x45, 0x59, 0x14, 0x28, 0x44, 0xf9, 0x86, 0x14,
  0x51, 0xe9, 0x95, 0x07, 0x35, 0x0a, 0x10, 0x10, 0x10, 0x14, 0x81, 0x14,
  0x33, 0x00, 0x94, 0x98, 0x01, 0x20, 0xc9, 0x0c, 0x00, 0x4d, 0x66, 0x00,
  0xc8, 0x32, 0x03, 0x40, 0x52, 0xdb, 0x01, 0x80, 0xed, 0x20, 0xc0, 0x76,
  0x20, 0x00, 0x00, 0x00, 0x79, 0x18, 0x00, 0x00, 0x94, 0x01, 0x00, 0x00,
  0x1a, 0x03, 0x4c, 0x90, 0x46, 0x02, 0x13, 0xc4, 0x8e, 0x0c, 0x6f, 0xec,
  0xed, 0x4d, 0x0c, 0x24, 0xc6, 0xe5, 0xc6, 0x45, 0x66, 0x06, 0x06, 0xc7,
  0xe5, 0x06, 0x04, 0xc5, 0x26, 0xa7, 0xac, 0x86, 0xa6, 0x4c, 0x26, 0x07,
  0x26, 0x65, 0x43, 0x10, 0x4c, 0x10, 0x90, 0x34, 0x98, 0x20, 0x20, 0x6a,
  0xb0, 0x41, 0x18, 0x88, 0x09, 0x02, 0xb2, 0x06, 0x1b, 0x04, 0xc3, 0xe0,
  0xc0, 0x96, 0x26, 0x36, 0x41, 0x40, 0xd8, 0x60, 0xc3, 0x80, 0x24, 0xc4,
  0x04, 0x61, 0x19, 0x78, 0x98, 0xc9, 0x85, 0xb5, 0x95, 0x0d, 0x09, 0x4d,
  0x10, 0x90, 0x36, 0xd8, 0x80, 0x18, 0x0b, 0x63, 0x18, 0x43, 0x03, 0x6c,
  0x08, 0x9c, 0x09, 0x82, 0x2c, 0xcc, 0x02, 0x95, 0x20, 0xb7, 0xb4, 0xb9,
  0xb7, 0x21, 0xb6, 0xb0, 0x36, 0xb8, 0x0d, 0x88, 0x01, 0x45, 0x86, 0x31,
  0x18, 0xc0, 0x04, 0x41, 0x16, 0x68, 0x81, 0x0b, 0x53, 0x9a, 0x5b, 0x59,
  0x98, 0xdc, 0x10, 0x5b, 0x58, 0x1b, 0xdc, 0x06, 0x64, 0x98, 0x28, 0x63,
  0x18, 0x0c, 0x60, 0x82, 0x80, 0xb8, 0xc1, 0x04, 0x41, 0x16, 0x6a, 0x81,
  0x49, 0x90, 0x5b, 0xda, 0xdc, 0xdb, 0x95, 0x5c, 0x18, 0xdc, 0x04, 0x01,
  0x79, 0x83, 0x0d, 0x88, 0x75, 0x61, 0x46, 0x36, 0x18, 0xc0, 0x86, 0x41,
  0xaa, 0xb4, 0x0d, 0x04, 0x00, 0x3c, 0xdb, 0x04, 0x41, 0x82, 0x85, 0x09,
  0x02, 0x02, 0x07, 0x34, 0xde, 0xe4, 0xd2, 0xce, 0xd2, 0xdc, 0x26, 0x08,
  0x48, 0x1c, 0x6c, 0x30, 0x92, 0x2f, 0x33, 0x08, 0x30, 0x60, 0x42, 0x96,
  0x26, 0x57, 0x36, 0x46, 0x97, 0xf6, 0xe6, 0x36, 0x41, 0x40, 0xe4, 0x60,
  0x83, 0x91, 0x88, 0x41, 0x36, 0x06, 0x04, 0x18, 0x6c, 0x18, 0xbc, 0x30,
  0x20, 0x83, 0x09, 0x82, 0x25, 0x0b, 0x13, 0x04, 0x64, 0x0e, 0xc8, 0x88,
  0x85, 0xc9, 0xe5, 0x8d, 0x95, 0xb9, 0xd1, 0xc9, 0xa5, 0x8d, 0xcd, 0x6d,
  0x30, 0x12, 0x34, 0xc8, 0x0c, 0x02, 0x0c, 0x36, 0x08, 0x67, 0x90, 0x06,
  0x13, 0x84, 0x29, 0x16, 0x26, 0x08, 0x08, 0x1d, 0xb0, 0x18, 0x7b, 0x63,
  0x7b, 0x93, 0xdb, 0x60, 0x24, 0x6d, 0x90, 0x19, 0x04, 0x18, 0xd0, 0x91,
  0x2b, 0x1b, 0xab, 0x93, 0x9b, 0x4b, 0x7b, 0x73, 0x23, 0x2a, 0x83, 0xa3,
  0x43, 0x9b, 0x20, 0x20, 0x75, 0x30, 0x41, 0x40, 0xec, 0x60, 0x83, 0x91,
  0xbc, 0x41, 0x06, 0x07, 0x44, 0x1c, 0xd0, 0x20, 0x23, 0xc3, 0x93, 0x0a,
  0xcb, 0xdb, 0x40, 0x24, 0x73, 0x90, 0x8d, 0x01, 0x0d, 0x32, 0xb2, 0x3c,
  0xa9, 0xb0, 0xbc, 0x09, 0x02, 0x72, 0x07, 0x1b, 0x88, 0xa4, 0x0e, 0x32,
  0x3b, 0xd8, 0x50, 0xb0, 0x81, 0x1b, 0xc8, 0x01, 0x1d, 0xdc, 0xc1, 0x04,
  0x21, 0x79, 0x05, 0x22, 0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a,
  0x13, 0x04, 0x04, 0x0f, 0x36, 0x0c, 0x7b, 0xb0, 0x07, 0xd6, 0x06, 0x24,
  0xd1, 0x03, 0x8b, 0x0f, 0x32, 0x83, 0x00, 0x03, 0x1e, 0x69, 0x6e, 0x76,
  0x50, 0x72, 0x6f, 0x6a, 0x13, 0x04, 0x24, 0x0f, 0x36, 0x20, 0x89, 0x1f,
  0x58, 0x7c, 0x90, 0xfd, 0x01, 0x01, 0x06, 0x5c, 0xd2, 0xdc, 0xec, 0xac,
  0xd2, 0xca, 0xee, 0xa0, 0xe4, 0xde, 0xd4, 0x26, 0x08, 0x88, 0x1e, 0x6c,
  0x40, 0x92, 0x50, 0xb0, 0xf8, 0x20, 0x13, 0x05, 0x02, 0x0c, 0xb8, 0xd8,
  0xa5, 0x95, 0xdd, 0x41, 0xc9, 0xbd, 0xa9, 0x51, 0x95, 0xe1, 0x4d, 0x10,
  0x90, 0x3d, 0xd8, 0x80, 0x24, 0xa4, 0x60, 0xf1, 0x41, 0x56, 0x0a, 0x04,
  0x18, 0xf0, 0x81, 0x93, 0x2b, 0xb3, 0xb3, 0x4a, 0x2b, 0xbb, 0x83, 0x92,
  0x7b, 0x53, 0xa3, 0x2a, 0xc3, 0x9b, 0x20, 0x20, 0x7c, 0xb0, 0x01, 0x49,
  0x4e, 0xc1, 0xe2, 0x83, 0x0c, 0x15, 0x08, 0x30, 0x60, 0x32, 0x16, 0xd6,
  0x56, 0x26, 0x17, 0x06, 0xf5, 0x36, 0x37, 0x41, 0x40, 0xfa, 0x60, 0x83,
  0x91, 0xa8, 0x42, 0xb6, 0x0a, 0x04, 0x18, 0x90, 0x61, 0x4b, 0x3b, 0x43,
  0xa3, 0x23, 0x4a, 0x33, 0x33, 0xab, 0x9b, 0x2b, 0x9b, 0x20, 0x20, 0x7e,
  0xb0, 0xc1, 0x48, 0x5a, 0x21, 0x73, 0x05, 0x02, 0x0c, 0xc8, 0xb0, 0xa5,
  0x9d, 0xa1, 0xd1, 0x05, 0xb5, 0x89, 0xa5, 0x95, 0xb9, 0xd1, 0x4d, 0x10,
  0x90, 0x3f, 0xd8, 0x60, 0x24, 0xb0, 0x90, 0xc5, 0x02, 0x01, 0x06, 0x44,
  0xd8, 0xd2, 0xce, 0xd0, 0xe8, 0x88, 0xd2, 0xe4, 0x26, 0x08, 0x08, 0x28,
  0x6c, 0x30, 0x92, 0x59, 0xc8, 0x68, 0x81, 0x00, 0x03, 0x2a, 0x66, 0x72,
  0x61, 0x6d, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x13, 0x04, 0x24, 0x14,
  0x36, 0x18, 0x89, 0x2d, 0x64, 0xb7, 0x40, 0xc4, 0x01, 0x1f, 0x3a, 0xb6,
  0xb0, 0x39, 0xa1, 0x3a, 0x33, 0xb3, 0x32, 0xb9, 0x29, 0x39, 0xbb, 0x24,
  0xa2, 0x09, 0x02, 0x22, 0x0a, 0x1b, 0x8c, 0x24, 0x17, 0x32, 0x5d, 0x20,
  0xe2, 0x80, 0x4f, 0x9a, 0xdb, 0x1c, 0x9d, 0x50, 0x9d, 0x99, 0x59, 0x99,
  0xdc, 0x94, 0x9c, 0x5d, 0x12, 0xd1, 0x04, 0x01, 0x19, 0x85, 0x0d, 0x46,
  0xc2, 0x0b, 0x59, 0x2f, 0x10, 0x71, 0x40, 0x0a, 0x4e, 0xae, 0xcc, 0xce,
  0x48, 0x2e, 0xac, 0xad, 0x4c, 0xa8, 0xce, 0xcc, 0xac, 0x4c, 0x6e, 0x4a,
  0xce, 0x2e, 0x89, 0x68, 0x82, 0x80, 0x90, 0xc2, 0x06, 0x23, 0xf9, 0x85,
  0x0c, 0x1c, 0x88, 0x38, 0x20, 0x93, 0x36, 0x67, 0x94, 0x26, 0x37, 0x47,
  0x67, 0x24, 0x17, 0xd6, 0x56, 0x36, 0x41, 0x40, 0x4a, 0x61, 0x83, 0x91,
  0x88, 0x43, 0x36, 0x0e, 0x44, 0x1c, 0x6c, 0x78, 0x9a, 0x3e, 0x00, 0x85,
  0x51, 0x30, 0x85, 0x54, 0x60, 0x85, 0x57, 0x90, 0x85, 0x5a, 0xc0, 0x85,
  0x5d, 0xf0, 0x85, 0x70, 0x20, 0x87, 0x09, 0x82, 0xe2, 0x0a, 0x1b, 0x88,
  0x84, 0xc9, 0x8c, 0x0d, 0x42, 0x73, 0x0e, 0x1b, 0x16, 0xa3, 0x2b, 0x03,
  0x33, 0x50, 0x83, 0x35, 0xc0, 0x83, 0x3c, 0x28, 0x07, 0x73, 0x40, 0x87,
  0x09, 0x42, 0x64, 0x6c, 0x00, 0x36, 0x0c, 0xc3, 0x3a, 0xac, 0xc3, 0x86,
  0x80, 0x1d, 0x26, 0x08, 0xd9, 0xb1, 0x61, 0xb0, 0xd6, 0x61, 0x1d, 0x36,
  0x0c, 0xc6, 0x3a, 0xac, 0xc3, 0x86, 0x81, 0x1d, 0xde, 0x01, 0x1e, 0x26,
  0x08, 0x19, 0x32, 0x41, 0xc8, 0x92, 0x09, 0xc2, 0xa6, 0x6c, 0x10, 0xd8,
  0xe1, 0x1d, 0x26, 0x08, 0xdb, 0xb2, 0xa1, 0x19, 0xd4, 0xa1, 0x1d, 0xdc,
  0x21, 0x1e, 0xe4, 0x21, 0x1e, 0xe6, 0x21, 0x1e, 0xe8, 0xa1, 0x1e, 0xec,
  0xa1, 0x1e, 0x08, 0x4c, 0x10, 0x9a, 0x56, 0xd8, 0x20, 0x18, 0xf9, 0xb0,
  0xa1, 0x00, 0xf0, 0x01, 0xe0, 0xf4, 0x81, 0xac, 0x10, 0xf0, 0x13, 0xe4,
  0x96, 0x87, 0x94, 0x46, 0x37, 0x85, 0x16, 0x46, 0x56, 0x26, 0x07, 0x04,
  0x94, 0x15, 0x84, 0x55, 0x35, 0xf4, 0xc6, 0xf6, 0x26, 0x07, 0x15, 0x96,
  0xc7, 0xf6, 0x16, 0x46, 0x06, 0x04, 0x54, 0x25, 0x54, 0x97, 0xc6, 0x46,
  0x97, 0xe4, 0x46, 0x25, 0x97, 0x16, 0xe6, 0x76, 0xc6, 0x56, 0x96, 0xe4,
  0x46, 0x57, 0x26, 0x37, 0x57, 0x36, 0x46, 0x97, 0xf6, 0xe6, 0x16, 0x44,
  0x47, 0x27, 0x97, 0x26, 0x56, 0x47, 0x57, 0x36, 0x07, 0x04, 0x04, 0xa4,
  0xb5, 0x21, 0x30, 0x36, 0x20, 0x67, 0x00, 0x06, 0xc9, 0x1f, 0x10, 0x67,
  0x10, 0x07, 0xfd, 0xb0, 0xa1, 0x98, 0x07, 0x7e, 0x00, 0x00, 0x7f, 0x20,
  0x2d, 0x04, 0xfc, 0x0c, 0xb1, 0xbd, 0xcd, 0x95, 0xcd, 0xd1, 0x21, 0xa5,
  0xd1, 0x0d, 0xd5, 0x89, 0x95, 0x4d, 0xa1, 0x85, 0x91, 0x95, 0xc9, 0x01,
  0x01, 0x65, 0x05, 0x61, 0x55, 0x0d, 0xbd, 0xb1, 0xbd, 0xc9, 0x41, 0x85,
  0xe5, 0xb1, 0xbd, 0x85, 0x91, 0x01, 0x01, 0x55, 0x09, 0xd5, 0xa5, 0xb1,
  0xd1, 0x25, 0xb9, 0x51, 0xc9, 0xa5, 0x85, 0xb9, 0x9d, 0xb1, 0x95, 0x25,
  0xb9, 0xd1, 0x95, 0xc9, 0xcd, 0x95, 0x8d, 0xd1, 0xa5, 0xbd, 0xb9, 0x05,
  0xd1, 0xd1, 0xc9, 0xa5, 0x89, 0xd5, 0xd1, 0x95, 0xcd, 0x01, 0x01, 0x01,
  0x69, 0x4d, 0x10, 0x10, 0x53, 0xd8, 0x80, 0x9c, 0x41, 0x48, 0x24, 0x7f,
  0x40, 0x9c, 0x41, 0x1c, 0xf4, 0xc3, 0x86, 0xc2, 0x1d, 0x40, 0x02, 0x00,
  0x44, 0x82, 0xb0, 0x10, 0xf0, 0x33, 0xc4, 0xf6, 0x36, 0x57, 0x36, 0x47,
  0x87, 0x94, 0x46, 0x37, 0x85, 0x16, 0x46, 0x56, 0x26, 0x07, 0x04, 0x94,
  0x15, 0x84, 0x55, 0x35, 0xf4, 0xc6, 0xf6, 0x26, 0x07, 0x15, 0x96, 0xc7,
  0xf6, 0x16, 0x46, 0x06, 0x04, 0x54, 0x25, 0x54, 0x97, 0xc6, 0x46, 0x97,
  0xe4, 0x46, 0x25, 0x97, 0x16, 0xe6, 0x76, 0xc6, 0x56, 0x96, 0xe4, 0x46,
  0x57, 0x26, 0x37, 0x57, 0x36, 0x46, 0x97, 0xf6, 0xe6, 0x16, 0x44, 0x47,
  0x27, 0x97, 0x26, 0x56, 0x47, 0x57, 0x36, 0x07, 0x04, 0x04, 0xa4, 0xb5,
  0xa1, 0x90, 0x07, 0x92, 0x00, 0x00, 0x91, 0x20, 0x1b, 0x04, 0xfc, 0x34,
  0xa5, 0xcd, 0xcd, 0x4d, 0xa1, 0x85, 0x91, 0x95, 0xc9, 0x7d, 0x0d, 0x85,
  0xb5, 0x95, 0xc9, 0x85, 0x49, 0x85, 0xe5, 0x01, 0x01, 0x65, 0x05, 0x61,
  0x55, 0x0d, 0xbd, 0xb1, 0xbd, 0xc9, 0x41, 0x85, 0xe5, 0xb1, 0xbd, 0x85,
  0x91, 0x01, 0x01, 0x01, 0x69, 0x4d, 0x10, 0x90, 0x53, 0xd8, 0x60, 0x9c,
  0xc1, 0x49, 0x24, 0x7f, 0x10, 0x07, 0xfd, 0xb0, 0xa1, 0xa0, 0x07, 0x93,
  0x00, 0x00, 0x94, 0x20, 0x1b, 0x04, 0xfc, 0x34, 0xa5, 0xcd, 0xcd, 0x4d,
  0xa1, 0x85, 0x91, 0x95, 0xc9, 0x7d, 0x3d, 0x8d, 0x8d, 0xb1, 0xd5, 0xcd,
  0xa5, 0xbd, 0xb9, 0x01, 0x01, 0x65, 0x05, 0x61, 0x55, 0x0d, 0xbd, 0xb1,
  0xbd, 0xc9, 0x41, 0x85, 0xe5, 0xb1, 0xbd, 0x85, 0x91, 0x01, 0x01, 0x01,
  0x69, 0x6d, 0x28, 0xec, 0x41, 0x25, 0x00, 0x00, 0x25, 0x58, 0x05, 0xfc,
  0x48, 0x85, 0xe5, 0x9d, 0x95, 0xb9, 0x4d, 0xa1, 0x85, 0x91, 0x95, 0xc9,
  0x01, 0x01, 0x65, 0x05, 0x61, 0x61, 0x69, 0x6d, 0x20, 0xce, 0x80, 0x88,
  0x83, 0x7e, 0xd8, 0x50, 0xa8, 0x03, 0x4b, 0x00, 0x40, 0x4b, 0x10, 0x11,
  0x93, 0x0b, 0x73, 0x1b, 0x43, 0x2b, 0x9b, 0xa3, 0x61, 0xc6, 0xf6, 0x16,
  0x46, 0x37, 0x37, 0x41, 0x40, 0x50, 0x81, 0x45, 0x9a, 0xdb, 0x1c, 0xdd,
  0xdc, 0x04, 0x01, 0x49, 0x05, 0x12, 0x69, 0x6e, 0x74, 0x73, 0x13, 0x04,
  0x44, 0x15, 0x88, 0xd0, 0x95, 0xe1, 0x7d, 0x9d, 0xc9, 0x85, 0x91, 0x11,
  0xa1, 0x2b, 0xc3, 0xfb, 0x62, 0x7b, 0x0b, 0x23, 0x9b, 0x20, 0x20, 0xab,
  0x40, 0x84, 0xae, 0x0c, 0xef, 0xcb, 0xed, 0x4d, 0xae, 0x8d, 0x09, 0x5d,
  0x19, 0xde, 0xd7, 0x1c, 0xdd, 0x9b, 0x5c, 0x19, 0x8b, 0xba, 0x34, 0x37,
  0xba, 0xb9, 0x09, 0x02, 0xc2, 0x0a, 0x1b, 0xa4, 0x97, 0x80, 0x03, 0x98,
  0x88, 0x09, 0x99, 0x98, 0x09, 0x9a, 0xa8, 0x09, 0x9b, 0x20, 0x6e, 0x02,
  0x27, 0x72, 0x82, 0xd0, 0x89, 0x61, 0x27, 0x78, 0xa2, 0x0a, 0x1b, 0x9b,
  0x5d, 0x9b, 0x4b, 0x1a, 0x59, 0x99, 0x1b, 0xdd, 0x94, 0x20, 0xa8, 0x42,
  0x86, 0xe7, 0x62, 0x57, 0x26, 0x37, 0x97, 0xf6, 0xe6, 0x36, 0x25, 0x20,
  0x9a, 0x90, 0xe1, 0xb9, 0xd8, 0x85, 0xb1, 0xd9, 0x95, 0xc9, 0x4d, 0x09,
  0x8c, 0x3a, 0x64, 0x78, 0x2e, 0x73, 0x68, 0x61, 0x64, 0x65, 0x72, 0x4d,
  0x6f, 0x64, 0x65, 0x6c, 0x53, 0x82, 0xa4, 0x0c, 0x19, 0x9e, 0x8b, 0x5c,
  0xd9, 0xdc, 0x5b, 0x9d, 0xdc, 0x58, 0xd9, 0xdc, 0x94, 0x60, 0xab, 0x44,
  0x86, 0xe7, 0x42, 0x97, 0x07, 0x57, 0x16, 0xe4, 0xe6, 0xf6, 0x46, 0x17,
  0x46, 0x97, 0xf6, 0xe6, 0x36, 0x37, 0x45, 0x40, 0x07, 0x7b, 0xa8, 0x43,
  0x86, 0xe7, 0x52, 0xe6, 0x46, 0x27, 0x97, 0x07, 0xf5, 0x96, 0xe6, 0x46,
  0x37, 0x37, 0xe5, 0xd0, 0x07, 0x7f, 0x10, 0x09, 0x92, 0x40, 0x09, 0x95,
  0x68, 0x89, 0x2e, 0x64, 0x78, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
  0x72, 0x73, 0x53, 0x02, 0x9e, 0x00, 0x00, 0x00, 0x79, 0x18, 0x00, 0x00,
  0x55, 0x00, 0x00, 0x00, 0x33, 0x08, 0x80, 0x1c, 0xc4, 0xe1, 0x1c, 0x66,
  0x14, 0x01, 0x3d, 0x88, 0x43, 0x38, 0x84, 0xc3, 0x8c, 0x42, 0x80, 0x07,
  0x79, 0x78, 0x07, 0x73, 0x98, 0x71, 0x0c, 0xe6, 0x00, 0x0f, 0xed, 0x10,
  0x0e, 0xf4, 0x80, 0x0e, 0x33, 0x0c, 0x42, 0x1e, 0xc2, 0xc1, 0x1d, 0xce,
  0xa1, 0x1c, 0x66, 0x30, 0x05, 0x3d, 0x88, 0x43, 0x38, 0x84, 0x83, 0x1b,
  0xcc, 0x03, 0x3d, 0xc8, 0x43, 0x3d, 0x8c, 0x03, 0x3d, 0xcc, 0x78, 0x8c,
  0x74, 0x70, 0x07, 0x7b, 0x08, 0x07, 0x79, 0x48, 0x87, 0x70, 0x70, 0x07,
  0x7a, 0x70, 0x03, 0x76, 0x78, 0x87, 0x70, 0x20, 0x87, 0x19, 0xcc, 0x11,
  0x0e, 0xec, 0x90, 0x0e, 0xe1, 0x30, 0x0f, 0x6e, 0x30, 0x0f, 0xe3, 0xf0,
  0x0e, 0xf0, 0x50, 0x0e, 0x33, 0x10, 0xc4, 0x1d, 0xde, 0x21, 0x1c, 0xd8,
  0x21, 0x1d, 0xc2, 0x61, 0x1e, 0x66, 0x30, 0x89, 0x3b, 0xbc, 0x83, 0x3b,
  0xd0, 0x43, 0x39, 0xb4, 0x03, 0x3c, 0xbc, 0x83, 0x3c, 0x84, 0x03, 0x3b,
  0xcc, 0xf0, 0x14, 0x76, 0x60, 0x07, 0x7b, 0x68, 0x07, 0x37, 0x68, 0x87,
  0x72, 0x68, 0x07, 0x37, 0x80, 0x87, 0x70, 0x90, 0x87, 0x70, 0x60, 0x07,
  0x76, 0x28, 0x07, 0x76, 0xf8, 0x05, 0x76, 0x78, 0x87, 0x77, 0x80, 0x87,
  0x5f, 0x08, 0x87, 0x71, 0x18, 0x87, 0x72, 0x98, 0x87, 0x79, 0x98, 0x81,
  0x2c, 0xee, 0xf0, 0x0e, 0xee, 0xe0, 0x0e, 0xf5, 0xc0, 0x0e, 0xec, 0x30,
  0x03, 0x62, 0xc8, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c, 0xcc, 0xa1, 0x1c, 0xe4,
  0xa1, 0x1c, 0xdc, 0x61, 0x1c, 0xca, 0x21, 0x1c, 0xc4, 0x81, 0x1d, 0xca,
  0x61, 0x06, 0xd6, 0x90, 0x43, 0x39, 0xc8, 0x43, 0x39, 0x98, 0x43, 0x39,
  0xc8, 0x43, 0x39, 0xb8, 0xc3, 0x38, 0x94, 0x43, 0x38, 0x88, 0x03, 0x3b,
  0x94, 0xc3, 0x2f, 0xbc, 0x83, 0x3c, 0xfc, 0x82, 0x3b, 0xd4, 0x03, 0x3b,
  0xb0, 0xc3, 0x0c, 0xc4, 0x21, 0x07, 0x7c, 0x70, 0x03, 0x7a, 0x28, 0x87,
  0x76, 0x80, 0x87, 0x19, 0xca, 0xc3, 0x0e, 0xec, 0x60, 0x0f, 0xed, 0xe0,
  0x06, 0xec, 0xf0, 0x0e, 0xef, 0x00, 0x0f, 0x33, 0x22, 0x88, 0x1c, 0xf0,
  0xc1, 0x0d, 0xc8, 0x41, 0x1c, 0xce, 0xc1, 0x0d, 0xec, 0x21, 0x1c, 0xe4,
  0x81, 0x1d, 0xc2, 0x21, 0x1f, 0xde, 0xa1, 0x1e, 0xe8, 0x61, 0x06, 0x13,
  0x91, 0x03, 0x3e, 0xb8, 0x81, 0x38, 0xc8, 0x43, 0x39, 0x84, 0xc3, 0x3a,
  0xb8, 0x81, 0x38, 0xc8, 0x03, 0x00, 0x00, 0x00, 0x71, 0x20, 0x00, 0x00,
  0x04, 0x01, 0x00, 0x00, 0x05, 0xf0, 0x05, 0x7e, 0x41, 0x77, 0x7a, 0xfe,
  0x1e, 0xb2, 0xc3, 0x6d, 0x38, 0x10, 0x38, 0xab, 0x4e, 0xc3, 0x6d, 0x38,
  0xbb, 0x2c, 0x9f, 0xd2, 0xc3, 0xf4, 0x32, 0x10, 0x18, 0x2c, 0x01, 0x2f,
  0xf0, 0x0b, 0xba, 0xd3, 0xf3, 0xf7, 0x55, 0x1e, 0x86, 0x03, 0x81, 0xb3,
  0xea, 0x34, 0xdc, 0x86, 0xb3, 0xcb, 0xf2, 0x29, 0x3d, 0x4c, 0x2f, 0x03,
  0x81, 0xc1, 0x4a, 0x60, 0x85, 0xc0, 0x2f, 0xe8, 0xce, 0x23, 0xd3, 0xf4,
  0x29, 0x3a, 0x4c, 0x2e, 0xcb, 0x81, 0xc0, 0x6c, 0x10, 0x5b, 0x1d, 0xbe,
  0xd9, 0x6f, 0x39, 0x34, 0x9c, 0x67, 0xbf, 0xc3, 0x64, 0x20, 0xb0, 0x2a,
  0xac, 0xa7, 0xd9, 0xf4, 0xa4, 0x9b, 0x2a, 0x4f, 0x87, 0xdd, 0x67, 0x76,
  0x39, 0xe9, 0xa6, 0x97, 0xe5, 0xf3, 0xf2, 0x98, 0x9e, 0x7e, 0xbb, 0x83,
  0x74, 0xba, 0x3c, 0x2d, 0xae, 0xd3, 0xcb, 0x73, 0x20, 0x10, 0xa8, 0xad,
  0x03, 0x5a, 0x08, 0xfc, 0x86, 0xec, 0xf7, 0xbc, 0x3c, 0xa7, 0x23, 0xd3,
  0xf4, 0x61, 0x5d, 0x5c, 0x9e, 0xa2, 0xc3, 0xe4, 0xb2, 0x1c, 0x08, 0xcc,
  0x06, 0xb1, 0xd5, 0xe1, 0x9b, 0xfd, 0x96, 0x43, 0xc3, 0x79, 0xf6, 0x3b,
  0x4c, 0x06, 0x02, 0xab, 0xc2, 0x7a, 0x9a, 0x4d, 0x4f, 0xba, 0xa9, 0xf2,
  0x74, 0xd8, 0x7d, 0x66, 0x97, 0x93, 0x6e, 0x7a, 0x59, 0x3e, 0x2f, 0x8f,
  0xe9, 0xe9, 0xb7, 0x3b, 0x48, 0xa7, 0xcb, 0xd3, 0xe2, 0x3a, 0xbd, 0x3c,
  0x07, 0x02, 0x81, 0xda, 0x42, 0x80, 0x85, 0xc0, 0x6f, 0xc8, 0x7e, 0xcf,
  0xcb, 0x73, 0x3a, 0x32, 0x4d, 0x9f, 0xa2, 0xc3, 0xe4, 0xb2, 0x1c, 0x08,
  0xcc, 0x06, 0xb1, 0xd5, 0xe1, 0x9b, 0xfd, 0x96, 0x43, 0xc3, 0x79, 0xf6,
  0x3b, 0x4c, 0x06, 0x02, 0xab, 0xc2, 0x7a, 0x9a, 0x4d, 0x4f, 0xba, 0xa9,
  0xf2, 0x74, 0xd8, 0x7d, 0x66, 0x97, 0x93, 0x6e, 0x7a, 0x59, 0x3e, 0x2f,
  0x8f, 0xe9, 0xe9, 0xb7, 0x3b, 0x48, 0xa7, 0xcb, 0xd3, 0xe2, 0x3a, 0xbd,
  0x3c, 0x07, 0x02, 0x81, 0xda, 0x0a, 0x00, 0x83, 0xc0, 0x8f, 0x99, 0x76,
  0x97, 0xc3, 0xf2, 0x21, 0x3b, 0xdc, 0x86, 0x03, 0x81, 0xb3, 0xea, 0x34,
  0xdc, 0x86, 0xb3, 0xcb, 0xf2, 0x29, 0x3d, 0x4c, 0x2f, 0x03, 0x81, 0xc1,
  0x52, 0x60, 0x83, 0xc0, 0xaf, 0x99, 0x9e, 0xcf, 0xa7, 0xe8, 0x30, 0xb9,
  0x2c, 0xff, 0x0e, 0xc3, 0xed, 0xb2, 0x3c, 0x2c, 0x0d, 0xe7, 0x81, 0xc0,
  0x6c, 0x10, 0x5b, 0x1d, 0xbe, 0xd9, 0x6f, 0x39, 0x34, 0x9c, 0x67, 0xbf,
  0xc3, 0x64, 0x20, 0x10, 0xa8, 0xad, 0x05, 0x36, 0x08, 0xfc, 0x9a, 0xe9,
  0xf9, 0x7c, 0x8a, 0x0e, 0x93, 0xcb, 0xf2, 0xef, 0x73, 0x3c, 0x66, 0xd7,
  0xe7, 0xe9, 0xb7, 0x1b, 0x08, 0xcc, 0x06, 0xb1, 0xd5, 0xe1, 0x9b, 0xfd,
  0x96, 0x43, 0xc3, 0x79, 0xf6, 0x3b, 0x4c, 0x06, 0x02, 0x81, 0xda, 0x32,
  0xa8, 0x02, 0x3f, 0x69, 0x38, 0x7f, 0x2e, 0xbb, 0xa7, 0xe8, 0x30, 0xb9,
  0x2c, 0x07, 0x02, 0xb3, 0x41, 0x2c, 0x56, 0x6b, 0x26, 0xd4, 0x70, 0xf9,
  0xce, 0xe3, 0x03, 0x4d, 0xe3, 0x4c, 0xc0, 0x44, 0x84, 0x40, 0x33, 0x2c,
  0x84, 0x55, 0x40, 0xc3, 0xe5, 0x3b, 0x8f, 0x1f, 0x20, 0x0d, 0x10, 0x61,
  0x7e, 0x71, 0xdb, 0x26, 0xb2, 0x0d, 0x97, 0xef, 0x3c, 0xbe, 0x10, 0x50,
  0x45, 0x41, 0x44, 0xa5, 0x03, 0x0c, 0x25, 0x61, 0x00, 0x02, 0xe6, 0x17,
  0xb7, 0x6d, 0x21, 0xdb, 0x70, 0xf9, 0xce, 0xe3, 0x0b, 0x01, 0x55, 0x14,
  0x44, 0x54, 0x3a, 0xc0, 0x50, 0x12, 0x06, 0x20, 0x60, 0x3e, 0x72, 0xdb,
  0x76, 0x82, 0x06, 0xc3, 0xe5, 0x3b, 0x8f, 0x2f, 0x44, 0x04, 0x30, 0x11,
  0x21, 0xd0, 0x0c, 0x0b, 0xf1, 0x39, 0x51, 0x89, 0x04, 0xfe, 0x70, 0xf9,
  0x13, 0xf6, 0x10, 0x92, 0x1f, 0x02, 0xcd, 0xb0, 0x10, 0x86, 0xb2, 0x06,
  0xc3, 0xe5, 0x3b, 0x8f, 0x2f, 0x44, 0x04, 0x30, 0x11, 0x21, 0xd0, 0x0c,
  0x0b, 0xf1, 0x39, 0x51, 0x89, 0x04, 0xfe, 0xe1, 0x48, 0xd3, 0x02, 0x60,
  0x0e, 0x35, 0xf9, 0x45, 0x04, 0x30, 0x04, 0xb7, 0x19, 0x83, 0x36, 0x5c,
  0xbe, 0xf3, 0xf8, 0x42, 0x44, 0x00, 0x13, 0x11, 0x02, 0xcd, 0xb0, 0x10,
  0x5f, 0xe4, 0x30, 0x21, 0x01, 0x3c, 0x36, 0x01, 0x06, 0xc3, 0xe5, 0x3b,
  0x8f, 0x3f, 0x20, 0xd2, 0x03, 0x4c, 0xc2, 0xb1, 0x02, 0x98, 0xd4, 0x21,
  0x0c, 0xd1, 0x48, 0x88, 0xd3, 0x48, 0x3e, 0x72, 0xdb, 0x46, 0xb1, 0x0d,
  0x97, 0xef, 0x3c, 0xfe, 0x80, 0x48, 0x0f, 0x30, 0x09, 0xc7, 0x0a, 0x60,
  0x92, 0xd8, 0x0c, 0xc4, 0xe5, 0x23, 0xb7, 0x6d, 0x16, 0xce, 0x70, 0xf9,
  0xce, 0xe3, 0x0f, 0xce, 0x64, 0xfb, 0xc5, 0x6d, 0x9b, 0x83, 0x33, 0x5c,
  0xbe, 0xf3, 0xf8, 0x83, 0x33, 0xdd, 0x7e, 0x71, 0xdb, 0xb6, 0x71, 0x0d,
  0x97, 0xef, 0x3c, 0xbe, 0x41, 0x38, 0x0c, 0x31, 0x45, 0x98, 0xd8, 0x0c,
  0xc4, 0xe5, 0x23, 0xb7, 0x6d, 0x20, 0xcf, 0x70, 0xf9, 0xce, 0xe3, 0x23,
  0x46, 0xe3, 0x44, 0x44, 0x88, 0x4c, 0xd6, 0x41, 0x0d, 0x97, 0xef, 0x3c,
  0x3e, 0xd2, 0x48, 0x13, 0xd0, 0x08, 0x84, 0xd8, 0xf9, 0xc8, 0x6d, 0x9b,
  0xc6, 0x35, 0x5c, 0xbe, 0xf3, 0xf8, 0x48, 0x23, 0x4d, 0x40, 0x23, 0x10,
  0x62, 0x33, 0x10, 0x97, 0x8f, 0xdc, 0xb6, 0x91, 0x5c, 0xc3, 0xe5, 0x3b,
  0x8f, 0xef, 0x04, 0x09, 0x21, 0x4c, 0xad, 0x03, 0x3b, 0xd1, 0x32, 0xf8,
  0xc5, 0x6d, 0x1b, 0x07, 0x36, 0x5c, 0xbe, 0xf3, 0xf8, 0x4f, 0x84, 0x30,
  0xc8, 0x84, 0x54, 0x84, 0xd8, 0x0c, 0xc4, 0xe5, 0x23, 0xb7, 0x6d, 0x19,
  0xd7, 0x70, 0xf9, 0xce, 0xe3, 0x47, 0x80, 0xb5, 0x51, 0x45, 0x41, 0x44,
  0xa5, 0x03, 0x0c, 0x7e, 0x71, 0xdb, 0xf6, 0x70, 0x0d, 0x97, 0xef, 0x3c,
  0x7e, 0x04, 0x58, 0x1b, 0x55, 0x14, 0x44, 0x54, 0x3a, 0xc0, 0xe0, 0x23,
  0xb7, 0x6d, 0x12, 0xd5, 0x70, 0xf9, 0xce, 0xe3, 0x47, 0x00, 0xd6, 0x72,
  0x54, 0x14, 0x11, 0xcd, 0xe4, 0x17, 0xb7, 0x6d, 0x1e, 0xd4, 0x70, 0xf9,
  0xce, 0xe3, 0x4b, 0x00, 0xf3, 0x2c, 0x04, 0x18, 0x01, 0x83, 0x5f, 0xdc,
  0xb6, 0x7d, 0x54, 0xc3, 0xe5, 0x3b, 0x8f, 0x2f, 0x01, 0xcc, 0xb3, 0x10,
  0x25, 0x51, 0x11, 0x8b, 0x5f, 0xdc, 0xb6, 0x8d, 0x48, 0xc3, 0xe5, 0x3b,
  0x8f, 0x3f, 0x11, 0xd1, 0x84, 0x00, 0x11, 0xe6, 0x17, 0xb7, 0x6d, 0x18,
  0xd6, 0x70, 0xf9, 0xce, 0xe3, 0x4f, 0xc4, 0x35, 0x51, 0x11, 0xc1, 0x4e,
  0x4e, 0x44, 0xf8, 0xc5, 0x6d, 0xdb, 0x85, 0x18, 0x0c, 0x97, 0xef, 0x3c,
  0xfe, 0x14, 0x01, 0x02, 0xb1, 0x02, 0x98, 0x2f, 0x4d, 0x11, 0x25, 0x4c,
  0x3e, 0xe7, 0x2c, 0x4e, 0x94, 0x02, 0xd8, 0xe2, 0x00, 0x83, 0x35, 0x3c,
  0xc3, 0xe5, 0x3b, 0x8f, 0x4f, 0x35, 0x40, 0x84, 0xf9, 0xc5, 0x6d, 0x1b,
  0xc4, 0x36, 0x5c, 0xbe, 0xf3, 0xf8, 0x96, 0x13, 0x2d, 0xc3, 0x0a, 0x60,
  0x1d, 0x12, 0x11, 0xc2, 0x84, 0x38, 0x8d, 0x5f, 0xdc, 0xb6, 0x45, 0x60,
  0xc3, 0xe5, 0x3b, 0x8f, 0x6f, 0x39, 0xd1, 0x32, 0xac, 0x00, 0x86, 0x46,
  0x88, 0x81, 0x34, 0x7e, 0x71, 0xdb, 0x56, 0x72, 0x0d, 0x97, 0xef, 0x3c,
  0xbe, 0xe5, 0x44, 0xcb, 0xd0, 0x3a, 0x68, 0x90, 0x10, 0xc2, 0xe4, 0x17,
  0xb7, 0x6d, 0x03, 0x4e, 0x11, 0x01, 0x0c, 0xc1, 0x6d, 0xff, 0x42, 0x18,
  0x80, 0x80, 0x59, 0x41, 0xb4, 0x2c, 0x15, 0xe3, 0x2f, 0x48, 0x41, 0x4c,
  0x08, 0x43, 0xf8, 0x44, 0x33, 0x18, 0xc1, 0xb4, 0x2c, 0x15, 0xe3, 0x2f,
  0x48, 0x41, 0x4c, 0x08, 0x43, 0xf8, 0xd2, 0x04, 0x44, 0x13, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x49, 0x4c, 0x44, 0x4e, 0x2c, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x25, 0x00, 0x53, 0x68, 0x61, 0x64, 0x65, 0x72, 0x73, 0x5c,
  0x50, 0x44, 0x42, 0x5c, 0x52, 0x61, 0x79, 0x74, 0x72, 0x61, 0x63, 0x69,
  0x6e, 0x67, 0x53, 0x68, 0x61, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x6f,
  0x72, 0x2e, 0x70, 0x64, 0x62, 0x00, 0x00, 0x00, 0x48, 0x41, 0x53, 0x48,
  0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xef, 0xaa, 0x5b, 0x38,
  0x19, 0x06, 0x42, 0x7e, 0xef, 0x0f, 0x8d, 0x3e, 0x23, 0x5a, 0x22, 0x6d,
  0x44, 0x58, 0x49, 0x4c, 0xb8, 0x50, 0x00, 0x00, 0x67, 0x00, 0x06, 0x00,
  0x2e, 0x14, 0x00, 0x00, 0x44, 0x58, 0x49, 0x4c, 0x07, 0x01, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0xa0, 0x50, 0x00, 0x00, 0x42, 0x43, 0xc0, 0xde,
  0x21, 0x0c, 0x00, 0x00, 0x25, 0x14, 0x00, 0x00, 0x0b, 0x82, 0x20, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x07, 0x81, 0x23, 0x91,
  0x41, 0xc8, 0x04, 0x49, 0x06, 0x10, 0x32, 0x39, 0x92, 0x01, 0x84, 0x0c,
  0x25, 0x05, 0x08, 0x19, 0x1e, 0x04, 0x8b, 0x62, 0x80, 0x1c, 0x45, 0x02,
  0x42, 0x92, 0x0b, 0x42, 0xe4, 0x10, 0x32, 0x14, 0x38, 0x08, 0x18, 0x4b,
  0x0a, 0x32, 0x72, 0x88, 0x48, 0x90, 0x14, 0x20, 0x43, 0x46, 0x88, 0xa5,
  0x00, 0x19, 0x32, 0x42, 0xe4, 0x48, 0x0e, 0x90, 0x91, 0x23, 0xc4, 0x50,
  0x41, 0x51, 0x81, 0x8c, 0xe1, 0x83, 0xe5, 0x8a, 0x04, 0x39, 0x46, 0x06,
  0x51, 0x18, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x1b, 0x88, 0x40, 0x00,
  0x96, 0x0d, 0x84, 0xf0, 0xff, 0xff, 0xff, 0xff, 0x03, 0x20, 0x6d, 0x20,
  0x86, 0x00, 0x48, 0x36, 0x18, 0x84, 0x00, 0x2c, 0x40, 0xb5, 0xc1, 0x28,
  0x02, 0x20, 0x01, 0x96, 0x0d, 0x86, 0xf1, 0xff, 0xff, 0xff, 0xff, 0x03,
  0x20, 0x01, 0xd4, 0x06, 0xe3, 0xf8, 0xff, 0xff, 0xff, 0xff, 0x01, 0x90,
  0x80, 0x6a, 0x83, 0x81, 0xfc, 0xff, 0xff, 0xff, 0xff, 0x00, 0x44, 0x80,
  0xb4, 0x81, 0x48, 0x20, 0xe0, 0x0c, 0x00, 0x00, 0x49, 0x18, 0x00, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x13, 0x84, 0x40, 0x98, 0x10, 0x08, 0x13, 0x86,
  0x81, 0x10, 0x26, 0x0c, 0x05, 0x21, 0x4c, 0x10, 0x0a, 0x61, 0x42, 0x60,
  0x4c, 0x08, 0x8e, 0x09, 0x01, 0x32, 0x21, 0x48, 0x00, 0x00, 0x00, 0x00,
  0x89, 0x20, 0x00, 0x00, 0x89, 0x00, 0x00, 0x00, 0x32, 0x22, 0xc8, 0x09,
  0x20, 0x64, 0x85, 0x04, 0x93, 0x23, 0xa4, 0x84, 0x04, 0x93, 0x23, 0xe3,
  0x84, 0xa1, 0x90, 0x14, 0x12, 0x4c, 0x8e, 0x8c, 0x0b, 0x84, 0xe4, 0x4c,
  0x10, 0xdc, 0xc2, 0x1c, 0x01, 0x42, 0x80, 0x7b, 0x86, 0xcb, 0x9f, 0xb0,
  0x87, 0x90, 0xfc, 0x10, 0x68, 0x86, 0x85, 0x40, 0x41, 0x80, 0x04, 0x33,
  0x00, 0xc3, 0x08, 0x04, 0x91, 0x04, 0x85, 0x61, 0x84, 0x81, 0x98, 0x23,
  0x00, 0x83, 0x03, 0x83, 0xc3, 0x91, 0xa6, 0x05, 0xc0, 0x1c, 0x6a, 0xf2,
  0xa5, 0x29, 0xa2, 0x84, 0xc9, 0xff, 0x22, 0x80, 0x21, 0x38, 0xa7, 0x91,
  0x26, 0xa0, 0x99, 0x24, 0xe4, 0x18, 0x0c, 0x06, 0x83, 0xa1, 0x50, 0x28,
  0x1c, 0x10, 0x08, 0x04, 0x02, 0x71, 0xd2, 0xe1, 0x48, 0xd3, 0x02, 0x60,
  0x0e, 0x35, 0xf9, 0x45, 0x04, 0x30, 0x04, 0xb7, 0xa1, 0x20, 0x41, 0x8a,
  0x11, 0x80, 0x39, 0x02, 0x50, 0x28, 0x03, 0xa3, 0x11, 0x20, 0x47, 0x09,
  0x18, 0x04, 0x39, 0x45, 0x9a, 0x22, 0x4a, 0x98, 0xfc, 0x15, 0xc0, 0x90,
  0x70, 0x38, 0xdc, 0x24, 0x4d, 0x11, 0x25, 0x4c, 0x3e, 0xe7, 0x2c, 0x4e,
  0x94, 0x02, 0xd8, 0xe2, 0x00, 0x03, 0x22, 0x0e, 0x08, 0x89, 0x84, 0x26,
  0xc3, 0x08, 0x02, 0x71, 0x6c, 0x20, 0x4d, 0x11, 0x25, 0x4c, 0xfe, 0x46,
  0x21, 0xcb, 0x24, 0x36, 0x6d, 0x84, 0x00, 0x8d, 0xb1, 0x10, 0x62, 0x33,
  0x11, 0x91, 0x44, 0x08, 0x13, 0xe2, 0x34, 0xda, 0x34, 0x45, 0x48, 0x40,
  0x4d, 0x84, 0x84, 0x82, 0x0a, 0x59, 0xca, 0xc0, 0xa0, 0x5c, 0x08, 0x53,
  0x04, 0x06, 0x85, 0x34, 0x73, 0x04, 0x41, 0x29, 0x04, 0x08, 0x04, 0x87,
  0x43, 0x9d, 0x32, 0x10, 0x10, 0x04, 0xfa, 0x14, 0x84, 0x80, 0x20, 0x10,
  0x08, 0x04, 0x02, 0x81, 0x42, 0x37, 0x0d, 0x97, 0x3f, 0x61, 0x0f, 0x21,
  0xf9, 0x2b, 0x21, 0xad, 0xc4, 0xe4, 0x23, 0xb7, 0x8d, 0x0a, 0x04, 0x02,
  0x81, 0x40, 0x94, 0x63, 0x84, 0x10, 0x20, 0x10, 0x00, 0x04, 0x91, 0xca,
  0x40, 0x40, 0x00, 0xc8, 0x54, 0x04, 0x02, 0x82, 0x50, 0x65, 0x40, 0x20,
  0x00, 0xa4, 0x2a, 0x04, 0x01, 0x41, 0x20, 0x10, 0xab, 0x18, 0x04, 0x04,
  0x81, 0x40, 0x20, 0x90, 0xab, 0x44, 0x0c, 0x84, 0x00, 0x81, 0x40, 0x20,
  0x10, 0x04, 0x02, 0x81, 0x40, 0x20, 0x10, 0x08, 0x14, 0x82, 0x95, 0x85,
  0x81, 0x10, 0x20, 0x10, 0x08, 0x02, 0x81, 0x40, 0x00, 0x90, 0xec, 0xa6,
  0xe1, 0xf2, 0x27, 0xec, 0x21, 0x24, 0x7f, 0x25, 0xa4, 0x95, 0x98, 0xfc,
  0xe2, 0xb6, 0x51, 0x41, 0x20, 0x10, 0x08, 0x88, 0x72, 0xd0, 0x10, 0x02,
  0x04, 0x02, 0x80, 0xa0, 0x5a, 0x11, 0x10, 0x08, 0xba, 0x15, 0x89, 0x86,
  0x10, 0x08, 0x08, 0x04, 0x02, 0x01, 0x81, 0x40, 0x10, 0x08, 0x04, 0x02,
  0x81, 0x40, 0xa0, 0x5c, 0x61, 0x68, 0x08, 0x81, 0x80, 0x40, 0x20, 0x10,
  0x10, 0x08, 0x04, 0x81, 0x76, 0x45, 0x60, 0x20, 0xa8, 0x77, 0xd4, 0x70,
  0xf9, 0x13, 0xf6, 0x10, 0x92, 0xcf, 0x6d, 0x54, 0xb1, 0x12, 0x93, 0x8f,
  0xdc, 0x36, 0x22, 0x10, 0x08, 0x04, 0xa2, 0x10, 0x3f, 0x84, 0x00, 0x41,
  0xc0, 0xa3, 0x86, 0xcb, 0x9f, 0xb0, 0x87, 0x90, 0x7c, 0x6e, 0xa3, 0x8a,
  0x95, 0x98, 0xfc, 0xe2, 0xb6, 0x11, 0x41, 0x20, 0x10, 0x08, 0x85, 0x10,
  0x22, 0x04, 0x08, 0x1a, 0x96, 0x82, 0x80, 0x20, 0x10, 0x08, 0x54, 0x2c,
  0x04, 0x01, 0x81, 0x00, 0xd0, 0xf1, 0xb6, 0xe1, 0xf2, 0x27, 0xec, 0x21,
  0x24, 0x7f, 0x25, 0x24, 0x87, 0x8a, 0x04, 0x22, 0x8d, 0x9c, 0x87, 0x88,
  0x26, 0x84, 0x90, 0x90, 0x80, 0x40, 0x14, 0x42, 0x80, 0x10, 0x24, 0x49,
  0x59, 0x06, 0x01, 0x42, 0x40, 0xcc, 0x32, 0x08, 0x10, 0x0a, 0x72, 0x0e,
  0x04, 0xdc, 0x24, 0x4d, 0x11, 0x25, 0x4c, 0x3e, 0x0b, 0x30, 0xcf, 0x42,
  0x44, 0xec, 0x04, 0x4c, 0x04, 0x0a, 0x10, 0x14, 0xa5, 0x03, 0x21, 0xa6,
  0x00, 0xa8, 0x02, 0x00, 0x13, 0x14, 0x72, 0xc0, 0x87, 0x74, 0x60, 0x87,
  0x36, 0x68, 0x87, 0x79, 0x68, 0x03, 0x72, 0xc0, 0x87, 0x0d, 0xaf, 0x50,
  0x0e, 0x6d, 0xd0, 0x0e, 0x7a, 0x50, 0x0e, 0x6d, 0x00, 0x0f, 0x7a, 0x30,
  0x07, 0x72, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x71, 0xa0,
  0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x78, 0xa0, 0x07, 0x73, 0x20,
  0x07, 0x6d, 0x90, 0x0e, 0x71, 0x60, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0,
  0x06, 0xe9, 0x30, 0x07, 0x72, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90,
  0x0e, 0x76, 0x40, 0x07, 0x7a, 0x60, 0x07, 0x74, 0xd0, 0x06, 0xe6, 0x10,
  0x07, 0x76, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x60, 0x0e, 0x73, 0x20,
  0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe6, 0x60, 0x07, 0x74, 0xa0,
  0x07, 0x76, 0x40, 0x07, 0x6d, 0xe0, 0x0e, 0x78, 0xa0, 0x07, 0x71, 0x60,
  0x07, 0x7a, 0x30, 0x07, 0x72, 0xa0, 0x07, 0x76, 0x40, 0x07, 0x3a, 0x0f,
  0x84, 0x90, 0x21, 0x23, 0x45, 0x44, 0x00, 0xca, 0x00, 0x80, 0x29, 0x03,
  0x00, 0xa6, 0x0c, 0x00, 0x98, 0x2a, 0x00, 0x80, 0x21, 0x8f, 0x03, 0x04,
  0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x1e, 0x07,
  0x08, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x3c,
  0x10, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c,
  0x79, 0x30, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x18, 0xf2, 0x60, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x30, 0xe4, 0xc1, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x60, 0xc8, 0xa3, 0x01, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xc0, 0x90, 0x47, 0x03, 0x00, 0xa0, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x80, 0x21, 0x4f, 0x07, 0x04, 0x80, 0x01, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x9e, 0x0f, 0x08, 0x00, 0x03,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x3c, 0x61, 0x00, 0x04,
  0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x1e, 0x32,
  0x00, 0x02, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x21,
  0x8f, 0x19, 0x00, 0x01, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xc0, 0x90, 0xc7, 0x0c, 0x80, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x60, 0xc8, 0x83, 0x06, 0x40, 0x00, 0x1c, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x30, 0xe4, 0x51, 0x03, 0x20, 0x00, 0x0c, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0xf2, 0xa8, 0x01, 0x10, 0x00,
  0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x79, 0xd8, 0x00,
  0x08, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x3c,
  0x6e, 0x00, 0x04, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x43, 0x1e, 0x38, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x80, 0x21, 0x8f, 0x1c, 0x00, 0x01, 0x20, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xc0, 0x90, 0xa7, 0x0e, 0x80, 0x00, 0x38, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xc8, 0x73, 0x07, 0x40, 0x00, 0x18,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0xe4, 0xb9, 0x03, 0x20,
  0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0xf2, 0xdc,
  0x01, 0x10, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c,
  0x79, 0xee, 0x00, 0x08, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x86, 0x3c, 0x79, 0x00, 0x04, 0xc0, 0x01, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x43, 0x9e, 0x3d, 0x00, 0x02, 0xe0, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x80, 0x21, 0x4f, 0x1f, 0x00, 0x01, 0x80, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x90, 0x07, 0x14, 0x80, 0x00,
  0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xc8, 0x33, 0x0a,
  0x40, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0xe4,
  0x29, 0x05, 0x20, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x18, 0xf2, 0x9c, 0x02, 0x10, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x0c, 0x79, 0x4e, 0x01, 0x08, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x86, 0x3c, 0xaa, 0x00, 0x04, 0x80, 0x01, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x1e, 0x56, 0x00, 0x02, 0xe0,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x21, 0x8f, 0x2b, 0x00,
  0x01, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x16, 0x08,
  0x0f, 0x00, 0x00, 0x00, 0x32, 0x1e, 0x98, 0x18, 0x19, 0x11, 0x4c, 0x90,
  0x8c, 0x09, 0x26, 0x47, 0xc6, 0x04, 0x43, 0x42, 0x94, 0x40, 0x39, 0x14,
  0xc3, 0x08, 0x40, 0x81, 0x1a, 0x14, 0x41, 0x19, 0x14, 0x44, 0x49, 0x14,
  0x60, 0x40, 0x29, 0x14, 0x45, 0x59, 0x50, 0xa3, 0x00, 0x01, 0x01, 0x41,
  0x11, 0x46, 0x00, 0x48, 0x6a, 0x3b, 0x00, 0xb0, 0x1d, 0x04, 0xd8, 0x0e,
  0x04, 0x00, 0x00, 0x00, 0x79, 0x18, 0x00, 0x00, 0x10, 0x01, 0x00, 0x00,
  0x1a, 0x03, 0x4c, 0x90, 0x46, 0x02, 0x13, 0xc4, 0x8e, 0x0c, 0x6f, 0xec,
  0xed, 0x4d, 0x0c, 0x24, 0xc6, 0xe5, 0xc6, 0x45, 0x66, 0x06, 0x06, 0xc7,
  0xe5, 0x06, 0x04, 0xc5, 0x26, 0xa7, 0xac, 0x86, 0xa6, 0x4c, 0x26, 0x07,
  0x26, 0x65, 0x43, 0x10, 0x4c, 0x10, 0x90, 0x34, 0x98, 0x20, 0x20, 0x6a,
  0xb0, 0x41, 0x18, 0x08, 0x0e, 0x6c, 0x69, 0x62, 0x13, 0x04, 0x64, 0x0d,
  0x36, 0x0c, 0xc6, 0x41, 0x4c, 0x10, 0x10, 0x36, 0x98, 0x20, 0x2c, 0x03,
  0x0f, 0x33, 0xb9, 0xb0, 0xb6, 0xb2, 0x21, 0xa1, 0x09, 0x02, 0xd2, 0x06,
  0x1b, 0x90, 0x44, 0x59, 0x92, 0x64, 0x60, 0x80, 0x0d, 0x41, 0x33, 0x41,
  0x90, 0x05, 0x3c, 0xa0, 0x12, 0xe4, 0x96, 0x36, 0xf7, 0x36, 0xc4, 0x16,
  0xd6, 0x06, 0xb7, 0x01, 0x49, 0x1e, 0x28, 0x49, 0x86, 0x04, 0x98, 0x20,
  0xc8, 0x42, 0x1e, 0x70, 0x61, 0x4a, 0x73, 0x2b, 0x0b, 0x93, 0x1b, 0x62,
  0x0b, 0x6b, 0x83, 0xdb, 0x80, 0x0c, 0xd2, 0x94, 0x0c, 0x43, 0x02, 0x4c,
  0x10, 0x10, 0x37, 0x98, 0x20, 0xc8, 0x82, 0x1e, 0x30, 0x09, 0x72, 0x4b,
  0x9b, 0x7b, 0xbb, 0x92, 0x0b, 0x83, 0x9b, 0x20, 0x20, 0x6f, 0xb0, 0x01,
  0xa9, 0xac, 0x2b, 0xc1, 0x86, 0x04, 0xd8, 0x30, 0x44, 0x54, 0xb6, 0x81,
  0x00, 0x00, 0x47, 0x9b, 0x20, 0x44, 0xc6, 0x06, 0x60, 0xc3, 0x30, 0x74,
  0xdd, 0x86, 0xc0, 0x9b, 0x20, 0x64, 0xc7, 0x86, 0xa1, 0xea, 0xba, 0x0d,
  0x43, 0xd2, 0x75, 0x1b, 0x06, 0x2f, 0x0c, 0xc4, 0x60, 0x82, 0x90, 0x21,
  0x13, 0x84, 0x2c, 0x99, 0x20, 0x6c, 0xca, 0x06, 0xc1, 0x0b, 0x83, 0x09,
  0xc2, 0xb6, 0x6c, 0x68, 0x06, 0xee, 0x03, 0x83, 0x31, 0x20, 0x83, 0x31,
  0x28, 0x83, 0x31, 0x30, 0x83, 0x33, 0x40, 0x83, 0x33, 0x20, 0x30, 0x41,
  0x68, 0xec, 0x60, 0x83, 0x90, 0xac, 0xc1, 0x86, 0x02, 0x50, 0x03, 0x60,
  0x63, 0x03, 0xb2, 0x42, 0xc0, 0x4f, 0x90, 0x5b, 0x1e, 0x52, 0x1a, 0xdd,
  0x14, 0x5a, 0x18, 0x59, 0x99, 0x1c, 0x10, 0x50, 0x56, 0x10, 0x56, 0xd5,
  0xd0, 0x1b, 0xdb, 0x9b, 0x1c, 0x54, 0x58, 0x1e, 0xdb, 0x5b, 0x18, 0x19,
  0x10, 0x50, 0x95, 0x50, 0x5d, 0x1a, 0x1b, 0x5d, 0x92, 0x1b, 0x95, 0x5c,
  0x5a, 0x98, 0xdb, 0x19, 0x5b, 0x59, 0x92, 0x1b, 0x5d, 0x99, 0xdc, 0x5c,
  0xd9, 0x18, 0x5d, 0xda, 0x9b, 0x5b, 0x10, 0x1d, 0x9d, 0x5c, 0x9a, 0x58,
  0x1d, 0x5d, 0xd9, 0x1c, 0x10, 0x10, 0x90, 0xd6, 0x04, 0x01, 0x81, 0x83,
  0x09, 0x02, 0x12, 0x07, 0x13, 0x04, 0x44, 0x0e, 0x26, 0x08, 0xc8, 0x1c,
  0x6c, 0x08, 0x92, 0x0d, 0xc8, 0x1b, 0xc0, 0xc1, 0x11, 0x07, 0xc4, 0x1b,
  0xc8, 0xc1, 0x1c, 0x6c, 0x28, 0xca, 0xc0, 0x0d, 0x00, 0x80, 0x0e, 0x48,
  0x0b, 0x01, 0x3f, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x73, 0x74, 0x48, 0x69,
  0x74, 0x43, 0x75, 0x62, 0x65, 0x53, 0x68, 0x61, 0x64, 0x65, 0x72, 0x40,
  0x40, 0x59, 0x41, 0x58, 0x55, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x50, 0x61,
  0x79, 0x6c, 0x6f, 0x61, 0x64, 0x40, 0x40, 0x55, 0x42, 0x75, 0x69, 0x6c,
  0x74, 0x49, 0x6e, 0x54, 0x72, 0x69, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x49,
  0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41,
  0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x40, 0x40, 0x40,
  0x5a, 0x13, 0x04, 0x84, 0x0e, 0x36, 0x20, 0x6f, 0x70, 0x07, 0x47, 0x1c,
  0x10, 0x6f, 0x20, 0x07, 0x73, 0xb0, 0xa1, 0x00, 0x03, 0x3b, 0x00, 0x00,
  0x3c, 0x20, 0x2c, 0x04, 0xfc, 0x0c, 0xb1, 0xbd, 0xcd, 0x95, 0xcd, 0xd1,
  0x21, 0xa5, 0xd1, 0x4d, 0xa1, 0x85, 0x91, 0x95, 0xc9, 0x01, 0x01, 0x65,
  0x05, 0x61, 0x55, 0x0d, 0xbd, 0xb1, 0xbd, 0xc9, 0x41, 0x85, 0xe5, 0xb1,
  0xbd, 0x85, 0x91, 0x01, 0x01, 0x55, 0x09, 0xd5, 0xa5, 0xb1, 0xd1, 0x25,
  0xb9, 0x51, 0xc9, 0xa5, 0x85, 0xb9, 0x9d, 0xb1, 0x95, 0x25, 0xb9, 0xd1,
  0x95, 0xc9, 0xcd, 0x95, 0x8d, 0xd1, 0xa5, 0xbd, 0xb9, 0x05, 0xd1, 0xd1,
  0xc9, 0xa5, 0x89, 0xd5, 0xd1, 0x95, 0xcd, 0x01, 0x01, 0x01, 0x69, 0x6d,
  0x28, 0xc8, 0x40, 0x0f, 0x00, 0x00, 0x0f, 0xc8, 0x06, 0x01, 0x3f, 0x4d,
  0x69, 0x73, 0x73, 0x53, 0x68, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x43, 0x61,
  0x6d, 0x65, 0x72, 0x61, 0x52, 0x61, 0x79, 0x40, 0x40, 0x59, 0x41, 0x58,
  0x55, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
  0x64, 0x40, 0x40, 0x40, 0x5a, 0x13, 0x04, 0xa4, 0x0e, 0x36, 0x18, 0x6f,
  0xd0, 0x07, 0x47, 0x1c, 0xc8, 0xc1, 0x1c, 0x6c, 0x28, 0xcc, 0x80, 0x0f,
  0x00, 0xc0, 0x0f, 0xc8, 0x06, 0x01, 0x3f, 0x4d, 0x69, 0x73, 0x73, 0x53,
  0x68, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x4f, 0x63, 0x63, 0x6c, 0x75, 0x73,
  0x69, 0x6f, 0x6e, 0x40, 0x40, 0x59, 0x41, 0x58, 0x55, 0x43, 0x6f, 0x6c,
  0x6f, 0x72, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x40, 0x40, 0x40,
  0x5a, 0x1b, 0x0a, 0x34, 0x00, 0x05, 0x00, 0xf0, 0x03, 0x56, 0x01, 0x3f,
  0x52, 0x61, 0x79, 0x67, 0x65, 0x6e, 0x53, 0x68, 0x61, 0x64, 0x65, 0x72,
  0x40, 0x40, 0x59, 0x41, 0x58, 0x58, 0x5a, 0x1b, 0x88, 0x37, 0x20, 0xe4,
  0x60, 0x0e, 0x36, 0x14, 0x9c, 0x28, 0x00, 0xc0, 0x28, 0xf0, 0x79, 0x6b,
  0x73, 0x4b, 0x83, 0x7b, 0xa3, 0x2b, 0x73, 0xa3, 0x03, 0x19, 0x43, 0x0b,
  0x93, 0x63, 0x34, 0x95, 0xd6, 0x06, 0xc7, 0x56, 0x06, 0x32, 0xf4, 0x32,
  0xb4, 0xb2, 0x02, 0x42, 0x25, 0x14, 0x14, 0xb4, 0x21, 0x30, 0x85, 0x09,
  0x42, 0x73, 0x07, 0x1b, 0x86, 0x52, 0x38, 0x05, 0x54, 0xd8, 0x30, 0xa4,
  0x42, 0x2a, 0xa0, 0x02, 0x87, 0x34, 0x37, 0xba, 0x0d, 0xc3, 0x2a, 0xa4,
  0x02, 0x2a, 0x6c, 0x18, 0x58, 0x81, 0x15, 0x50, 0x81, 0x6e, 0x10, 0xf0,
  0x43, 0x25, 0x17, 0x36, 0x56, 0x26, 0x15, 0x46, 0x96, 0x16, 0xe6, 0x36,
  0x56, 0x26, 0x15, 0x96, 0x07, 0x04, 0x94, 0x15, 0x84, 0x55, 0x25, 0x15,
  0x96, 0x07, 0x04, 0x54, 0x35, 0xf4, 0xc6, 0xf6, 0x26, 0x07, 0x15, 0x96,
  0xc7, 0xf6, 0x16, 0x46, 0x06, 0x04, 0x04, 0xa4, 0xb5, 0x42, 0x78, 0x05,
  0x57, 0x20, 0x1e, 0x04, 0xfc, 0x50, 0xc9, 0x85, 0x8d, 0x95, 0x49, 0x85,
  0x91, 0xa5, 0x85, 0xb9, 0x8d, 0x95, 0x49, 0x85, 0xe5, 0x01, 0x01, 0x65,
  0x05, 0x61, 0x55, 0x49, 0x85, 0xe5, 0x01, 0x01, 0x55, 0x0d, 0xbd, 0xb1,
  0xbd, 0xc9, 0x41, 0x85, 0xe5, 0xb1, 0xbd, 0x85, 0x91, 0x01, 0x01, 0x01,
  0x69, 0xe9, 0x80, 0x94, 0xc0, 0x85, 0xe5, 0xb1, 0xbd, 0x85, 0x91, 0xad,
  0x18, 0x62, 0xe1, 0x15, 0x60, 0x61, 0x43, 0x10, 0x0b, 0x2b, 0x84, 0x59,
  0x70, 0x85, 0x15, 0x03, 0x2d, 0xcc, 0x02, 0x2c, 0x6c, 0x08, 0x68, 0x61,
  0x85, 0x60, 0x0b, 0xae, 0xb0, 0x62, 0xb8, 0x05, 0x5b, 0x80, 0x85, 0x0d,
  0xc1, 0x2d, 0x54, 0x61, 0x63, 0xb3, 0x6b, 0x73, 0x49, 0x23, 0x2b, 0x73,
  0xa3, 0x9b, 0x12, 0x04, 0x55, 0xc8, 0xf0, 0x5c, 0xec, 0xca, 0xe4, 0xe6,
  0xd2, 0xde, 0xdc, 0xa6, 0x04, 0x44, 0x13, 0x32, 0x3c, 0x17, 0xbb, 0x30,
  0x36, 0xbb, 0x32, 0xb9, 0x29, 0x01, 0x51, 0x87, 0x0c, 0xcf, 0x65, 0x0e,
  0x2d, 0x8c, 0xac, 0x4c, 0xae, 0xe9, 0x8d, 0xac, 0x8c, 0x6d, 0x4a, 0x70,
  0x94, 0x21, 0xc3, 0x73, 0x91, 0x2b, 0x9b, 0x7b, 0xab, 0x93, 0x1b, 0x2b,
  0x9b, 0x9b, 0x12, 0x68, 0x95, 0xc8, 0xf0, 0x5c, 0xe8, 0xf2, 0xe0, 0xca,
  0x82, 0xdc, 0xdc, 0xde, 0xe8, 0xc2, 0xe8, 0xd2, 0xde, 0xdc, 0xe6, 0xa6,
  0x04, 0x68, 0x50, 0x87, 0x0c, 0xcf, 0xa5, 0xcc, 0x8d, 0x4e, 0x2e, 0x0f,
  0xea, 0x2d, 0xcd, 0x8d, 0x6e, 0x6e, 0xca, 0xc1, 0x06, 0x74, 0x80, 0x07,
  0x7a, 0xe0, 0x07, 0xa0, 0x30, 0x0a, 0x00, 0x00, 0x79, 0x18, 0x00, 0x00,
  0x55, 0x00, 0x00, 0x00, 0x33, 0x08, 0x80, 0x1c, 0xc4, 0xe1, 0x1c, 0x66,
  0x14, 0x01, 0x3d, 0x88, 0x43, 0x38, 0x84, 0xc3, 0x8c, 0x42, 0x80, 0x07,
  0x79, 0x78, 0x07, 0x73, 0x98, 0x71, 0x0c, 0xe6, 0x00, 0x0f, 0xed, 0x10,
  0x0e, 0xf4, 0x80, 0x0e, 0x33, 0x0c, 0x42, 0x1e, 0xc2, 0xc1, 0x1d, 0xce,
  0xa1, 0x1c, 0x66, 0x30, 0x05, 0x3d, 0x88, 0x43, 0x38, 0x84, 0x83, 0x1b,
  0xcc, 0x03, 0x3d, 0xc8, 0x43, 0x3d, 0x8c, 0x03, 0x3d, 0xcc, 0x78, 0x8c,
  0x74, 0x70, 0x07, 0x7b, 0x08, 0x07, 0x79, 0x48, 0x87, 0x70, 0x70, 0x07,
  0x7a, 0x70, 0x03, 0x76, 0x78, 0x87, 0x70, 0x20, 0x87, 0x19, 0xcc, 0x11,
  0x0e, 0xec, 0x90, 0x0e, 0xe1, 0x30, 0x0f, 0x6e, 0x30, 0x0f, 0xe3, 0xf0,
  0x0e, 0xf0, 0x50, 0x0e, 0x33, 0x10, 0xc4, 0x1d, 0xde, 0x21, 0x1c, 0xd8,
  0x21, 0x1d, 0xc2, 0x61, 0x1e, 0x66, 0x30, 0x89, 0x3b, 0xbc, 0x83, 0x3b,
  0xd0, 0x43, 0x39, 0xb4, 0x03, 0x3c, 0xbc, 0x83, 0x3c, 0x84, 0x03, 0x3b,
  0xcc, 0xf0, 0x14, 0x76, 0x60, 0x07, 0x7b, 0x68, 0x07, 0x37, 0x68, 0x87,
  0x72, 0x68, 0x07, 0x37, 0x80, 0x87, 0x70, 0x90, 0x87, 0x70, 0x60, 0x07,
  0x76, 0x28, 0x07, 0x76, 0xf8, 0x05, 0x76, 0x78, 0x87, 0x77, 0x80, 0x87,
  0x5f, 0x08, 0x87, 0x71, 0x18, 0x87, 0x72, 0x98, 0x87, 0x79, 0x98, 0x81,
  0x2c, 0xee, 0xf0, 0x0e, 0xee, 0xe0, 0x0e, 0xf5, 0xc0, 0x0e, 0xec, 0x30,
  0x03, 0x62, 0xc8, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c, 0xcc, 0xa1, 0x1c, 0xe4,
  0xa1, 0x1c, 0xdc, 0x61, 0x1c, 0xca, 0x21, 0x1c, 0xc4, 0x81, 0x1d, 0xca,
  0x61, 0x06, 0xd6, 0x90, 0x43, 0x39, 0xc8, 0x43, 0x39, 0x98, 0x43, 0x39,
  0xc8, 0x43, 0x39, 0xb8, 0xc3, 0x38, 0x94, 0x43, 0x38, 0x88, 0x03, 0x3b,
  0x94, 0xc3, 0x2f, 0xbc, 0x83, 0x3c, 0xfc, 0x82, 0x3b, 0xd4, 0x03, 0x3b,
  0xb0, 0xc3, 0x0c, 0xc4, 0x21, 0x07, 0x7c, 0x70, 0x03, 0x7a, 0x28, 0x87,
  0x76, 0x80, 0x87, 0x19, 0xca, 0xc3, 0x0e, 0xec, 0x60, 0x0f, 0xed, 0xe0,
  0x06, 0xec, 0xf0, 0x0e, 0xef, 0x00, 0x0f, 0x33, 0x22, 0x88, 0x1c, 0xf0,
  0xc1, 0x0d, 0xc8, 0x41, 0x1c, 0xce, 0xc1, 0x0d, 0xec, 0x21, 0x1c, 0xe4,
  0x81, 0x1d, 0xc2, 0x21, 0x1f, 0xde, 0xa1, 0x1e, 0xe8, 0x61, 0x06, 0x13,
  0x91, 0x03, 0x3e, 0xb8, 0x81, 0x38, 0xc8, 0x43, 0x39, 0x84, 0xc3, 0x3a,
  0xb8, 0x81, 0x38, 0xc8, 0x03, 0x00, 0x00, 0x00, 0x71, 0x20, 0x00, 0x00,
  0x04, 0x01, 0x00, 0x00, 0x05, 0xf0, 0x05, 0x7e, 0x41, 0x77, 0x7a, 0xfe,
  0x1e, 0xb2, 0xc3, 0x6d, 0x38, 0x10, 0x38, 0xab, 0x4e, 0xc3, 0x6d, 0x38,
  0xbb, 0x2c, 0x9f, 0xd2, 0xc3, 0xf4, 0x32, 0x10, 0x18, 0x2c, 0x01, 0x2f,
  0xf0, 0x0b, 0xba, 0xd3, 0xf3, 0xf7, 0x55, 0x1e, 0x86, 0x03, 0x81, 0xb3,
  0xea, 0x34, 0xdc, 0x86, 0xb3, 0xcb, 0xf2, 0x29, 0x3d, 0x4c, 0x2f, 0x03,
  0x81, 0xc1, 0x4a, 0x60, 0x85, 0xc0, 0x2f, 0xe8, 0xce, 0x23, 0xd3, 0xf4,
  0x29, 0x3a, 0x4c, 0x2e, 0xcb, 0x81, 0xc0, 0x6c, 0x10, 0x5b, 0x1d, 0xbe,
  0xd9, 0x6f, 0x39, 0x34, 0x9c, 0x67, 0xbf, 0xc3, 0x64, 0x20, 0xb0, 0x2a,
  0xac, 0xa7, 0xd9, 0xf4, 0xa4, 0x9b, 0x2a, 0x4f, 0x87, 0xdd, 0x67, 0x76,
  0x39, 0xe9, 0xa6, 0x97, 0xe5, 0xf3, 0xf2, 0x98, 0x9e, 0x7e, 0xbb, 0x83,
  0x74, 0xba, 0x3c, 0x2d, 0xae, 0xd3, 0xcb, 0x73, 0x20, 0x10, 0xa8, 0xad,
  0x03, 0x5a, 0x08, 0xfc, 0x86, 0xec, 0xf7, 0xbc, 0x3c, 0xa7, 0x23, 0xd3,
  0xf4, 0x61, 0x5d, 0x5c, 0x9e, 0xa2, 0xc3, 0xe4, 0xb2, 0x1c, 0x08, 0xcc,
  0x06, 0xb1, 0xd5, 0xe1, 0x9b, 0xfd, 0x96, 0x43, 0xc3, 0x79, 0xf6, 0x3b,
  0x4c, 0x06, 0x02, 0xab, 0xc2, 0x7a, 0x9a, 0x4d, 0x4f, 0xba, 0xa9, 0xf2,
  0x74, 0xd8, 0x7d, 0x66, 0x97, 0x93, 0x6e, 0x7a, 0x59, 0x3e, 0x2f, 0x8f,
  0xe9, 0xe9, 0xb7, 0x3b, 0x48, 0xa7, 0xcb, 0xd3, 0xe2, 0x3a, 0xbd, 0x3c,
  0x07, 0x02, 0x81, 0xda, 0x42, 0x80, 0x85, 0xc0, 0x6f, 0xc8, 0x7e, 0xcf,
  0xcb, 0x73, 0x3a, 0x32, 0x4d, 0x9f, 0xa2, 0xc3, 0xe4, 0xb2, 0x1c, 0x08,
  0xcc, 0x06, 0xb1, 0xd5, 0xe1, 0x9b, 0xfd, 0x96, 0x43, 0xc3, 0x79, 0xf6,
  0x3b, 0x4c, 0x06, 0x02, 0xab, 0xc2, 0x7a, 0x9a, 0x4d, 0x4f, 0xba, 0xa9,
  0xf2, 0x74, 0xd8, 0x7d, 0x66, 0x97, 0x93, 0x6e, 0x7a, 0x59, 0x3e, 0x2f,
  0x8f, 0xe9, 0xe9, 0xb7, 0x3b, 0x48, 0xa7, 0xcb, 0xd3, 0xe2, 0x3a, 0xbd,
  0x3c, 0x07, 0x02, 0x81, 0xda, 0x0a, 0x00, 0x83, 0xc0, 0x8f, 0x99, 0x76,
  0x97, 0xc3, 0xf2, 0x21, 0x3b, 0xdc, 0x86, 0x03, 0x81, 0xb3, 0xea, 0x34,
  0xdc, 0x86, 0xb3, 0xcb, 0xf2, 0x29, 0x3d, 0x4c, 0x2f, 0x03, 0x81, 0xc1,
  0x52, 0x60, 0x83, 0xc0, 0xaf, 0x99, 0x9e, 0xcf, 0xa7, 0xe8, 0x30, 0xb9,
  0x2c, 0xff, 0x0e, 0xc3, 0xed, 0xb2, 0x3c, 0x2c, 0x0d, 0xe7, 0x81, 0xc0,
  0x6c, 0x10, 0x5b, 0x1d, 0xbe, 0xd9, 0x6f, 0x39, 0x34, 0x9c, 0x67, 0xbf,
  0xc3, 0x64, 0x20, 0x10, 0xa8, 0xad, 0x05, 0x36, 0x08, 0xfc, 0x9a, 0xe9,
  0xf9, 0x7c, 0x8a, 0x0e, 0x93, 0xcb, 0xf2, 0xef, 0x73, 0x3c, 0x66, 0xd7,
  0xe7, 0xe9, 0xb7, 0x1b, 0x08, 0xcc, 0x06, 0xb1, 0xd5, 0xe1, 0x9b, 0xfd,
  0x96, 0x43, 0xc3, 0x79, 0xf6, 0x3b, 0x4c, 0x06, 0x02, 0x81, 0xda, 0x32,
  0xa8, 0x02, 0x3f, 0x69, 0x38, 0x7f, 0x2e, 0xbb, 0xa7, 0xe8, 0x30, 0xb9,
  0x2c, 0x07, 0x02, 0xb3, 0x41, 0x2c, 0x56, 0x6b, 0x26, 0xd4, 0x70, 0xf9,
  0xce, 0xe3, 0x03, 0x4d, 0xe3, 0x4c, 0xc0, 0x44, 0x84, 0x40, 0x33, 0x2c,
  0x84, 0x55, 0x40, 0xc3, 0xe5, 0x3b, 0x8f, 0x1f, 0x20, 0x0d, 0x10, 0x61,
  0x7e, 0x71, 0xdb, 0x26, 0xb2, 0x0d, 0x97, 0xef, 0x3c, 0xbe, 0x10, 0x50,
  0x45, 0x41, 0x44, 0xa5, 0x03, 0x0c, 0x25, 0x61, 0x00, 0x02, 0xe6, 0x17,
  0xb7, 0x6d, 0x21, 0xdb, 0x70, 0xf9, 0xce, 0xe3, 0x0b, 0x01, 0x55, 0x14,
  0x44, 0x54, 0x3a, 0xc0, 0x50, 0x12, 0x06, 0x20, 0x60, 0x3e, 0x72, 0xdb,
  0x76, 0x82, 0x06, 0xc3, 0xe5, 0x3b, 0x8f, 0x2f, 0x44, 0x04, 0x30, 0x11,
  0x21, 0xd0, 0x0c, 0x0b, 0xf1, 0x39, 0x51, 0x89, 0x04, 0xfe, 0x70, 0xf9,
  0x13, 0xf6, 0x10, 0x92, 0x1f, 0x02, 0xcd, 0xb0, 0x10, 0x86, 0xb2, 0x06,
  0xc3, 0xe5, 0x3b, 0x8f, 0x2f, 0x44, 0x04, 0x30, 0x11, 0x21, 0xd0, 0x0c,
  0x0b, 0xf1, 0x39, 0x51, 0x89, 0x04, 0xfe, 0xe1, 0x48, 0xd3, 0x02, 0x60,
  0x0e, 0x35, 0xf9, 0x45, 0x04, 0x30, 0x04, 0xb7, 0x19, 0x83, 0x36, 0x5c,
  0xbe, 0xf3, 0xf8, 0x42, 0x44, 0x00, 0x13, 0x11, 0x02, 0xcd, 0xb0, 0x10,
  0x5f, 0xe4, 0x30, 0x21, 0x01, 0x3c, 0x36, 0x01, 0x06, 0xc3, 0xe5, 0x3b,
  0x8f, 0x3f, 0x20, 0xd2, 0x03, 0x4c, 0xc2, 0xb1, 0x02, 0x98, 0xd4, 0x21,
  0x0c, 0xd1, 0x48, 0x88, 0xd3, 0x48, 0x3e, 0x72, 0xdb, 0x46, 0xb1, 0x0d,
  0x97, 0xef, 0x3c, 0xfe, 0x80, 0x48, 0x0f, 0x30, 0x09, 0xc7, 0x0a, 0x60,
  0x92, 0xd8, 0x0c, 0xc4, 0xe5, 0x23, 0xb7, 0x6d, 0x16, 0xce, 0x70, 0xf9,
  0xce, 0xe3, 0x0f, 0xce, 0x64, 0xfb, 0xc5, 0x6d, 0x9b, 0x83, 0x33, 0x5c,
  0xbe, 0xf3, 0xf8, 0x83, 0x33, 0xdd, 0x7e, 0x71, 0xdb, 0xb6, 0x71, 0x0d,
  0x97, 0xef, 0x3c, 0xbe, 0x41, 0x38, 0x0c, 0x31, 0x45, 0x98, 0xd8, 0x0c,
  0xc4, 0xe5, 0x23, 0xb7, 0x6d, 0x20, 0xcf, 0x70, 0xf9, 0xce, 0xe3, 0x23,
  0x46, 0xe3, 0x44, 0x44, 0x88, 0x4c, 0xd6, 0x41, 0x0d, 0x97, 0xef, 0x3c,
  0x3e, 0xd2, 0x48, 0x13, 0xd0, 0x08, 0x84, 0xd8, 0xf9, 0xc8, 0x6d, 0x9b,
  0xc6, 0x35, 0x5c, 0xbe, 0xf3, 0xf8, 0x48, 0x23, 0x4d, 0x40, 0x23, 0x10,
  0x62, 0x33, 0x10, 0x97, 0x8f, 0xdc, 0xb6, 0x91, 0x5c, 0xc3, 0xe5, 0x3b,
  0x8f, 0xef, 0x04, 0x09, 0x21, 0x4c, 0xad, 0x03, 0x3b, 0xd1, 0x32, 0xf8,
  0xc5, 0x6d, 0x1b, 0x07, 0x36, 0x5c, 0xbe, 0xf3, 0xf8, 0x4f, 0x84, 0x30,
  0xc8, 0x84, 0x54, 0x84, 0xd8, 0x0c, 0xc4, 0xe5, 0x23, 0xb7, 0x6d, 0x19,
  0xd7, 0x70, 0xf9, 0xce, 0xe3, 0x47, 0x80, 0xb5, 0x51, 0x45, 0x41, 0x44,
  0xa5, 0x03, 0x0c, 0x7e, 0x71, 0xdb, 0xf6, 0x70, 0x0d, 0x97, 0xef, 0x3c,
  0x7e, 0x04, 0x58, 0x1b, 0x55, 0x14, 0x44, 0x54, 0x3a, 0xc0, 0xe0, 0x23,
  0xb7, 0x6d, 0x12, 0xd5, 0x70, 0xf9, 0xce, 0xe3, 0x47, 0x00, 0xd6, 0x72,
  0x54, 0x14, 0x11, 0xcd, 0xe4, 0x17, 0xb7, 0x6d, 0x1e, 0xd4, 0x70, 0xf9,
  0xce, 0xe3, 0x4b, 0x00, 0xf3, 0x2c, 0x04, 0x18, 0x01, 0x83, 0x5f, 0xdc,
  0xb6, 0x7d, 0x54, 0xc3, 0xe5, 0x3b, 0x8f, 0x2f, 0x01, 0xcc, 0xb3, 0x10,
  0x25, 0x51, 0x11, 0x8b, 0x5f, 0xdc, 0xb6, 0x8d, 0x48, 0xc3, 0xe5, 0x3b,
  0x8f, 0x3f, 0x11, 0xd1, 0x84, 0x00, 0x11, 0xe6, 0x17, 0xb7, 0x6d, 0x18,
  0xd6, 0x70, 0xf9, 0xce, 0xe3, 0x4f, 0xc4, 0x35, 0x51, 0x11, 0xc1, 0x4e,
  0x4e, 0x44, 0xf8, 0xc5, 0x6d, 0xdb, 0x85, 0x18, 0x0c, 0x97, 0xef, 0x3c,
  0xfe, 0x14, 0x01, 0x02, 0xb1, 0x02, 0x98, 0x2f, 0x4d, 0x11, 0x25, 0x4c,
  0x3e, 0xe7, 0x2c, 0x4e, 0x94, 0x02, 0xd8, 0xe2, 0x00, 0x83, 0x35, 0x3c,
  0xc3, 0xe5, 0x3b, 0x8f, 0x4f, 0x35, 0x40, 0x84, 0xf9, 0xc5, 0x6d, 0x1b,
  0xc4, 0x36, 0x5c, 0xbe, 0xf3, 0xf8, 0x96, 0x13, 0x2d, 0xc3, 0x0a, 0x60,
  0x1d, 0x12, 0x11, 0xc2, 0x84, 0x38, 0x8d, 0x5f, 0xdc, 0xb6, 0x45, 0x60,
  0xc3, 0xe5, 0x3b, 0x8f, 0x6f, 0x39, 0xd1, 0x32, 0xac, 0x00, 0x86, 0x46,
  0x88, 0x81, 0x34, 0x7e, 0x71, 0xdb, 0x56, 0x72, 0x0d, 0x97, 0xef, 0x3c,
  0xbe, 0xe5, 0x44, 0xcb, 0xd0, 0x3a, 0x68, 0x90, 0x10, 0xc2, 0xe4, 0x17,
  0xb7, 0x6d, 0x03, 0x4e, 0x11, 0x01, 0x0c, 0xc1, 0x6d, 0xff, 0x42, 0x18,
  0x80, 0x80, 0x59, 0x41, 0xb4, 0x2c, 0x15, 0xe3, 0x2f, 0x48, 0x41, 0x4c,
  0x08, 0x43, 0xf8, 0x44, 0x33, 0x18, 0xc1, 0xb4, 0x2c, 0x15, 0xe3, 0x2f,
  0x48, 0x41, 0x4c, 0x08, 0x43, 0xf8, 0xd2, 0x04, 0x44, 0x13, 0x00, 0x00,
  0x61, 0x20, 0x00, 0x00, 0x2e, 0x01, 0x00, 0x00, 0x13, 0x04, 0x41, 0x2c,
  0x10, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x04, 0x18, 0x01, 0x28,
  0x81, 0xf2, 0x20, 0xce, 0x08, 0x00, 0x35, 0x8a, 0xa0, 0x04, 0x0a, 0x30,
  0x80, 0x10, 0x33, 0x00, 0x65, 0x18, 0x50, 0x92, 0x10, 0x45, 0x08, 0x54,
  0xfe, 0x03, 0xc5, 0x55, 0x76, 0x05, 0x3b, 0x50, 0x6e, 0x25, 0x53, 0xa2,
  0x02, 0x45, 0x2a, 0x50, 0xb4, 0x03, 0x05, 0x2c, 0x50, 0x1a, 0x85, 0x52,
  0x30, 0x05, 0x52, 0xba, 0x02, 0x74, 0x18, 0x01, 0x98, 0x01, 0x20, 0xc2,
  0x18, 0x01, 0x08, 0x82, 0x20, 0xfe, 0x8d, 0x11, 0x80, 0x20, 0x8c, 0xe7,
  0x62, 0x30, 0x02, 0x30, 0x46, 0x00, 0x82, 0x20, 0x08, 0x82, 0xc2, 0x18,
  0x01, 0x08, 0x82, 0x20, 0xfe, 0x0b, 0x63, 0x04, 0x20, 0x08, 0x82, 0x20,
  0x18, 0x8c, 0x11, 0x80, 0x20, 0x08, 0xc2, 0x1f, 0x25, 0xe7, 0x10, 0x60,
  0xa1, 0x0d, 0xe6, 0x10, 0x66, 0x81, 0x0d, 0xe6, 0x10, 0x4a, 0x81, 0x14,
  0x00, 0x00, 0x00, 0x00, 0xe4, 0x0b, 0x0a, 0x30, 0x13, 0x31, 0x21, 0x69,
  0x30, 0x0a, 0x23, 0x06, 0x06, 0x00, 0x82, 0x60, 0xe0, 0x0a, 0x7b, 0x40,
  0x09, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0xa0, 0x0a, 0x7e, 0xb0, 0x05,
  0xc6, 0x88, 0x81, 0x01, 0x80, 0x20, 0x18, 0xa8, 0x41, 0x2c, 0x64, 0x6a,
  0x30, 0x62, 0x60, 0x00, 0x20, 0x08, 0x06, 0x6a, 0x20, 0x0b, 0x9a, 0x1a,
  0x8c, 0x18, 0x1c, 0x00, 0x08, 0x82, 0xc1, 0x28, 0x94, 0xc2, 0x37, 0x58,
  0xa3, 0x09, 0x01, 0x30, 0x9a, 0x20, 0x04, 0xa3, 0x09, 0x83, 0x30, 0xc7,
  0x50, 0x0d, 0x7f, 0x30, 0xc7, 0x10, 0x0c, 0xa3, 0x30, 0xc7, 0x10, 0x0c,
  0x7f, 0x30, 0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0xa3, 0xc0, 0x0a, 0x66,
  0xa0, 0xf8, 0xc1, 0x68, 0x42, 0x00, 0x8c, 0x26, 0x08, 0xc1, 0x68, 0xc2,
  0x30, 0x8c, 0x18, 0x1c, 0x00, 0x08, 0x82, 0xc1, 0x28, 0xc0, 0x82, 0x1a,
  0x38, 0xa1, 0x30, 0x9a, 0x10, 0x00, 0xa3, 0x09, 0x42, 0x30, 0x9a, 0x30,
  0x0c, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0x30, 0x0a, 0xb4, 0xe0, 0x06,
  0x92, 0x28, 0x8c, 0x26, 0x04, 0xc0, 0x68, 0x82, 0x10, 0x8c, 0x26, 0x0c,
  0xc3, 0x88, 0xc1, 0x01, 0x80, 0x20, 0x18, 0x8c, 0x02, 0x2e, 0xc8, 0x81,
  0x55, 0x0a, 0xa3, 0x09, 0x01, 0x30, 0x9a, 0x20, 0x04, 0xa3, 0x09, 0xc3,
  0x70, 0x19, 0xa1, 0x2e, 0x23, 0x94, 0x09, 0x63, 0x00, 0x1f, 0x13, 0xc8,
  0x00, 0x3e, 0x23, 0x06, 0x06, 0x00, 0x82, 0x60, 0xa0, 0x06, 0xef, 0x50,
  0x07, 0xa7, 0x30, 0x62, 0x60, 0x00, 0x20, 0x08, 0x06, 0x6a, 0x00, 0x0f,
  0x76, 0x70, 0x0a, 0x27, 0x10, 0xea, 0x04, 0x42, 0x99, 0x21, 0xd0, 0xc7,
  0x0c, 0x81, 0x3e, 0x26, 0xb0, 0x81, 0x7c, 0x4c, 0x68, 0x03, 0xf9, 0x98,
  0xf0, 0x06, 0xf0, 0x31, 0x01, 0x0e, 0xe0, 0x63, 0x72, 0x10, 0xc4, 0xc7,
  0x06, 0x4f, 0x3e, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0x50, 0x0a, 0xeb,
  0x70, 0x0a, 0x82, 0x17, 0x58, 0xe0, 0x41, 0xc7, 0x8c, 0x4e, 0x3e, 0x23,
  0x06, 0x08, 0x00, 0x82, 0x60, 0x50, 0x0a, 0xee, 0xa0, 0x0a, 0x45, 0x17,
  0x58, 0xd0, 0x41, 0xc7, 0x12, 0x4e, 0x3e, 0x23, 0x06, 0x08, 0x00, 0x82,
  0x60, 0x50, 0x0a, 0xf1, 0xd0, 0x0a, 0x08, 0x17, 0x58, 0xc0, 0x41, 0xc7,
  0x98, 0x4d, 0x3e, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0x50, 0x0a, 0xf4,
  0x00, 0x0b, 0xcb, 0x16, 0x58, 0xb0, 0x41, 0xc7, 0x94, 0x80, 0x3e, 0x86,
  0x08, 0xf4, 0x31, 0x63, 0xa0, 0x8f, 0x0d, 0x74, 0x10, 0x1f, 0x1b, 0xe8,
  0x20, 0x3e, 0x36, 0xd0, 0x41, 0x7c, 0x46, 0x0c, 0x16, 0x00, 0x04, 0xc1,
  0x20, 0x0c, 0x62, 0xa2, 0x16, 0x06, 0x21, 0x18, 0x84, 0x60, 0xc4, 0xc0,
  0x00, 0x40, 0x10, 0x0c, 0xbe, 0x99, 0xa8, 0x85, 0xa0, 0xf8, 0x00, 0x1f,
  0xe0, 0x02, 0x42, 0x59, 0x60, 0x0a, 0xf0, 0xb1, 0x00, 0x0c, 0xe8, 0x63,
  0x41, 0x2a, 0xc8, 0xc7, 0x82, 0x55, 0x80, 0x8f, 0x05, 0x78, 0x20, 0x9f,
  0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0x28, 0x85, 0x92, 0x08, 0x07, 0x0e,
  0x0f, 0x02, 0x0b, 0xf0, 0x00, 0x3a, 0x46, 0xdc, 0x81, 0x7c, 0x46, 0x0c,
  0x10, 0x00, 0x04, 0xc1, 0xa0, 0x14, 0x50, 0x82, 0x1c, 0xbe, 0x3b, 0x08,
  0x2c, 0xb8, 0x03, 0xe8, 0xd8, 0x61, 0x07, 0xf2, 0x19, 0x31, 0x40, 0x00,
  0x10, 0x04, 0x83, 0x52, 0x58, 0x89, 0x73, 0x10, 0x03, 0x3b, 0x08, 0x2c,
  0xb0, 0x03, 0xe8, 0x98, 0x52, 0x07, 0xf2, 0x19, 0x31, 0x40, 0x00, 0x10,
  0x04, 0x83, 0x52, 0x70, 0x09, 0x75, 0x28, 0x83, 0x3a, 0x08, 0x2c, 0xa8,
  0x03, 0xe8, 0x98, 0x12, 0xd0, 0xc7, 0x10, 0x81, 0x3e, 0x66, 0x0c, 0xf4,
  0xb1, 0xc1, 0x15, 0xe2, 0x63, 0x83, 0x2b, 0xc4, 0xc7, 0x06, 0x57, 0x88,
  0xcf, 0x88, 0xc1, 0x02, 0x80, 0x20, 0x18, 0x84, 0xc1, 0x5a, 0xbc, 0xc3,
  0x20, 0x04, 0x83, 0x10, 0x8c, 0x18, 0x18, 0x00, 0x08, 0x82, 0xc1, 0xd7,
  0x16, 0xef, 0x10, 0x58, 0x50, 0xc8, 0xc7, 0x84, 0x42, 0x3e, 0x36, 0x14,
  0xf2, 0x99, 0x63, 0x40, 0x87, 0x41, 0x26, 0xe6, 0x18, 0x82, 0xc1, 0x26,
  0xe6, 0x18, 0x82, 0x41, 0x26, 0x6a, 0x17, 0x70, 0x02, 0x2e, 0x20, 0x94,
  0x05, 0xe6, 0x00, 0x1f, 0x0b, 0xfe, 0x80, 0x3e, 0x16, 0xa4, 0x83, 0x7c,
  0x2c, 0x58, 0x07, 0xf8, 0x58, 0x3b, 0x04, 0xf1, 0x19, 0x31, 0x40, 0x00,
  0x10, 0x04, 0x83, 0x52, 0x28, 0x8b, 0x90, 0x08, 0x70, 0x61, 0x0f, 0x2c,
  0xc0, 0x05, 0xe8, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0x41, 0x29, 0x9c,
  0xc5, 0x48, 0x0c, 0xb6, 0xa0, 0x07, 0x16, 0xd8, 0x02, 0x74, 0x46, 0x0c,
  0x10, 0x00, 0x04, 0xc1, 0xa0, 0x14, 0xd2, 0xa2, 0x24, 0x0a, 0x5a, 0xc8,
  0x03, 0x0b, 0x68, 0x01, 0x3a, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0x50,
  0x0a, 0x6b, 0x71, 0x12, 0x87, 0x2c, 0xe0, 0x81, 0x05, 0xb2, 0x00, 0x1d,
  0x3b, 0x02, 0xfa, 0x98, 0x21, 0xd0, 0xc7, 0x8a, 0x81, 0x3e, 0x36, 0xac,
  0x43, 0x7c, 0x6c, 0x58, 0x87, 0xf8, 0xd8, 0xb0, 0x0e, 0xf1, 0x19, 0x31,
  0x58, 0x00, 0x10, 0x04, 0x83, 0x30, 0x40, 0x0d, 0x96, 0x18, 0x84, 0x60,
  0x10, 0x82, 0x11, 0x03, 0x03, 0x00, 0x41, 0x30, 0xf8, 0x54, 0x83, 0x25,
  0x02, 0x0b, 0x0a, 0xf9, 0x98, 0x50, 0xc8, 0xc7, 0x86, 0x42, 0x3e, 0x73,
  0x0c, 0x25, 0x31, 0xbc, 0xc5, 0x1c, 0x43, 0x30, 0xcc, 0xc5, 0x1c, 0x43,
  0x30, 0xbc, 0xc5, 0xf1, 0x43, 0x60, 0x47, 0x0c, 0x0c, 0x01, 0x04, 0xc1,
  0xc0, 0xd9, 0x0d, 0x9f, 0x08, 0xf6, 0x64, 0xe8, 0x87, 0xb9, 0x98, 0x8b,
  0x61, 0x03, 0x22, 0x58, 0x89, 0x01, 0xd8, 0x93, 0xc1, 0x1f, 0xe8, 0xe2,
  0x2e, 0x86, 0x0d, 0x88, 0xa0, 0x2e, 0x06, 0x60, 0x4f, 0x88, 0x7f, 0xa8,
  0x8b, 0xb9, 0xa8, 0x8b, 0x61, 0x03, 0x22, 0xa8, 0x87, 0x01, 0xd8, 0x13,
  0x02, 0x24, 0xec, 0x82, 0x2e, 0xf2, 0x62, 0xd8, 0x80, 0x08, 0xc6, 0x60,
  0x00, 0xf6, 0x84, 0x08, 0x89, 0xbb, 0xa0, 0x8b, 0xbb, 0x18, 0x36, 0x20,
  0x82, 0x7b, 0x18, 0x80, 0x3d, 0x21, 0x44, 0x02, 0x2f, 0xea, 0x62, 0x2f,
  0x86, 0x0d, 0x88, 0x00, 0x19, 0x00, 0x2b, 0x85, 0x54, 0x90, 0x8f, 0x99,
  0x42, 0x2a, 0xc8, 0xc7, 0x4e, 0x21, 0x15, 0xe4, 0x33, 0x6c, 0x40, 0x20,
  0x7f, 0x31, 0x00, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0x00, 0x0a, 0xa7,
  0x01, 0x16, 0x24, 0x61, 0x13, 0xa3, 0x09, 0x01, 0x30, 0x62, 0x80, 0x00,
  0x20, 0x08, 0x06, 0x9d, 0x6f, 0xf0, 0x44, 0xc0, 0x16, 0x6c, 0x31, 0x62,
  0x70, 0x00, 0x20, 0x08, 0x06, 0xaa, 0x50, 0x1a, 0x62, 0x11, 0xb0, 0xc4,
  0x88, 0x01, 0x95, 0x80, 0x20, 0x18, 0xc0, 0x41, 0x6d, 0xe0, 0x44, 0x00,
  0x1a, 0x66, 0x01, 0x1a, 0xa0, 0x01, 0x1a, 0x24, 0x31, 0x12, 0x22, 0x31,
  0x13, 0x87, 0x51, 0xd0, 0x84, 0x4a, 0x50, 0x73, 0x18, 0x23, 0x06, 0x08,
  0x00, 0x82, 0x60, 0xd0, 0x85, 0xc7, 0x4f, 0x90, 0xc6, 0x5b, 0xbc, 0xc5,
  0x88, 0xc1, 0x01, 0x80, 0x20, 0x18, 0xa8, 0x02, 0x6a, 0x94, 0x45, 0xe0,
  0x12, 0x63, 0x08, 0x03, 0x5e, 0x8c, 0x21, 0x10, 0x70, 0x31, 0x86, 0x50,
  0xc8, 0xc5, 0x88, 0x81, 0x03, 0x80, 0x20, 0x18, 0xc8, 0x81, 0x6e, 0xbc,
  0x05, 0xd1, 0x12, 0x2c, 0x01, 0x17, 0x83, 0x10, 0xec, 0x44, 0x5d, 0x8c,
  0x18, 0x18, 0x02, 0x08, 0x82, 0x81, 0xd3, 0x1e, 0x71, 0x41, 0x61, 0x40,
  0x0c, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x5b, 0x06, 0x90, 0x08,
  0x52, 0x61, 0xcb, 0x20, 0x12, 0x01, 0x2b, 0x6c, 0x29, 0x5c, 0x22, 0x60,
  0x85, 0x23, 0x16, 0xb6, 0x0c, 0x34, 0x11, 0xa4, 0x02, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x61, 0x20, 0x00, 0x00, 0x51, 0x05, 0x00, 0x00,
  0x13, 0x04, 0x4c, 0x2c, 0x10, 0x00, 0x00, 0x00, 0x53, 0x00, 0x00, 0x00,
  0x04, 0x28, 0x81, 0x32, 0x18, 0x01, 0x28, 0x82, 0x72, 0x28, 0x0f, 0xe2,
  0x8c, 0x00, 0x50, 0xa3, 0x08, 0x4a, 0x80, 0x10, 0x85, 0x54, 0x26, 0x25,
  0x52, 0x60, 0xe5, 0x3f, 0x50, 0xba, 0x02, 0xc5, 0x51, 0x2c, 0x85, 0x52,
  0xb4, 0x02, 0x95, 0x50, 0xc2, 0x02, 0x45, 0x52, 0x92, 0x04, 0x25, 0x09,
  0x51, 0x90, 0x01, 0x85, 0x18, 0x50, 0x92, 0x0c, 0x85, 0x57, 0x9a, 0x02,
  0x05, 0x1a, 0x50, 0x1a, 0x65, 0x54, 0x5c, 0x85, 0x50, 0x96, 0x02, 0xe5,
  0x56, 0xb0, 0x03, 0xe5, 0x2a, 0x50, 0xb0, 0x02, 0x45, 0x3b, 0x50, 0x76,
  0x33, 0x00, 0x05, 0x53, 0x2a, 0xe5, 0x52, 0x20, 0x85, 0x51, 0xc0, 0x02,
  0x85, 0x89, 0x50, 0xa6, 0x02, 0x85, 0x2a, 0x50, 0x7e, 0xc5, 0x57, 0x40,
  0xe5, 0xff, 0x7f, 0x50, 0x32, 0x25, 0x2a, 0x50, 0xa4, 0x02, 0x74, 0x18,
  0x01, 0x98, 0x01, 0x20, 0xc2, 0x18, 0x01, 0x08, 0x82, 0x20, 0xfa, 0x8d,
  0x11, 0xec, 0xfe, 0x28, 0x93, 0x60, 0x30, 0x46, 0x00, 0x82, 0x20, 0x88,
  0xff, 0xc2, 0x18, 0x01, 0x08, 0x82, 0x20, 0xfc, 0x0b, 0x63, 0x04, 0x20,
  0x08, 0x82, 0xe0, 0x37, 0x46, 0x00, 0x82, 0x30, 0x9e, 0x8b, 0xc1, 0x18,
  0x41, 0xdf, 0xb7, 0x2c, 0xae, 0x8d, 0x11, 0x80, 0x20, 0x08, 0xc2, 0xdf,
  0x18, 0x01, 0x08, 0x82, 0xa0, 0x0a, 0x06, 0x63, 0x04, 0x2a, 0x5e, 0x9f,
  0xb2, 0x37, 0x46, 0xa0, 0xe2, 0xf5, 0x29, 0xfb, 0xc2, 0x18, 0x01, 0x08,
  0x82, 0x20, 0xbe, 0x8d, 0x11, 0x80, 0x20, 0x08, 0xc2, 0xde, 0x18, 0x01,
  0x08, 0x82, 0x20, 0x1e, 0x06, 0x63, 0x04, 0x20, 0x08, 0x82, 0x20, 0x18,
  0x8c, 0x11, 0x98, 0xf7, 0xba, 0xca, 0xde, 0x18, 0x41, 0xcc, 0x83, 0x7d,
  0xee, 0x8d, 0x11, 0xe8, 0xac, 0x39, 0x87, 0x60, 0x30, 0x46, 0xf0, 0xee,
  0x69, 0x79, 0x7f, 0x63, 0x04, 0x6e, 0x1f, 0x8b, 0xb6, 0x37, 0x46, 0x00,
  0x82, 0x20, 0x08, 0x82, 0xc2, 0x08, 0xc0, 0x18, 0x01, 0x08, 0x82, 0x20,
  0xfe, 0xcd, 0x00, 0x50, 0x72, 0x0e, 0xc1, 0x0d, 0x6e, 0x61, 0x0e, 0xc1,
  0x0d, 0x66, 0x61, 0x0e, 0x81, 0x15, 0xd8, 0x60, 0x0e, 0x61, 0x17, 0xda,
  0x60, 0x0e, 0xa1, 0x1d, 0x74, 0x61, 0x0e, 0xa1, 0x1d, 0xe4, 0x60, 0x0e,
  0xc1, 0x0d, 0x68, 0x61, 0x0e, 0xa1, 0x1d, 0xe4, 0x61, 0x0e, 0xa1, 0x0e,
  0xd8, 0x60, 0x0e, 0x41, 0x1d, 0xd8, 0x00, 0x00, 0xa4, 0x13, 0x82, 0x41,
  0x3c, 0x21, 0x18, 0xa4, 0x13, 0x0a, 0x30, 0x62, 0x60, 0x00, 0x20, 0x08,
  0x06, 0xae, 0x60, 0x0f, 0x72, 0x10, 0x8c, 0x18, 0x1c, 0x00, 0x08, 0x82,
  0x81, 0x2a, 0xe4, 0x83, 0x1f, 0x04, 0xcb, 0x88, 0xc1, 0x01, 0x80, 0x20,
  0x18, 0x80, 0xc2, 0x3f, 0xec, 0x41, 0x90, 0x07, 0xa3, 0x09, 0x41, 0x30,
  0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x9d, 0x4d, 0xf8, 0x41, 0xf0, 0x0b,
  0xbf, 0x30, 0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0xaa, 0xd0, 0x0f, 0xa2,
  0x10, 0x38, 0x23, 0x06, 0x05, 0x00, 0x82, 0x60, 0x70, 0x07, 0x27, 0xb1,
  0x0a, 0xa3, 0x09, 0x85, 0x30, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x9d,
  0x4e, 0x88, 0x42, 0x30, 0x0e, 0xe3, 0x30, 0x62, 0x70, 0x00, 0x20, 0x08,
  0x06, 0xaa, 0x10, 0x12, 0xa6, 0x10, 0x44, 0x23, 0x06, 0x0a, 0x00, 0x82,
  0x60, 0x40, 0x06, 0x39, 0x91, 0x0a, 0x05, 0x01, 0x0b, 0xeb, 0xa0, 0x0a,
  0xa3, 0x09, 0x01, 0x30, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x9d, 0x4f,
  0x98, 0x42, 0x70, 0x0e, 0xe7, 0x30, 0x62, 0x70, 0x00, 0x20, 0x08, 0x06,
  0xaa, 0x50, 0x12, 0xaa, 0x10, 0x68, 0x23, 0x06, 0x0a, 0x00, 0x82, 0x60,
  0x40, 0x06, 0x3d, 0xd1, 0x0a, 0x09, 0x62, 0x0b, 0xef, 0xe0, 0x0a, 0xa3,
  0x09, 0x01, 0x30, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x9d, 0x58, 0xa8,
  0x42, 0xb0, 0x0e, 0xeb, 0x30, 0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0xaa,
  0x90, 0x12, 0xae, 0x10, 0x78, 0x23, 0x06, 0x0a, 0x00, 0x82, 0x60, 0x40,
  0x06, 0x61, 0x11, 0x0b, 0x0d, 0xb3, 0x0b, 0xf3, 0x20, 0x0b, 0xa3, 0x09,
  0x01, 0x30, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x9d, 0x59, 0xb8, 0x42,
  0xf0, 0x0e, 0xef, 0x30, 0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0xaa, 0xd0,
  0x12, 0xb2, 0x10, 0x70, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0xd0, 0xa1,
  0x05, 0x2c, 0xa4, 0x42, 0x3c, 0xc4, 0xc3, 0x88, 0xc1, 0x01, 0x80, 0x20,
  0x18, 0xa8, 0xc2, 0x4b, 0xd0, 0x42, 0x30, 0x06, 0x23, 0x06, 0x08, 0x00,
  0x82, 0x60, 0xd0, 0xa9, 0x85, 0x2c, 0x90, 0xc3, 0x3c, 0xcc, 0xc3, 0x88,
  0xc1, 0x01, 0x80, 0x20, 0x18, 0xa8, 0x42, 0x4c, 0xd8, 0x42, 0x50, 0x06,
  0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0xd0, 0xb1, 0x05, 0x2d, 0xa4, 0x44,
  0x3d, 0xd4, 0xc3, 0x88, 0xc1, 0x01, 0x80, 0x20, 0x18, 0xa8, 0xc2, 0x4c,
  0xe0, 0x42, 0x80, 0x06, 0x23, 0x06, 0x0a, 0x00, 0x82, 0x60, 0x40, 0x06,
  0x6b, 0xb1, 0x0b, 0x97, 0xe5, 0x12, 0xfd, 0xc0, 0x0b, 0xa3, 0x09, 0x01,
  0x30, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x1d, 0x5c, 0xe0, 0x42, 0x90,
  0x0f, 0xf9, 0x30, 0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0xaa, 0x70, 0x13,
  0xbc, 0x10, 0x94, 0xc1, 0x88, 0x81, 0x02, 0x80, 0x20, 0x18, 0x90, 0xc1,
  0x5b, 0xfc, 0xc2, 0xa6, 0x81, 0x43, 0x48, 0x80, 0xc3, 0x68, 0x42, 0x00,
  0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0x41, 0x47, 0x17, 0xbc, 0x10, 0xf4,
  0x43, 0x3f, 0x8c, 0x18, 0x14, 0x00, 0x08, 0x82, 0xc1, 0x1d, 0x94, 0x05,
  0x3c, 0x8c, 0x18, 0x28, 0x00, 0x08, 0x82, 0x01, 0x19, 0xcc, 0xc5, 0x38,
  0x7c, 0x9e, 0x4c, 0x94, 0x04, 0x39, 0x8c, 0x26, 0x04, 0xc0, 0x70, 0x43,
  0x80, 0x13, 0x61, 0x30, 0xdd, 0xa0, 0x13, 0xba, 0x10, 0x54, 0x50, 0xc8,
  0x70, 0x03, 0xb1, 0x13, 0x60, 0x30, 0x62, 0x70, 0x00, 0x20, 0x08, 0x06,
  0xaa, 0x20, 0x16, 0xe7, 0x80, 0xbc, 0xc1, 0x2c, 0x03, 0x11, 0x08, 0x35,
  0xe4, 0x83, 0x8e, 0x18, 0x28, 0x00, 0x08, 0x82, 0x01, 0x19, 0xec, 0xc5,
  0x3a, 0x08, 0x01, 0x39, 0xb0, 0x04, 0x3b, 0x8c, 0x26, 0x04, 0xc0, 0x68,
  0x82, 0x10, 0x0c, 0x37, 0x10, 0x07, 0x18, 0xd4, 0x40, 0x0e, 0x58, 0x03,
  0x2f, 0xe8, 0x2c, 0x83, 0x30, 0x0c, 0x55, 0xf4, 0x82, 0xce, 0x12, 0x14,
  0x55, 0x9c, 0x03, 0xce, 0x12, 0x14, 0x23, 0x06, 0x0a, 0x00, 0x82, 0x60,
  0x40, 0x06, 0xa3, 0x31, 0x0f, 0x0a, 0xc3, 0x0e, 0x31, 0x41, 0x0f, 0xa3,
  0x09, 0x01, 0x30, 0x9a, 0x20, 0x04, 0xa3, 0x09, 0x83, 0x30, 0x4b, 0x50,
  0x0c, 0x74, 0x20, 0x06, 0xc1, 0x08, 0xd0, 0x30, 0xd0, 0x81, 0x18, 0x84,
  0x24, 0x40, 0xc3, 0x40, 0x07, 0x62, 0x10, 0x92, 0xe0, 0x0c, 0x23, 0x06,
  0x07, 0x00, 0x82, 0x60, 0x70, 0x0a, 0x75, 0x71, 0x0f, 0x6d, 0xa1, 0x13,
  0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0x70, 0x0a, 0x76, 0x81, 0x0f, 0x71,
  0xb1, 0x13, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0x70, 0x0a, 0x77, 0x91,
  0x0f, 0x6d, 0xc1, 0x13, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0x70, 0x0a,
  0x78, 0xa1, 0x0f, 0x70, 0xf1, 0x13, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60,
  0x70, 0x0a, 0x79, 0xb1, 0x0f, 0x74, 0x01, 0x16, 0x23, 0x06, 0x07, 0x00,
  0x82, 0x60, 0x70, 0x0a, 0x7a, 0xc1, 0x0f, 0x70, 0x11, 0x16, 0x23, 0x06,
  0x07, 0x00, 0x82, 0x60, 0x70, 0x0a, 0x7b, 0xd1, 0x0f, 0x73, 0xf1, 0x13,
  0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0x70, 0x0a, 0x7c, 0xe1, 0x0f, 0x77,
  0x01, 0x16, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0x70, 0x0a, 0x7d, 0xf1,
  0x0f, 0x73, 0x11, 0x16, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0x70, 0x0a,
  0x7e, 0x01, 0x12, 0x76, 0x41, 0x16, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60,
  0x70, 0x0a, 0x7f, 0x11, 0x12, 0x7a, 0x51, 0x16, 0x23, 0x06, 0x07, 0x00,
  0x82, 0x60, 0x70, 0x0a, 0xa0, 0x21, 0x12, 0x76, 0x61, 0x16, 0x23, 0x06,
  0x0a, 0x00, 0x82, 0x60, 0x50, 0x07, 0xac, 0x61, 0x12, 0x68, 0xf0, 0xe4,
  0x05, 0x59, 0x9c, 0xc4, 0x68, 0x42, 0x00, 0x8c, 0x26, 0x08, 0xc1, 0x68,
  0xc2, 0x20, 0xd8, 0x00, 0xc9, 0x67, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c,
  0x4a, 0xe1, 0x34, 0x5a, 0x62, 0x70, 0x82, 0x11, 0x03, 0x04, 0x00, 0x41,
  0x30, 0x28, 0x05, 0xd4, 0x70, 0x89, 0x81, 0x09, 0x2c, 0x50, 0xa0, 0x63,
  0xc7, 0x24, 0x9f, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0x28, 0x85, 0xd5,
  0x88, 0x89, 0x23, 0x0a, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1, 0xa0, 0x14,
  0x58, 0x43, 0x26, 0x8e, 0x27, 0xb0, 0xa0, 0x81, 0x8e, 0x2d, 0x96, 0x7c,
  0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1, 0xa0, 0x14, 0x5e, 0xa3, 0x26, 0x16,
  0x2a, 0x18, 0x31, 0x40, 0x00, 0x10, 0x04, 0x83, 0x52, 0x80, 0x0d, 0x9b,
  0x58, 0xa4, 0xc0, 0x02, 0x08, 0x3a, 0x23, 0x06, 0x0a, 0x00, 0x82, 0x60,
  0x50, 0x07, 0xbc, 0x61, 0x13, 0x78, 0xe0, 0xa5, 0x06, 0x5d, 0xdc, 0xc4,
  0x68, 0x42, 0x00, 0x8c, 0x26, 0x08, 0xc1, 0x68, 0xc2, 0x20, 0xd8, 0x00,
  0x06, 0xf2, 0x19, 0x31, 0x40, 0x00, 0x10, 0x04, 0x83, 0x52, 0xb8, 0x8d,
  0x9e, 0x18, 0xbc, 0x60, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0x4a, 0x01,
  0x37, 0x7c, 0x62, 0xe0, 0x02, 0x33, 0xc4, 0x40, 0x3e, 0x23, 0x06, 0x08,
  0x00, 0x82, 0x60, 0x50, 0x0a, 0xba, 0x01, 0x16, 0x06, 0x18, 0x04, 0x23,
  0x06, 0x08, 0x00, 0x82, 0x60, 0x50, 0x0a, 0xbb, 0x11, 0x16, 0x86, 0x17,
  0x58, 0x42, 0x06, 0xf2, 0x19, 0x31, 0x40, 0x00, 0x10, 0x04, 0x83, 0x52,
  0xe8, 0x8d, 0xb1, 0x48, 0xc4, 0x20, 0x18, 0x31, 0x40, 0x00, 0x10, 0x04,
  0x83, 0x52, 0xf0, 0x0d, 0xb2, 0x48, 0xc0, 0x20, 0x18, 0x31, 0x50, 0x00,
  0x10, 0x04, 0x83, 0x3a, 0x48, 0x8f, 0xb1, 0x28, 0x05, 0x35, 0xb0, 0x8d,
  0xd0, 0x20, 0x8b, 0xd1, 0x84, 0x00, 0x18, 0x4d, 0x10, 0x82, 0xd1, 0x84,
  0x41, 0xb0, 0xa1, 0x0d, 0xe4, 0x33, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06,
  0xa5, 0x40, 0x1e, 0x6a, 0x31, 0xac, 0x41, 0x30, 0x62, 0x80, 0x00, 0x20,
  0x08, 0x06, 0xa5, 0x50, 0x1e, 0x6b, 0x31, 0xa4, 0x41, 0x60, 0xc6, 0x1b,
  0xc8, 0x67, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0x4a, 0xe1, 0x3c, 0xda,
  0xc2, 0x68, 0x83, 0x60, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0x4a, 0x01,
  0x3d, 0xdc, 0xc2, 0x58, 0x83, 0xc0, 0x92, 0x38, 0x90, 0xcf, 0x88, 0x01,
  0x02, 0x80, 0x20, 0x18, 0x94, 0x82, 0x7a, 0xc0, 0x45, 0xf2, 0x06, 0xc1,
  0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x94, 0xc2, 0x7a, 0xc4, 0x45, 0xd2,
  0x06, 0xc1, 0x88, 0x81, 0x02, 0x80, 0x20, 0x18, 0xd4, 0x81, 0x7d, 0xc0,
  0x85, 0x2c, 0xe4, 0x01, 0x59, 0xb8, 0x46, 0x5c, 0x8c, 0x26, 0x04, 0xc0,
  0x68, 0x82, 0x10, 0x8c, 0x26, 0x0c, 0x82, 0x0d, 0x7a, 0x20, 0x9f, 0x11,
  0x03, 0x04, 0x00, 0x41, 0x30, 0x28, 0x85, 0xf8, 0xb8, 0x8b, 0x01, 0x0f,
  0x82, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0x28, 0x05, 0xf9, 0xc0, 0x8b,
  0xc1, 0x0e, 0x02, 0x33, 0xf8, 0x40, 0x3e, 0x23, 0x06, 0x08, 0x00, 0x82,
  0x60, 0x50, 0x0a, 0xf4, 0xa1, 0x17, 0x86, 0x1e, 0x04, 0x23, 0x06, 0x08,
  0x00, 0x82, 0x60, 0x50, 0x0a, 0xf5, 0xb1, 0x17, 0x06, 0x1e, 0x04, 0x96,
  0xf8, 0x81, 0x7c, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1, 0xa0, 0x14, 0xee,
  0xa3, 0x2f, 0x12, 0x3e, 0x08, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1, 0xa0,
  0x14, 0xf0, 0xc3, 0x2f, 0x12, 0x3d, 0x08, 0x46, 0x0c, 0x14, 0x00, 0x04,
  0xc1, 0xa0, 0x0e, 0x46, 0xa4, 0x2f, 0x7e, 0xc1, 0x14, 0xea, 0xc2, 0x37,
  0xfc, 0x62, 0x34, 0x21, 0x00, 0x46, 0x13, 0x84, 0x60, 0xc4, 0x40, 0x01,
  0x40, 0x10, 0x0c, 0xea, 0xc0, 0x44, 0x40, 0x43, 0x1c, 0x50, 0x01, 0x2f,
  0xc2, 0x23, 0x34, 0x46, 0x13, 0x02, 0x60, 0x34, 0x41, 0x08, 0x46, 0x0c,
  0x14, 0x00, 0x04, 0xc1, 0xa0, 0x0e, 0x52, 0x64, 0x34, 0xca, 0x41, 0x15,
  0xf6, 0x82, 0x3c, 0x48, 0x63, 0x34, 0x21, 0x00, 0x46, 0x13, 0x84, 0x60,
  0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c, 0xcc, 0x80, 0x46, 0xee, 0xc2, 0x3c,
  0x46, 0x0c, 0x0c, 0x00, 0x04, 0xc1, 0xc0, 0x0c, 0x6a, 0x04, 0x2f, 0xd2,
  0x63, 0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c, 0xcc, 0xc0, 0x46, 0xf2, 0xe2,
  0x3c, 0x46, 0x0c, 0x0a, 0x00, 0x04, 0xc1, 0x00, 0x0d, 0x6c, 0x24, 0x37,
  0x46, 0x0c, 0x0c, 0x00, 0x04, 0xc1, 0xc0, 0x0c, 0x72, 0x44, 0x2f, 0xd4,
  0x63, 0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c, 0xcc, 0x40, 0x47, 0xf6, 0xa2,
  0x3d, 0x46, 0x0c, 0x0c, 0x00, 0x04, 0xc1, 0xc0, 0x0c, 0x76, 0x84, 0x2f,
  0xd6, 0xc3, 0x06, 0x42, 0x3e, 0x36, 0x14, 0xf2, 0xb1, 0xc1, 0x90, 0x8f,
  0x0d, 0x0a, 0x7c, 0x6c, 0x50, 0xe0, 0x63, 0x83, 0x02, 0x9f, 0x6d, 0x19,
  0xec, 0xc3, 0x44, 0x4c, 0x84, 0x82, 0xca, 0x18, 0x43, 0x08, 0x50, 0xc4,
  0x2a, 0x2c, 0x3e, 0x56, 0x61, 0xf1, 0xb1, 0x41, 0x90, 0x8f, 0x11, 0x82,
  0x7c, 0x4c, 0xe0, 0xe0, 0x63, 0x02, 0x07, 0x9f, 0x31, 0x04, 0x44, 0x46,
  0x2c, 0xfb, 0xe2, 0x63, 0xd9, 0x17, 0x1f, 0x1b, 0x04, 0xf9, 0x18, 0x21,
  0xc8, 0xc7, 0x0e, 0x01, 0x3e, 0x76, 0x08, 0xf0, 0x19, 0x31, 0x38, 0x00,
  0x10, 0x04, 0x83, 0x51, 0x00, 0x93, 0xde, 0x18, 0x0b, 0xfa, 0x18, 0x4d,
  0x08, 0x80, 0xd1, 0x04, 0x21, 0x18, 0x4d, 0x18, 0x84, 0x11, 0x83, 0x03,
  0x00, 0x41, 0x30, 0x18, 0x05, 0x32, 0x09, 0x8f, 0xb3, 0xc8, 0x8f, 0xd1,
  0x84, 0x00, 0x18, 0x4d, 0x10, 0x82, 0xd1, 0x84, 0x41, 0x18, 0x31, 0x38,
  0x00, 0x10, 0x04, 0x83, 0x51, 0x40, 0x93, 0xf2, 0x58, 0x0b, 0xf1, 0x18,
  0x4d, 0x08, 0x80, 0xd1, 0x04, 0x21, 0x18, 0x4d, 0x18, 0x84, 0x3d, 0x21,
  0x66, 0x44, 0x4c, 0xc0, 0x44, 0x4c, 0x28, 0x38, 0x8c, 0x31, 0x84, 0x80,
  0x4c, 0xc6, 0x10, 0x04, 0x34, 0x19, 0x43, 0x18, 0xc8, 0x64, 0x4f, 0x08,
  0x1c, 0x39, 0x93, 0x32, 0x51, 0x13, 0x0a, 0x0e, 0x63, 0x0c, 0x21, 0x48,
  0x93, 0x31, 0x04, 0xa1, 0x4d, 0xc6, 0x10, 0x86, 0x34, 0xd9, 0x13, 0xa2,
  0x47, 0xd8, 0x24, 0x4d, 0xd8, 0x84, 0x82, 0xc3, 0x18, 0x43, 0x08, 0xdc,
  0x64, 0x0c, 0x41, 0x90, 0x93, 0x31, 0x84, 0xc1, 0x4d, 0xf6, 0x84, 0x10,
  0x93, 0x38, 0x71, 0x13, 0x3a, 0xa1, 0xe0, 0x30, 0xc6, 0x10, 0x82, 0x39,
  0x19, 0x43, 0x10, 0xee, 0x64, 0x0c, 0x61, 0x98, 0x13, 0x93, 0xe6, 0x20,
  0x3e, 0x26, 0xcd, 0x41, 0x7c, 0x4c, 0x9a, 0x83, 0xf8, 0x18, 0x6e, 0xc0,
  0x42, 0x7c, 0x2c, 0x37, 0x5c, 0x21, 0x3e, 0xa6, 0x1b, 0xac, 0x10, 0x9f,
  0x11, 0x83, 0x05, 0x00, 0x41, 0x30, 0x08, 0x03, 0x5d, 0x41, 0x91, 0x41,
  0x08, 0x8c, 0x82, 0x18, 0x43, 0xa8, 0xe4, 0x64, 0x0c, 0xc1, 0x2a, 0x93,
  0x31, 0x84, 0xeb, 0x4c, 0x46, 0x0c, 0x16, 0x00, 0x04, 0xc1, 0x20, 0x0c,
  0x7c, 0x85, 0x45, 0x6e, 0x81, 0x16, 0x62, 0x61, 0x10, 0x02, 0x2b, 0x02,
  0xfa, 0x58, 0x90, 0xc9, 0xc7, 0x84, 0x4c, 0x3e, 0x36, 0x64, 0xf2, 0xb1,
  0x21, 0x0c, 0xe0, 0x63, 0x43, 0x18, 0xc0, 0xc7, 0x86, 0x30, 0x80, 0xcf,
  0x1c, 0x03, 0x7f, 0x0c, 0xa8, 0x32, 0xc7, 0x10, 0x0c, 0xac, 0x32, 0xc7,
  0x10, 0x0c, 0xa8, 0x62, 0x1d, 0x2a, 0xc4, 0xc7, 0x3a, 0x54, 0x88, 0x8f,
  0x75, 0xa8, 0x10, 0x9f, 0x11, 0x83, 0x05, 0x00, 0x41, 0x30, 0x08, 0x03,
  0x76, 0xd1, 0x91, 0x8a, 0x9a, 0x06, 0x21, 0x18, 0x43, 0xe8, 0x48, 0x65,
  0x0c, 0xc1, 0xbb, 0x93, 0x31, 0x84, 0x2f, 0x4f, 0x46, 0x0c, 0x16, 0x00,
  0x04, 0xc1, 0x20, 0x0c, 0xe0, 0xc5, 0x47, 0xd2, 0xc1, 0x1c, 0xc6, 0x61,
  0x10, 0x02, 0x2b, 0x02, 0xfa, 0x58, 0x10, 0x06, 0xf2, 0x31, 0x21, 0x0c,
  0xe4, 0x63, 0x43, 0x18, 0xc8, 0xc7, 0x86, 0x34, 0x80, 0x8f, 0x0d, 0x69,
  0x00, 0x1f, 0x1b, 0xd2, 0x00, 0x3e, 0x73, 0x0c, 0x2e, 0x32, 0xe8, 0xca,
  0x1c, 0x43, 0x30, 0xf8, 0xca, 0x1c, 0x43, 0x30, 0xe8, 0x8a, 0xb9, 0x84,
  0x4f, 0xc4, 0xc7, 0x58, 0x62, 0x27, 0xe2, 0x63, 0x2a, 0x81, 0x13, 0xf1,
  0x31, 0x92, 0x08, 0x8b, 0xf8, 0x98, 0x48, 0xf8, 0x44, 0x7c, 0x0c, 0x24,
  0x76, 0x22, 0x3e, 0xe6, 0x8d, 0x45, 0x7c, 0xcc, 0x03, 0x8b, 0xf8, 0x98,
  0xd7, 0x13, 0xf1, 0x19, 0x31, 0x58, 0x00, 0x10, 0x04, 0x83, 0x30, 0x20,
  0x19, 0x39, 0x49, 0x90, 0x23, 0x41, 0x8e, 0x11, 0x83, 0x05, 0x00, 0x41,
  0x30, 0x08, 0x83, 0x92, 0x99, 0x13, 0x25, 0x41, 0x0e, 0xa3, 0x18, 0x31,
  0x58, 0x00, 0x10, 0x04, 0x83, 0x30, 0x30, 0x19, 0x3a, 0x41, 0x0e, 0x03,
  0x39, 0x8c, 0x11, 0x83, 0x05, 0x00, 0x41, 0x30, 0x08, 0x83, 0x93, 0xa9,
  0x13, 0xa3, 0x20, 0x98, 0x45, 0x19, 0x31, 0x58, 0x00, 0x10, 0x04, 0x83,
  0x30, 0x40, 0x19, 0x3b, 0x39, 0x8c, 0x42, 0x49, 0x10, 0x1b, 0x0a, 0xf9,
  0x58, 0x51, 0xc8, 0xc7, 0x84, 0x20, 0x3e, 0xb6, 0x22, 0x01, 0x7d, 0xcc,
  0x38, 0xe4, 0x63, 0x46, 0x22, 0x1f, 0x13, 0x82, 0xf8, 0x58, 0x40, 0xc8,
  0xc7, 0x92, 0x46, 0x3e, 0xb6, 0x34, 0xf2, 0x31, 0x21, 0x88, 0x8f, 0x05,
  0x88, 0x7c, 0x8c, 0x46, 0x8a, 0xf8, 0x58, 0x20, 0xc4, 0xc7, 0xc4, 0x20,
  0x2f, 0xe2, 0x63, 0x62, 0x60, 0x17, 0xf1, 0x31, 0x31, 0x98, 0x8b, 0xf8,
  0x8c, 0x18, 0x2c, 0x00, 0x08, 0x82, 0x41, 0x18, 0xe8, 0x0c, 0xaa, 0x0c,
  0x42, 0xf0, 0x79, 0xdd, 0x88, 0xc1, 0x02, 0x80, 0x20, 0x18, 0x84, 0xc1,
  0xce, 0xa4, 0x0a, 0x31, 0x08, 0x1d, 0xb7, 0x99, 0x60, 0xc9, 0xc7, 0x04,
  0x4c, 0x3e, 0x26, 0x04, 0xf1, 0xb1, 0x60, 0x92, 0x8f, 0x15, 0x9c, 0x7c,
  0xec, 0xe0, 0xe4, 0x63, 0x42, 0x10, 0x1f, 0x0b, 0x2e, 0xf9, 0xd8, 0x98,
  0x14, 0xf1, 0xb1, 0x40, 0x88, 0x8f, 0x41, 0x37, 0x21, 0x9f, 0x11, 0x03,
  0x04, 0x00, 0x41, 0x30, 0x28, 0x05, 0x99, 0xc1, 0x95, 0xab, 0x26, 0x82,
  0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0x28, 0x85, 0x99, 0xc9, 0x15, 0x6a,
  0x26, 0x02, 0x9b, 0x72, 0x42, 0x3e, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60,
  0x50, 0x0a, 0x35, 0xb3, 0x2b, 0xda, 0x4d, 0x04, 0x23, 0x06, 0x08, 0x00,
  0x82, 0x60, 0x50, 0x0a, 0x36, 0xc3, 0x2b, 0x57, 0x4d, 0x04, 0x46, 0xe8,
  0x43, 0x7c, 0x4c, 0xd0, 0x87, 0xf8, 0x58, 0xf2, 0x13, 0xf2, 0x19, 0x31,
  0x40, 0x00, 0x10, 0x04, 0x83, 0x52, 0xd0, 0x19, 0x70, 0x81, 0x7a, 0x22,
  0x18, 0x31, 0x40, 0x00, 0x10, 0x04, 0x83, 0x52, 0xd8, 0x99, 0x70, 0x69,
  0x76, 0x22, 0x30, 0x26, 0x2c, 0xe4, 0x33, 0x62, 0x80, 0x00, 0x20, 0x08,
  0x06, 0xa5, 0xd0, 0x33, 0xe3, 0x32, 0xfd, 0x44, 0x30, 0x62, 0x80, 0x00,
  0x20, 0x08, 0x06, 0xa5, 0xe0, 0x33, 0xe4, 0x02, 0xf5, 0x44, 0x60, 0x84,
  0x48, 0xc4, 0xc7, 0x04, 0x91, 0x88, 0xcf, 0x88, 0x81, 0x01, 0x80, 0x20,
  0x18, 0xb0, 0x42, 0xcf, 0xe0, 0x0a, 0x9a, 0x8c, 0x18, 0x1c, 0x00, 0x08,
  0x82, 0x81, 0x2a, 0xfc, 0x0c, 0xb9, 0x04, 0x72, 0x32, 0x62, 0x50, 0x01,
  0x20, 0x08, 0x06, 0x79, 0x80, 0x36, 0xb6, 0xb2, 0x23, 0x81, 0x49, 0x94,
  0x84, 0x9d, 0xd8, 0x89, 0xce, 0xe8, 0x0c, 0xb8, 0x30, 0x8b, 0x9d, 0x10,
  0x83, 0x9d, 0xd8, 0xc9, 0x68, 0x42, 0x00, 0x8c, 0x26, 0x08, 0xc1, 0x68,
  0xc2, 0x20, 0x8c, 0x18, 0x54, 0x00, 0x08, 0x82, 0x41, 0x1e, 0xb0, 0x8d,
  0xae, 0xec, 0x48, 0xa1, 0x12, 0x29, 0xa1, 0x27, 0x7a, 0xe2, 0x33, 0x3e,
  0x43, 0x2e, 0xd0, 0xa3, 0x27, 0xc8, 0xa1, 0x27, 0x7a, 0x32, 0x9a, 0x10,
  0x00, 0xa3, 0x09, 0x42, 0x30, 0x9a, 0x30, 0x08, 0x23, 0x06, 0x15, 0x00,
  0x82, 0x60, 0x90, 0x07, 0x70, 0xe3, 0x2b, 0x3b, 0x92, 0xb8, 0x44, 0x4b,
  0xf8, 0x89, 0x9f, 0x88, 0x8d, 0xd8, 0xa0, 0x0b, 0x35, 0xf9, 0x09, 0xb3,
  0xf8, 0x89, 0x9f, 0x8c, 0x26, 0x04, 0xc0, 0x68, 0x82, 0x10, 0x8c, 0x26,
  0x0c, 0xc2, 0x68, 0x02, 0x31, 0x18, 0x73, 0x2a, 0xf0, 0x31, 0x06, 0x55,
  0xe0, 0x63, 0x4c, 0xaa, 0xc0, 0xc7, 0x86, 0x55, 0x91, 0x8f, 0x0d, 0xac,
  0x22, 0x1f, 0x1b, 0x5a, 0x45, 0x3e, 0x23, 0x06, 0x06, 0x00, 0x82, 0x60,
  0xf0, 0xb1, 0x0e, 0xbc, 0x0c, 0x23, 0x06, 0x06, 0x00, 0x82, 0x60, 0xf0,
  0xb5, 0x4e, 0xbc, 0x0c, 0x23, 0x06, 0x06, 0x00, 0x82, 0x60, 0xf0, 0xb9,
  0x8e, 0xbc, 0x0c, 0x36, 0xc8, 0x8a, 0x7c, 0x6c, 0x98, 0x15, 0xf9, 0xd8,
  0x40, 0x2b, 0xf2, 0x19, 0x31, 0x30, 0x00, 0x10, 0x04, 0x83, 0x4f, 0x76,
  0xee, 0x65, 0x18, 0x31, 0x30, 0x00, 0x10, 0x04, 0x83, 0x6f, 0x76, 0xf0,
  0x65, 0x18, 0x31, 0x30, 0x00, 0x10, 0x04, 0x83, 0x8f, 0x76, 0xf2, 0x65,
  0xb0, 0x2d, 0x57, 0xe4, 0x63, 0x9b, 0xae, 0xc8, 0xc7, 0xb6, 0x5d, 0x91,
  0xcf, 0x70, 0x84, 0xd7, 0x2b, 0xc4, 0x37, 0x1c, 0xe1, 0xf9, 0x0a, 0xf1,
  0x0d, 0x47, 0x78, 0xbf, 0x42, 0x7c, 0xd3, 0x0d, 0x46, 0x32, 0x4c, 0x37,
  0x18, 0xc9, 0x30, 0xdd, 0x60, 0x24, 0xc3, 0x88, 0x81, 0x02, 0x80, 0x20,
  0x18, 0xd4, 0x81, 0xec, 0xb0, 0x0c, 0xaa, 0x9c, 0x0a, 0xc8, 0xa4, 0x4d,
  0xcb, 0x8c, 0x26, 0x04, 0xc0, 0x68, 0x82, 0x10, 0x8c, 0x26, 0x0c, 0x82,
  0x0d, 0x87, 0x7c, 0x6c, 0x38, 0xe4, 0x63, 0xc3, 0x21, 0x1f, 0x7b, 0x8b,
  0xd1, 0x88, 0x8f, 0xbd, 0xc5, 0x68, 0xc4, 0xc7, 0xde, 0x62, 0x34, 0xe2,
  0x33, 0x62, 0xb0, 0x00, 0x20, 0x08, 0x06, 0x61, 0x70, 0x3e, 0x35, 0x33,
  0x08, 0xc1, 0x20, 0x04, 0x23, 0x06, 0x06, 0x00, 0x82, 0x60, 0xf0, 0xa5,
  0x8f, 0xc8, 0x04, 0x16, 0x14, 0xf2, 0x31, 0xa1, 0x90, 0x8f, 0x0d, 0x85,
  0x7c, 0x46, 0x0c, 0x0e, 0x00, 0x04, 0xc1, 0x60, 0x14, 0x70, 0xa7, 0x66,
  0x76, 0x25, 0x66, 0x46, 0x13, 0x02, 0x60, 0x34, 0x41, 0x08, 0x46, 0x13,
  0x06, 0xc1, 0xe2, 0x65, 0x88, 0x8f, 0xc9, 0xcb, 0x10, 0x1f, 0x9b, 0x97,
  0x21, 0x3e, 0x23, 0x06, 0x0b, 0x00, 0x82, 0x60, 0x10, 0x06, 0xf3, 0x13,
  0x36, 0xb8, 0x71, 0x1b, 0xb6, 0xc1, 0x1e, 0xe9, 0x61, 0x1e, 0x16, 0xec,
  0x8b, 0x7c, 0x2c, 0x70, 0x0f, 0xf9, 0x98, 0xc0, 0x1e, 0xf2, 0xb1, 0x41,
  0x3d, 0xe4, 0x63, 0xbd, 0x31, 0xc4, 0xc7, 0x7a, 0x63, 0x88, 0x8f, 0xf5,
  0xc6, 0x10, 0x9f, 0x39, 0x86, 0x98, 0x19, 0x7a, 0x67, 0x8e, 0x21, 0x18,
  0xc2, 0x67, 0x8e, 0x21, 0x18, 0x7a, 0xc7, 0xee, 0xc3, 0x64, 0xe4, 0x63,
  0xf5, 0x71, 0x32, 0xf2, 0xb1, 0xf9, 0x40, 0x19, 0xf9, 0xdc, 0x80, 0xa0,
  0x1b, 0x10, 0x74, 0x03, 0x82, 0x86, 0x0d, 0x08, 0xd2, 0xe0, 0x89, 0x01,
  0x18, 0x36, 0x20, 0xfe, 0xe2, 0x18, 0x80, 0x61, 0x03, 0x42, 0x2f, 0x54,
  0x62, 0x00, 0x86, 0x0d, 0x88, 0xba, 0x38, 0x06, 0x60, 0x4f, 0x86, 0xdb,
  0x31, 0x9f, 0xf4, 0xa1, 0x00, 0x31, 0x86, 0x1b, 0x82, 0xf5, 0x11, 0x83,
  0x3d, 0x19, 0x74, 0x27, 0x7d, 0xd2, 0x67, 0x96, 0xc1, 0x38, 0x84, 0x61,
  0x03, 0x22, 0xf8, 0x99, 0x01, 0x98, 0x25, 0x40, 0x46, 0x0c, 0x0c, 0x00,
  0x04, 0xc1, 0xe0, 0x4b, 0xa1, 0xf5, 0x39, 0x8f, 0xe1, 0x88, 0x40, 0x66,
  0x88, 0xcf, 0x46, 0x84, 0x66, 0xe4, 0x63, 0xea, 0x11, 0xc0, 0xe7, 0xd6,
  0x03, 0xb1, 0xc3, 0x11, 0xec, 0xd1, 0x32, 0xc4, 0x67, 0xf0, 0xd3, 0x84,
  0x60, 0xba, 0x21, 0x70, 0x04, 0x0b, 0x08, 0x10, 0x5c, 0x40, 0xd8, 0xe9,
  0x86, 0x23, 0x48, 0x46, 0x0c, 0x0c, 0x00, 0x04, 0xc1, 0xe0, 0xa3, 0x21,
  0xfb, 0x89, 0x8f, 0xe1, 0x88, 0xa0, 0x67, 0x88, 0xcf, 0x56, 0xe4, 0x67,
  0xe4, 0x63, 0xf4, 0x11, 0xc0, 0xe7, 0xea, 0x03, 0xb1, 0xc3, 0x11, 0xf6,
  0x81, 0x33, 0xc4, 0x67, 0xfb, 0x73, 0x85, 0x60, 0xba, 0x21, 0xc0, 0x04,
  0x0b, 0x08, 0x10, 0x5c, 0x40, 0xd8, 0xe9, 0x86, 0x23, 0x48, 0x46, 0x0c,
  0x0c, 0x00, 0x04, 0xc1, 0xe0, 0xfb, 0xa1, 0x10, 0xda, 0x8f, 0xe1, 0x88,
  0x00, 0x6d, 0x88, 0xcf, 0x66, 0x44, 0x6d, 0xe4, 0x63, 0xfe, 0x11, 0xc0,
  0xe7, 0xfe, 0x03, 0xb1, 0xc3, 0x11, 0x20, 0x32, 0x36, 0xc4, 0x67, 0x26,
  0x14, 0x06, 0x21, 0x98, 0x6e, 0x08, 0xc4, 0x40, 0xb0, 0x80, 0x00, 0xc1,
  0x05, 0x84, 0x9d, 0x6e, 0x38, 0x82, 0xa4, 0xc8, 0xc0, 0x85, 0x60, 0xd8,
  0x80, 0x30, 0x83, 0x60, 0x00, 0x46, 0x0c, 0x0e, 0x00, 0x04, 0xc1, 0x00,
  0x14, 0x6e, 0x68, 0x76, 0x72, 0x26, 0x76, 0x46, 0x13, 0x02, 0x60, 0xc4,
  0x00, 0x01, 0x40, 0x10, 0x0c, 0x3a, 0x37, 0xb2, 0x9d, 0xe0, 0x7e, 0xee,
  0x67, 0xc4, 0xe0, 0x00, 0x40, 0x10, 0x0c, 0x54, 0xa1, 0x86, 0x74, 0x27,
  0x08, 0x9b, 0x11, 0x03, 0x0a, 0x00, 0x41, 0x30, 0x80, 0x83, 0x32, 0x8a,
  0x9f, 0x00, 0x86, 0xe4, 0x07, 0x86, 0x60, 0x08, 0x86, 0xb8, 0xc8, 0x70,
  0x1b, 0x3b, 0xa8, 0x03, 0x3a, 0xf0, 0x9b, 0x10, 0xa2, 0x33, 0x38, 0x8c,
  0x59, 0x02, 0x64, 0xa0, 0xe2, 0x10, 0x0e, 0x96, 0x33, 0xf6, 0x64, 0x18,
  0x21, 0x19, 0x92, 0xa1, 0x31, 0x04, 0x61, 0x86, 0xc6, 0x10, 0x86, 0x1b,
  0x1a, 0x43, 0x20, 0x66, 0x68, 0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c, 0xd4,
  0xc0, 0x8d, 0x5a, 0x67, 0x84, 0x46, 0x0c, 0x0c, 0x00, 0x04, 0xc1, 0x40,
  0x0d, 0xde, 0xc8, 0x75, 0x4c, 0x68, 0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c,
  0xd4, 0x20, 0x8e, 0x5c, 0xa7, 0x84, 0x46, 0x0c, 0x0c, 0x00, 0x04, 0xc1,
  0x40, 0x0d, 0xe4, 0xe8, 0x75, 0x50, 0xe8, 0x08, 0x42, 0xdd, 0x40, 0x28,
  0x13, 0x02, 0xfa, 0x9c, 0x41, 0xa8, 0x2b, 0x08, 0x65, 0x42, 0x40, 0x9f,
  0x11, 0x03, 0x05, 0x00, 0x41, 0x30, 0xa8, 0x83, 0x39, 0x6a, 0x9f, 0xb2,
  0x41, 0x1b, 0x30, 0x52, 0x21, 0xf7, 0x19, 0x4d, 0x08, 0x80, 0xd1, 0x04,
  0x21, 0x18, 0x4d, 0x18, 0x84, 0xd1, 0x04, 0x62, 0x18, 0x31, 0x50, 0x00,
  0x10, 0x04, 0x83, 0x3a, 0xc0, 0x23, 0xf9, 0x51, 0x9b, 0xb6, 0x39, 0x9f,
  0x17, 0x9a, 0x9f, 0xd1, 0x84, 0x00, 0x18, 0x4d, 0x10, 0x82, 0xd1, 0x84,
  0x41, 0x18, 0x4d, 0x20, 0x86, 0x11, 0x03, 0x05, 0x00, 0x41, 0x30, 0xa8,
  0x83, 0x3e, 0xba, 0x9f, 0xb7, 0x91, 0x1b, 0xf2, 0xa1, 0x21, 0xfc, 0x19,
  0x4d, 0x08, 0x80, 0xd1, 0x04, 0x21, 0x18, 0x4d, 0x18, 0x84, 0xd1, 0x04,
  0x62, 0x18, 0x31, 0x50, 0x00, 0x10, 0x04, 0x83, 0x3a, 0x10, 0x25, 0xfe,
  0xa1, 0x9b, 0xbb, 0x91, 0xa1, 0x1c, 0xea, 0x9f, 0xd1, 0x84, 0x00, 0x18,
  0x4d, 0x10, 0x82, 0xd1, 0x84, 0x41, 0x18, 0x4d, 0x20, 0x86, 0x11, 0x83,
  0x03, 0x00, 0x41, 0x30, 0x18, 0x05, 0x3f, 0xda, 0x9f, 0xd0, 0xb1, 0x9f,
  0x11, 0x83, 0x03, 0x00, 0x41, 0x30, 0x18, 0x85, 0x3f, 0xe2, 0x1f, 0xd1,
  0xc9, 0xa1, 0x11, 0x83, 0x03, 0x00, 0x41, 0x30, 0x18, 0x05, 0x50, 0xea,
  0x9f, 0xd1, 0xd9, 0xa1, 0xd1, 0x84, 0x00, 0x18, 0x4d, 0x10, 0x82, 0xd1,
  0x84, 0x41, 0x18, 0x4d, 0x20, 0x86, 0x11, 0x83, 0x03, 0x00, 0x41, 0x30,
  0x38, 0x05, 0x51, 0x22, 0xa1, 0x3d, 0x42, 0xa3, 0x11, 0x83, 0x03, 0x00,
  0x41, 0x30, 0x38, 0x85, 0x51, 0x2a, 0xa1, 0x3f, 0x4a, 0xa3, 0x11, 0x83,
  0x03, 0x00, 0x41, 0x30, 0x38, 0x05, 0x52, 0x32, 0xa1, 0x3d, 0x52, 0xa3,
  0x11, 0x83, 0x03, 0x00, 0x41, 0x30, 0x38, 0x85, 0x52, 0x3a, 0x21, 0x3f,
  0x6a, 0xa3, 0x11, 0x83, 0x03, 0x00, 0x41, 0x30, 0x38, 0x05, 0x53, 0x42,
  0x21, 0x51, 0x72, 0xa3, 0x11, 0x83, 0x03, 0x00, 0x41, 0x30, 0x38, 0x85,
  0x53, 0x4a, 0x21, 0x3f, 0x7a, 0xa3, 0x11, 0x83, 0x03, 0x00, 0x41, 0x30,
  0x38, 0x05, 0x54, 0x52, 0xa1, 0x50, 0x6a, 0xa3, 0x11, 0x83, 0x03, 0x00,
  0x41, 0x30, 0x38, 0x85, 0x54, 0x5a, 0xa1, 0x52, 0x72, 0xa3, 0x11, 0x83,
  0x03, 0x00, 0x41, 0x30, 0x38, 0x05, 0x55, 0x62, 0xa1, 0x50, 0x7a, 0xa3,
  0x11, 0x83, 0x03, 0x00, 0x41, 0x30, 0x38, 0x85, 0x55, 0x6a, 0x21, 0x52,
  0x92, 0xa3, 0x11, 0x83, 0x03, 0x00, 0x41, 0x30, 0x38, 0x05, 0x56, 0x72,
  0x21, 0x54, 0x9a, 0xa3, 0x11, 0x83, 0x03, 0x00, 0x41, 0x30, 0x38, 0x85,
  0x56, 0x7a, 0x21, 0x52, 0xa2, 0x23, 0x63, 0x48, 0x45, 0x3e, 0x23, 0x06,
  0x08, 0x00, 0x82, 0x60, 0x50, 0x0a, 0xb1, 0x74, 0x43, 0xa4, 0xa2, 0x04,
  0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0x50, 0x0a, 0xb2, 0x84, 0x43, 0xa4,
  0x82, 0x04, 0x16, 0x18, 0xd0, 0xb1, 0x07, 0x55, 0xe4, 0x33, 0x62, 0x80,
  0x00, 0x20, 0x08, 0x06, 0xa5, 0x50, 0x4b, 0x3b, 0x84, 0x2a, 0x4d, 0x30,
  0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0xa5, 0x60, 0x4b, 0x3c, 0x84, 0x2a,
  0x4b, 0x60, 0x41, 0x02, 0x1d, 0x93, 0x58, 0x45, 0x3e, 0x23, 0x06, 0x08,
  0x00, 0x82, 0x60, 0x50, 0x0a, 0xb9, 0xf4, 0x43, 0xac, 0x02, 0x05, 0x23,
  0x06, 0x08, 0x00, 0x82, 0x60, 0x50, 0x0a, 0xba, 0x04, 0x46, 0xac, 0xe2,
  0x04, 0x16, 0x30, 0xd0, 0xb1, 0x44, 0x0e, 0xe4, 0x33, 0x62, 0x80, 0x00,
  0x20, 0x08, 0x06, 0xa5, 0xd0, 0x4b, 0x63, 0x64, 0xc8, 0x41, 0x30, 0x62,
  0x80, 0x00, 0x20, 0x08, 0x06, 0xa5, 0xe0, 0x4b, 0x64, 0x34, 0xc8, 0x41,
  0x60, 0x81, 0x1c, 0x40, 0xc7, 0x9a, 0x38, 0x90, 0xcf, 0x88, 0x01, 0x02,
  0x80, 0x20, 0x18, 0x94, 0x42, 0x38, 0x9d, 0x91, 0x12, 0x07, 0xc1, 0x88,
  0x01, 0x02, 0x80, 0x20, 0x18, 0x94, 0x82, 0x38, 0xa1, 0xd1, 0x11, 0x07,
  0x81, 0x05, 0x71, 0x00, 0x1d, 0x8b, 0xe0, 0x40, 0x3e, 0x23, 0x06, 0x08,
  0x00, 0x82, 0x60, 0x50, 0x0a, 0xe5, 0xb4, 0x46, 0x0e, 0x1c, 0x04, 0x23,
  0x06, 0x08, 0x00, 0x82, 0x60, 0x50, 0x0a, 0xe6, 0xc4, 0x46, 0x0b, 0x1c,
  0x04, 0x16, 0xc0, 0x01, 0x74, 0xac, 0x7a, 0x03, 0xf9, 0x8c, 0x18, 0x20,
  0x00, 0x08, 0x82, 0x41, 0x29, 0xa4, 0xd3, 0x1b, 0x49, 0x6f, 0x10, 0x8c,
  0x18, 0x20, 0x00, 0x08, 0x82, 0x41, 0x29, 0xa8, 0x13, 0x1c, 0x3d, 0x6f,
  0x10, 0x58, 0xf0, 0x06, 0xd0, 0xb1, 0x86, 0x0d, 0xe4, 0x33, 0x62, 0x80,
  0x00, 0x20, 0x08, 0x06, 0xa5, 0xd0, 0x4e, 0x73, 0xa4, 0xb0, 0x41, 0x30,
  0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0xa5, 0xe0, 0x4e, 0x74, 0x74, 0xb0,
  0x41, 0x30, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0xa5, 0xf0, 0x4e, 0x75,
  0x44, 0xb0, 0x41, 0x30, 0x62, 0x60, 0x00, 0x20, 0x08, 0x06, 0xac, 0xc0,
  0x4e, 0x67, 0x84, 0x3f, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0xa0, 0x0a,
  0xee, 0x34, 0x47, 0x41, 0x08, 0x8d, 0x18, 0x3c, 0x00, 0x08, 0x82, 0xc1,
  0x1e, 0xd8, 0x13, 0x19, 0x81, 0x4f, 0xd0, 0x0a, 0xaa, 0x50, 0x42, 0x25,
  0x94, 0x4e, 0xe9, 0xf4, 0x46, 0x27, 0x34, 0x9a, 0x10, 0x00, 0x23, 0x06,
  0x0f, 0x00, 0x82, 0x60, 0xb0, 0x07, 0xf8, 0x64, 0x46, 0xe0, 0x33, 0xbc,
  0x02, 0x2b, 0x9c, 0xd0, 0x09, 0xad, 0xd3, 0x3a, 0xc5, 0x51, 0x0a, 0x8d,
  0x26, 0x04, 0xc0, 0x88, 0xc1, 0x02, 0x80, 0x20, 0x18, 0x84, 0xc1, 0x4a,
  0xe5, 0x11, 0xc9, 0x84, 0x8c, 0xbf, 0x90, 0x4c, 0xc8, 0xf8, 0xcb, 0x88,
  0x81, 0x01, 0x80, 0x20, 0x18, 0x7c, 0x2d, 0xf5, 0x4e, 0xc1, 0x88, 0xc1,
  0x01, 0x80, 0x20, 0x18, 0xb0, 0x81, 0x49, 0xd5, 0x52, 0xc0, 0x42, 0x16,
  0x04, 0xf2, 0x31, 0x17, 0x0a, 0xe2, 0x63, 0x81, 0x40, 0x1f, 0x0b, 0xc4,
  0x48, 0x3e, 0x23, 0x06, 0x06, 0x00, 0x82, 0x60, 0xf0, 0xcd, 0x94, 0x3d,
  0x05, 0x23, 0x06, 0x0b, 0x00, 0x82, 0x60, 0x10, 0x06, 0x33, 0x15, 0x4a,
  0x2c, 0x93, 0x32, 0x26, 0x33, 0x16, 0x62, 0x11, 0x16, 0x23, 0x06, 0x06,
  0x00, 0x82, 0x60, 0xf0, 0xd5, 0xd4, 0x3d, 0x05, 0x23, 0x06, 0x07, 0x00,
  0x82, 0x60, 0xc0, 0x06, 0x2e, 0x75, 0x4a, 0x01, 0x19, 0x59, 0x10, 0xc8,
  0xc7, 0x6c, 0x28, 0x88, 0x8f, 0x05, 0x02, 0x7d, 0x2c, 0x38, 0xe4, 0x63,
  0x41, 0x0e, 0xc1, 0x67, 0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c, 0x3e, 0x9e,
  0x12, 0xa5, 0xc0, 0x82, 0x1d, 0x82, 0x8f, 0x91, 0x51, 0x40, 0x9f, 0x11,
  0x83, 0x05, 0x00, 0x41, 0x30, 0x08, 0x03, 0x9f, 0x62, 0xa5, 0x9b, 0xa1,
  0x99, 0x98, 0xa9, 0x0b, 0xba, 0x98, 0x8b, 0x11, 0x03, 0x03, 0x00, 0x41,
  0x30, 0xf8, 0xc0, 0x6a, 0xa4, 0x02, 0xf3, 0x0d, 0xdf, 0x90, 0x8f, 0x81,
  0x86, 0x6f, 0xc8, 0xc7, 0x40, 0xe3, 0x37, 0xe4, 0x63, 0xa0, 0x01, 0x1e,
  0xf2, 0xb1, 0xd1, 0x18, 0xe2, 0x63, 0xa3, 0x31, 0xc4, 0xc7, 0x46, 0x63,
  0x88, 0x8f, 0x0d, 0xe6, 0x21, 0x1f, 0x1b, 0xce, 0x43, 0x3e, 0x36, 0xa0,
  0x87, 0x7c, 0x2c, 0x35, 0xea, 0x08, 0x3e, 0x96, 0x1a, 0x76, 0x04, 0x1f,
  0x4b, 0x8d, 0x3b, 0x82, 0x8f, 0x0d, 0xea, 0x21, 0x1f, 0x1b, 0xd6, 0x43,
  0x3e, 0x36, 0xb0, 0x87, 0x7c, 0x6c, 0xe0, 0x23, 0xf8, 0xd8, 0xd0, 0x47,
  0xf0, 0xb1, 0xc1, 0x8f, 0xe0, 0x63, 0x83, 0x7c, 0xc8, 0xc7, 0x86, 0xf9,
  0x90, 0x8f, 0x0d, 0xf4, 0x21, 0x1f, 0x6b, 0x8d, 0xd4, 0x88, 0x8f, 0xb5,
  0x46, 0x6a, 0xc4, 0xc7, 0x5a, 0x23, 0x35, 0xe2, 0x33, 0x62, 0xb0, 0x00,
  0x20, 0x08, 0x06, 0x61, 0x90, 0x57, 0xe7, 0x34, 0x08, 0xc1, 0x20, 0x04,
  0x23, 0x06, 0x06, 0x00, 0x82, 0x60, 0xf0, 0xed, 0x15, 0x2d, 0x05, 0x16,
  0x14, 0xf2, 0x31, 0xa1, 0x90, 0x8f, 0x0d, 0x85, 0x7c, 0x46, 0x0c, 0x0c,
  0x00, 0x04, 0xc1, 0xe0, 0xfb, 0x2b, 0xb1, 0x5a, 0x83, 0x11, 0x83, 0x05,
  0x00, 0x41, 0x30, 0x08, 0x83, 0xbf, 0x6a, 0xa7, 0xd7, 0x70, 0x8d, 0xd6,
  0x20, 0x06, 0x61, 0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c, 0xbe, 0xd0, 0x22,
  0xab, 0x60, 0xc4, 0x60, 0x01, 0x40, 0x10, 0x0c, 0xc2, 0x20, 0xb4, 0xde,
  0x49, 0x6f, 0xee, 0x86, 0x6e, 0x8c, 0x82, 0x18, 0x31, 0x30, 0x00, 0x10,
  0x04, 0x83, 0x6f, 0xb4, 0xcc, 0x2a, 0xb0, 0x10, 0x51, 0x25, 0xf9, 0x18,
  0x41, 0xc8, 0xc7, 0x02, 0x41, 0x3e, 0x16, 0xe0, 0x12, 0x7c, 0xcc, 0x94,
  0x92, 0xf8, 0x8c, 0x18, 0x18, 0x00, 0x08, 0x82, 0xc1, 0x97, 0x5a, 0xed,
  0x14, 0x58, 0x60, 0x4b, 0xf2, 0x19, 0x31, 0x30, 0x00, 0x10, 0x04, 0x83,
  0x6f, 0xb5, 0xe0, 0x29, 0xb0, 0xa0, 0x90, 0x8f, 0x05, 0xab, 0x04, 0x1f,
  0x63, 0x25, 0x37, 0x88, 0xcf, 0x88, 0x81, 0x01, 0x80, 0x20, 0x18, 0x7c,
  0xaf, 0x35, 0x4f, 0x81, 0x05, 0xbc, 0x24, 0x9f, 0x11, 0x03, 0x03, 0x00,
  0x41, 0x30, 0xf8, 0x62, 0xcb, 0x9e, 0x02, 0x0b, 0x16, 0xf9, 0x58, 0x10,
  0x4b, 0xf0, 0xb1, 0xe0, 0x90, 0x8f, 0xd1, 0x01, 0x1d, 0xc8, 0xc7, 0x02,
  0x74, 0x82, 0x8f, 0x51, 0x94, 0x7c, 0x2c, 0x10, 0xe4, 0x63, 0xc1, 0x2d,
  0xc1, 0xc7, 0x82, 0x40, 0x3e, 0x16, 0xb8, 0x93, 0x7c, 0x46, 0x0c, 0x0e,
  0x00, 0x04, 0xc1, 0x80, 0x0d, 0x68, 0xab, 0xa5, 0xd4, 0x29, 0x30, 0x24,
  0xa0, 0x8f, 0xf1, 0x52, 0x17, 0x9f, 0x11, 0x03, 0x03, 0x00, 0x41, 0x30,
  0xf8, 0x7e, 0x6b, 0xa4, 0x02, 0x0b, 0xd8, 0x49, 0x3e, 0x23, 0x06, 0x06,
  0x00, 0x82, 0x60, 0xf0, 0x85, 0x97, 0x49, 0x05, 0x06, 0x4e, 0x5d, 0x7c,
  0xcc, 0xb9, 0x27, 0xf9, 0x58, 0x20, 0xc8, 0xc7, 0x02, 0x30, 0x80, 0x8f,
  0x91, 0x53, 0x40, 0x1f, 0x9b, 0xfa, 0x40, 0x3e, 0x66, 0x4e, 0x72, 0x10,
  0x1f, 0x43, 0x02, 0xf9, 0x58, 0x40, 0x07, 0xf0, 0x31, 0xc7, 0x4c, 0xe4,
  0x63, 0x81, 0x21, 0x1f, 0x0b, 0x06, 0xf9, 0x58, 0x70, 0xc0, 0xc7, 0x62,
  0xe1, 0x6d, 0xe4, 0x63, 0x41, 0x1c, 0xc8, 0xc7, 0x82, 0x41, 0x3e, 0xe6,
  0xa5, 0x82, 0x7c, 0x2c, 0x9e, 0xfc, 0x20, 0x3e, 0x36, 0x05, 0xf2, 0xb1,
  0x00, 0x14, 0xe0, 0x63, 0x4a, 0x20, 0x1f, 0x0b, 0x0a, 0xf8, 0x98, 0x2e,
  0xe4, 0x8d, 0x7c, 0x2c, 0xd0, 0x03, 0xf9, 0x58, 0x30, 0xc8, 0xc7, 0xce,
  0x60, 0x16, 0xe4, 0x63, 0xfa, 0x84, 0x0a, 0xf1, 0x31, 0x2e, 0x90, 0x8f,
  0x05, 0xaa, 0x00, 0x1f, 0x9b, 0x02, 0xf9, 0x58, 0x50, 0xc0, 0xc7, 0xc6,
  0x61, 0x74, 0xe4, 0x63, 0xc1, 0x28, 0xc8, 0xc7, 0x82, 0x41, 0x3e, 0xc6,
  0x0b, 0xaa, 0x23, 0x1f, 0x0b, 0xf8, 0x41, 0x3e, 0xd6, 0x0b, 0xab, 0x23,
  0x1f, 0x0b, 0xfc, 0x41, 0x3e, 0xe6, 0x0b, 0xac, 0x23, 0x1f, 0x0b, 0x40,
  0x42, 0x3e, 0x86, 0x1b, 0xb6, 0x20, 0x1f, 0xc3, 0x0d, 0x5b, 0x90, 0x8f,
  0xe1, 0x86, 0x2d, 0xc8, 0xc7, 0x94, 0x01, 0x3e, 0x16, 0x8c, 0x84, 0x7c,
  0x4c, 0x89, 0x15, 0xf8, 0x58, 0x20, 0xc0, 0xc7, 0x2e, 0x03, 0x3e, 0x16,
  0x9c, 0x84, 0x7c, 0x8c, 0xa1, 0x15, 0xf8, 0x58, 0x20, 0xc0, 0xc7, 0xc8,
  0x20, 0x81, 0x8f, 0x05, 0x2b, 0x21, 0x1f, 0x73, 0x6e, 0x05, 0x3e, 0x16,
  0x08, 0xf0, 0x19, 0x31, 0x38, 0x00, 0x10, 0x04, 0x03, 0x50, 0x28, 0xb1,
  0xd0, 0x3a, 0xa9, 0xbf, 0x1a, 0x4d, 0x08, 0x86, 0xe1, 0x86, 0x80, 0xbf,
  0xc0, 0x60, 0x96, 0x41, 0x49, 0x82, 0x39, 0x86, 0xb8, 0x62, 0xfa, 0x6b,
  0x8e, 0x21, 0x48, 0x42, 0x6c, 0x8e, 0x21, 0x30, 0xfa, 0x6b, 0x96, 0x60,
  0x19, 0x4d, 0x58, 0x8d, 0x61, 0x34, 0x81, 0x35, 0x84, 0xd1, 0x84, 0xd6,
  0x08, 0x46, 0x13, 0x5c, 0x03, 0x30, 0xb7, 0x08, 0xe4, 0x33, 0x62, 0x80,
  0x00, 0x20, 0x08, 0x06, 0xa5, 0xe0, 0x62, 0xb4, 0xb5, 0x16, 0x43, 0x30,
  0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0xa5, 0xf0, 0x62, 0xb5, 0x85, 0x16,
  0x45, 0x30, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0xa5, 0x00, 0x63, 0xb6,
  0x55, 0x16, 0x47, 0x60, 0x81, 0x58, 0xd0, 0x67, 0x34, 0xa1, 0x36, 0x86,
  0xd1, 0x04, 0xdb, 0x10, 0x46, 0x13, 0x6e, 0x23, 0x18, 0x4d, 0xc0, 0x0d,
  0xc0, 0xee, 0x22, 0x90, 0xcf, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x94,
  0xc2, 0x8d, 0xf5, 0x16, 0x5d, 0x0c, 0xc1, 0x88, 0x01, 0x02, 0x80, 0x20,
  0x18, 0x94, 0x02, 0x8e, 0xf9, 0x56, 0x5c, 0x14, 0xc1, 0x88, 0x01, 0x02,
  0x80, 0x20, 0x18, 0x94, 0x42, 0x8e, 0xfd, 0x96, 0x5b, 0x1c, 0x81, 0x05,
  0x6b, 0x41, 0x9f, 0x11, 0x83, 0x07, 0x00, 0x41, 0x30, 0xd8, 0x83, 0x1f,
  0x6b, 0xad, 0x92, 0x52, 0x8b, 0x40, 0x71, 0x2b, 0xb7, 0x92, 0x31, 0x19,
  0xc3, 0x2d, 0xb8, 0x1a, 0x4d, 0x08, 0x80, 0xd1, 0x04, 0x21, 0x18, 0x4d,
  0x18, 0x04, 0x1b, 0xca, 0x20, 0x3e, 0x36, 0x88, 0x41, 0x7c, 0x6c, 0xf8,
  0xe2, 0x63, 0x43, 0x69, 0xc9, 0xc7, 0x06, 0xd3, 0x92, 0x8f, 0x0d, 0xa7,
  0x25, 0x1f, 0x1b, 0xd6, 0x00, 0x3e, 0x36, 0xa0, 0x01, 0x7c, 0x6c, 0x28,
  0x03, 0xf8, 0xcc, 0x31, 0xcc, 0xd6, 0xf0, 0x63, 0x73, 0x0c, 0xc1, 0x30,
  0x66, 0x73, 0x0c, 0xc1, 0xf0, 0x63, 0xb3, 0x04, 0xcb, 0x40, 0xc5, 0x21,
  0x28, 0xa6, 0x90, 0x0c, 0x1b, 0x10, 0x31, 0x12, 0x0c, 0x00, 0x86, 0x03,
  0x01, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xc6, 0x43, 0x00, 0xd3,
  0x14, 0xd9, 0xce, 0xf1, 0x00, 0xd8, 0xe2, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x01, 0x31, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x5b, 0x8a, 0x90, 0x09,
  0x58, 0xe1, 0xa0, 0x85, 0x2d, 0x45, 0xc9, 0x04, 0xa9, 0x70, 0xd0, 0xc2,
  0x96, 0x22, 0x6d, 0x02, 0x56, 0x38, 0x68, 0x61, 0xcb, 0xf0, 0x36, 0x41,
  0x2a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x61, 0x20, 0x00, 0x00,
  0x75, 0x06, 0x00, 0x00, 0x13, 0x04, 0x4e, 0x2c, 0x10, 0x00, 0x00, 0x00,
  0x58, 0x00, 0x00, 0x00, 0x04, 0x28, 0x81, 0x32, 0x28, 0x87, 0x11, 0x80,
  0x22, 0x28, 0x0f, 0xe2, 0x8c, 0x00, 0x50, 0xa3, 0x08, 0x4a, 0x80, 0x10,
  0x85, 0x54, 0x26, 0x25, 0x52, 0x60, 0xe5, 0x3f, 0x50, 0xba, 0x02, 0xc5,
  0x56, 0x38, 0xc5, 0x51, 0x2c, 0x85, 0x52, 0xb4, 0x02, 0x85, 0x19, 0x50,
  0x09, 0x25, 0x2c, 0x50, 0x58, 0x45, 0x52, 0x92, 0x04, 0x25, 0x09, 0x51,
  0x90, 0x01, 0x25, 0x89, 0x50, 0x92, 0x0c, 0x85, 0x57, 0x5c, 0x85, 0x50,
  0x96, 0x02, 0xe5, 0x56, 0xb0, 0x03, 0xe5, 0x2a, 0x50, 0xb0, 0x02, 0x45,
  0x3b, 0x50, 0x76, 0x05, 0x33, 0x03, 0x50, 0x2a, 0xe5, 0x52, 0x18, 0x05,
  0x52, 0x40, 0x05, 0x2c, 0x50, 0x98, 0x08, 0x65, 0x2a, 0x50, 0xa8, 0x02,
  0xe5, 0x57, 0x32, 0xc5, 0x57, 0xfe, 0xff, 0x07, 0x25, 0x2a, 0x50, 0xa4,
  0x02, 0x65, 0x54, 0x1a, 0x05, 0x1a, 0x50, 0x9a, 0x02, 0xa5, 0x3a, 0x50,
  0x9c, 0x02, 0x74, 0x18, 0x01, 0x98, 0x01, 0x20, 0xc2, 0x18, 0x01, 0x08,
  0x82, 0x20, 0xfa, 0x8d, 0x11, 0xec, 0xfe, 0x28, 0x93, 0x60, 0x30, 0x46,
  0x00, 0x82, 0x20, 0x08, 0xff, 0xc2, 0x18, 0x01, 0x08, 0x82, 0x20, 0xf8,
  0x8d, 0x11, 0x80, 0x20, 0x8c, 0xe7, 0x62, 0x30, 0x46, 0xd0, 0xf7, 0x2d,
  0x8b, 0x6b, 0x63, 0x04, 0x20, 0x08, 0x82, 0x2a, 0x18, 0x8c, 0x11, 0xa8,
  0x78, 0x7d, 0xca, 0xde, 0x18, 0x81, 0x8a, 0xd7, 0xa7, 0xec, 0x0b, 0x63,
  0x04, 0x20, 0x08, 0x82, 0xf8, 0x36, 0x46, 0x00, 0x82, 0x20, 0x08, 0x7b,
  0x63, 0x04, 0x20, 0x08, 0x82, 0x78, 0x18, 0x8c, 0x11, 0x80, 0x20, 0x08,
  0xe2, 0xbf, 0x30, 0x46, 0x60, 0xde, 0xeb, 0x2a, 0x7b, 0x63, 0x04, 0x31,
  0x0f, 0xf6, 0xb9, 0x37, 0x46, 0xa0, 0xb3, 0xe6, 0x1c, 0x82, 0xc1, 0x18,
  0xc1, 0xbb, 0xa7, 0xe5, 0xfd, 0x8d, 0x11, 0xb8, 0x7d, 0x2c, 0xda, 0xde,
  0x18, 0x01, 0x08, 0x82, 0x20, 0xfc, 0x8d, 0x11, 0x80, 0x20, 0x08, 0x82,
  0x60, 0x30, 0x46, 0x00, 0x82, 0x20, 0x08, 0x82, 0xc2, 0x08, 0xc0, 0x18,
  0x01, 0x08, 0x82, 0x20, 0xfe, 0xcd, 0x00, 0x50, 0x72, 0x0e, 0xc1, 0x0d,
  0x76, 0x61, 0x0e, 0xc1, 0x0d, 0x6e, 0x61, 0x0e, 0xc1, 0x15, 0xd8, 0x60,
  0x0e, 0x01, 0x1f, 0xda, 0x60, 0x0e, 0xc1, 0x1d, 0xf2, 0x61, 0x0e, 0xc1,
  0x1d, 0xe4, 0x60, 0x0e, 0xc1, 0x0d, 0x74, 0x61, 0x0e, 0xc1, 0x0d, 0x70,
  0x61, 0x0e, 0xc1, 0x1d, 0x6a, 0x61, 0x0e, 0xa1, 0x0e, 0xd8, 0x60, 0x0e,
  0x61, 0x1d, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x16, 0x82, 0x41,
  0x62, 0x21, 0x18, 0x14, 0x16, 0x0a, 0x30, 0x62, 0x60, 0x00, 0x20, 0x08,
  0x06, 0xae, 0xd0, 0x0f, 0x78, 0x10, 0x8c, 0x18, 0x1c, 0x00, 0x08, 0x82,
  0x81, 0x2a, 0x80, 0x44, 0x29, 0x04, 0xcc, 0x88, 0xc1, 0x01, 0x80, 0x20,
  0x18, 0x80, 0x82, 0x49, 0x88, 0x42, 0x10, 0x0a, 0xa3, 0x09, 0x41, 0x30,
  0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x5d, 0x4f, 0x94, 0x42, 0x60, 0x0e,
  0xe6, 0x30, 0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0xaa, 0x40, 0x12, 0xa9,
  0x10, 0x3c, 0x23, 0x06, 0x05, 0x00, 0x82, 0x60, 0x70, 0x07, 0x2e, 0x11,
  0x07, 0x23, 0x06, 0x05, 0x00, 0x82, 0x60, 0x70, 0x07, 0x31, 0x11, 0x07,
  0x15, 0x08, 0x30, 0x9a, 0x70, 0x08, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60,
  0xd0, 0x8d, 0xc5, 0x2a, 0x04, 0xec, 0xc0, 0x0e, 0x23, 0x06, 0x07, 0x00,
  0x82, 0x60, 0xa0, 0x0a, 0x2a, 0xf1, 0x0a, 0x01, 0x35, 0x62, 0x50, 0x00,
  0x20, 0x08, 0x06, 0x77, 0x70, 0x13, 0x75, 0x30, 0x62, 0xa0, 0x00, 0x20,
  0x08, 0x06, 0x64, 0x30, 0x16, 0xb3, 0x80, 0x14, 0xb6, 0x50, 0x0f, 0xb4,
  0x30, 0x9a, 0x10, 0x00, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0xd0, 0xa1,
  0x05, 0x2c, 0x04, 0xf1, 0x10, 0x0f, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60,
  0xa0, 0x0a, 0x2f, 0x41, 0x0b, 0x81, 0x37, 0x62, 0xa0, 0x00, 0x20, 0x08,
  0x06, 0x64, 0x70, 0x16, 0xb7, 0xc0, 0x24, 0x24, 0x91, 0x0f, 0xb8, 0x30,
  0x9a, 0x10, 0x00, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0xd0, 0xb1, 0x05,
  0x2d, 0x04, 0xf5, 0x50, 0x0f, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0xa0,
  0x0a, 0x33, 0x81, 0x0b, 0x01, 0x37, 0x62, 0xa0, 0x00, 0x20, 0x08, 0x06,
  0x64, 0xb0, 0x16, 0xbb, 0x00, 0x35, 0xe1, 0xd0, 0x0f, 0xbc, 0x30, 0x9a,
  0x10, 0x00, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0xd0, 0xc1, 0x05, 0x2e,
  0x04, 0xf9, 0x90, 0x0f, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0xa0, 0x0a,
  0x37, 0xc1, 0x0b, 0xc1, 0x37, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x9d,
  0x5c, 0xe8, 0x02, 0x2d, 0xec, 0xc3, 0x3e, 0x8c, 0x18, 0x1c, 0x00, 0x08,
  0x82, 0x81, 0x2a, 0xe4, 0x84, 0x2f, 0x04, 0x67, 0x30, 0x62, 0x80, 0x00,
  0x20, 0x08, 0x06, 0x1d, 0x5d, 0xf0, 0x82, 0x3a, 0xf4, 0x43, 0x3f, 0x8c,
  0x18, 0x1c, 0x00, 0x08, 0x82, 0x81, 0x2a, 0xec, 0x04, 0x38, 0x04, 0x69,
  0x30, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x9d, 0x5d, 0xf8, 0xc2, 0x4c,
  0xfc, 0xc3, 0x3f, 0x8c, 0x18, 0x1c, 0x00, 0x08, 0x82, 0x81, 0x2a, 0xf4,
  0x84, 0x38, 0x04, 0x6c, 0x30, 0x62, 0xa0, 0x00, 0x20, 0x08, 0x06, 0x64,
  0x50, 0x17, 0xe5, 0xa0, 0x5d, 0x38, 0x71, 0x12, 0xe6, 0x30, 0x9a, 0x10,
  0x00, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0xd0, 0xe9, 0x85, 0x38, 0x04,
  0x23, 0x31, 0x12, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0xa0, 0x0a, 0x61,
  0x61, 0x0e, 0x01, 0x1a, 0x8c, 0x18, 0x28, 0x00, 0x08, 0x82, 0x01, 0x19,
  0xe4, 0x45, 0x3a, 0x78, 0x9b, 0x3a, 0xac, 0x84, 0x3a, 0x8c, 0x26, 0x04,
  0xc0, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x74, 0x7e, 0x61, 0x0e, 0xc1,
  0x49, 0x9c, 0xc4, 0x88, 0x41, 0x01, 0x80, 0x20, 0x18, 0xdc, 0xc1, 0x5b,
  0xdc, 0xc3, 0x88, 0x81, 0x02, 0x80, 0x20, 0x18, 0x90, 0x41, 0x5f, 0xb4,
  0x83, 0x18, 0x7c, 0x3c, 0xf1, 0x12, 0xee, 0x30, 0x9a, 0x10, 0x00, 0xc3,
  0x0d, 0x81, 0x58, 0x84, 0xc1, 0x74, 0x03, 0x59, 0x94, 0x43, 0x50, 0x41,
  0x21, 0xc3, 0x0d, 0x44, 0x59, 0x80, 0xc1, 0x88, 0xc1, 0x01, 0x80, 0x20,
  0x18, 0xa8, 0x02, 0x5b, 0xc4, 0x03, 0x22, 0x07, 0xb3, 0x0c, 0x44, 0x20,
  0xd4, 0x00, 0x12, 0x3a, 0x62, 0xa0, 0x00, 0x20, 0x08, 0x06, 0x64, 0x50,
  0x1a, 0xf5, 0x20, 0x04, 0xed, 0x60, 0x13, 0xf6, 0x30, 0x9a, 0x10, 0x00,
  0xa3, 0x09, 0x42, 0x30, 0xdc, 0x40, 0x1c, 0x60, 0x50, 0x43, 0x3b, 0x60,
  0x0d, 0xe5, 0xa0, 0xb3, 0x0c, 0xc2, 0x30, 0x54, 0x61, 0x0e, 0x3a, 0x4b,
  0x50, 0x54, 0x01, 0x0f, 0x38, 0x4b, 0x50, 0x8c, 0x18, 0x28, 0x00, 0x08,
  0x82, 0x01, 0x19, 0xb4, 0x46, 0x3f, 0x28, 0x4c, 0x3d, 0xf4, 0x84, 0x3f,
  0x8c, 0x26, 0x04, 0xc0, 0x68, 0x82, 0x10, 0x8c, 0x26, 0x0c, 0xc2, 0x2c,
  0x41, 0x31, 0xd0, 0x81, 0x18, 0x04, 0x23, 0x40, 0xc3, 0x40, 0x07, 0x62,
  0x10, 0x92, 0x00, 0x0d, 0x03, 0x1d, 0x88, 0x41, 0x48, 0x82, 0x33, 0x8c,
  0x18, 0x1c, 0x00, 0x08, 0x82, 0xc1, 0x29, 0xfc, 0x45, 0x48, 0xdc, 0xc5,
  0x58, 0x8c, 0x18, 0x1c, 0x00, 0x08, 0x82, 0xc1, 0x29, 0x80, 0x86, 0x48,
  0xec, 0x05, 0x59, 0x8c, 0x18, 0x1c, 0x00, 0x08, 0x82, 0xc1, 0x29, 0x84,
  0xc6, 0x48, 0xdc, 0x45, 0x59, 0x8c, 0x18, 0x1c, 0x00, 0x08, 0x82, 0xc1,
  0x29, 0x88, 0x06, 0x49, 0xe8, 0x45, 0x5a, 0x8c, 0x18, 0x1c, 0x00, 0x08,
  0x82, 0xc1, 0x29, 0x8c, 0x46, 0x49, 0xf8, 0x85, 0x5a, 0x8c, 0x18, 0x1c,
  0x00, 0x08, 0x82, 0xc1, 0x29, 0x90, 0x86, 0x49, 0xe8, 0xc5, 0x5a, 0x8c,
  0x18, 0x1c, 0x00, 0x08, 0x82, 0xc1, 0x29, 0x94, 0xc6, 0x49, 0xf4, 0x05,
  0x5a, 0x8c, 0x18, 0x1c, 0x00, 0x08, 0x82, 0xc1, 0x29, 0x98, 0x06, 0x4a,
  0x84, 0x46, 0x5a, 0x8c, 0x18, 0x1c, 0x00, 0x08, 0x82, 0xc1, 0x29, 0x9c,
  0x46, 0x4a, 0xf4, 0x85, 0x5a, 0x8c, 0x18, 0x1c, 0x00, 0x08, 0x82, 0xc1,
  0x29, 0xa0, 0x86, 0x4a, 0x80, 0x86, 0x5b, 0x8c, 0x18, 0x1c, 0x00, 0x08,
  0x82, 0xc1, 0x29, 0xa4, 0xc6, 0x4a, 0x90, 0xc6, 0x5b, 0x8c, 0x18, 0x1c,
  0x00, 0x08, 0x82, 0xc1, 0x29, 0xa8, 0x06, 0x4b, 0x80, 0x06, 0x5c, 0x8c,
  0x18, 0x28, 0x00, 0x08, 0x82, 0x41, 0x1d, 0xd8, 0x06, 0x4c, 0xa0, 0xc1,
  0x33, 0x1a, 0x70, 0x11, 0x13, 0xa3, 0x09, 0x01, 0x30, 0x9a, 0x20, 0x04,
  0xa3, 0x09, 0x83, 0x60, 0x03, 0x24, 0x9f, 0x11, 0x03, 0x04, 0x00, 0x41,
  0x30, 0x28, 0x85, 0xd8, 0xb8, 0x89, 0xc1, 0x09, 0x46, 0x0c, 0x10, 0x00,
  0x04, 0xc1, 0xa0, 0x14, 0x64, 0x03, 0x27, 0x06, 0x26, 0xb0, 0x40, 0x81,
  0x8e, 0x1d, 0x93, 0x7c, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1, 0xa0, 0x14,
  0x6a, 0x63, 0x27, 0x8e, 0x28, 0x18, 0x31, 0x40, 0x00, 0x10, 0x04, 0x83,
  0x52, 0xb0, 0x0d, 0x9e, 0x38, 0x9e, 0xc0, 0x82, 0x06, 0x3a, 0xb6, 0x58,
  0xf2, 0x19, 0x31, 0x40, 0x00, 0x10, 0x04, 0x83, 0x52, 0xc8, 0x8d, 0x9f,
  0x58, 0xa8, 0x60, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0x4a, 0x41, 0x37,
  0xc0, 0x62, 0x91, 0x02, 0x0b, 0x20, 0xe8, 0x8c, 0x18, 0x28, 0x00, 0x08,
  0x82, 0x41, 0x1d, 0x98, 0x07, 0x58, 0xe0, 0x81, 0x37, 0x1b, 0xa0, 0x11,
  0x16, 0xa3, 0x09, 0x01, 0x30, 0x9a, 0x20, 0x04, 0xa3, 0x09, 0x83, 0x60,
  0x03, 0x18, 0xc8, 0x67, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0x4a, 0x21,
  0x3c, 0xce, 0x62, 0xf0, 0x82, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0x28,
  0x05, 0xf1, 0x40, 0x8b, 0x81, 0x0b, 0xcc, 0x10, 0x03, 0xf9, 0x8c, 0x18,
  0x20, 0x00, 0x08, 0x82, 0x41, 0x29, 0x90, 0x87, 0x5a, 0x18, 0x60, 0x10,
  0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0x41, 0x29, 0x94, 0xc7, 0x5a, 0x18,
  0x5e, 0x60, 0x09, 0x19, 0xc8, 0x67, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c,
  0x4a, 0xe1, 0x3c, 0xda, 0x22, 0x11, 0x83, 0x60, 0xc4, 0x00, 0x01, 0x40,
  0x10, 0x0c, 0x4a, 0x01, 0x3d, 0xdc, 0x22, 0x01, 0x83, 0x60, 0xc4, 0x40,
  0x01, 0x40, 0x10, 0x0c, 0xea, 0x60, 0x3e, 0xda, 0xa2, 0x14, 0xd4, 0x00,
  0x3c, 0x5a, 0xc3, 0x2d, 0x46, 0x13, 0x02, 0x60, 0x34, 0x41, 0x08, 0x46,
  0x13, 0x06, 0xc1, 0x86, 0x36, 0x90, 0xcf, 0x88, 0x01, 0x02, 0x80, 0x20,
  0x18, 0x94, 0x82, 0x7b, 0xd0, 0xc5, 0xb0, 0x06, 0xc1, 0x88, 0x01, 0x02,
  0x80, 0x20, 0x18, 0x94, 0xc2, 0x7b, 0xd4, 0xc5, 0x90, 0x06, 0x81, 0x19,
  0x6f, 0x20, 0x9f, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0x28, 0x85, 0xf8,
  0xb8, 0x0b, 0xa3, 0x0d, 0x82, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0x28,
  0x05, 0xf9, 0xc0, 0x0b, 0x63, 0x0d, 0x02, 0x4b, 0xe2, 0x40, 0x3e, 0x23,
  0x06, 0x08, 0x00, 0x82, 0x60, 0x50, 0x0a, 0xf4, 0xa1, 0x17, 0xc9, 0x1b,
  0x04, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0x50, 0x0a, 0xf5, 0xb1, 0x17,
  0x49, 0x1b, 0x04, 0x23, 0x06, 0x0a, 0x00, 0x82, 0x60, 0x50, 0x07, 0x20,
  0xa2, 0x17, 0xb2, 0x90, 0x07, 0x6f, 0xa1, 0x1b, 0x7b, 0x31, 0x9a, 0x10,
  0x00, 0xa3, 0x09, 0x42, 0x30, 0x9a, 0x30, 0x08, 0x36, 0xe8, 0x81, 0x7c,
  0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1, 0xa0, 0x14, 0xf6, 0x23, 0x34, 0x06,
  0x3c, 0x08, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1, 0xa0, 0x14, 0xf8, 0x43,
  0x34, 0x06, 0x3b, 0x08, 0xcc, 0xe0, 0x03, 0xf9, 0x8c, 0x18, 0x20, 0x00,
  0x08, 0x82, 0x41, 0x29, 0xf8, 0x07, 0x69, 0x18, 0x7a, 0x10, 0x8c, 0x18,
  0x20, 0x00, 0x08, 0x82, 0x41, 0x29, 0xfc, 0x47, 0x69, 0x18, 0x78, 0x10,
  0x58, 0xe2, 0x07, 0xf2, 0x19, 0x31, 0x40, 0x00, 0x10, 0x04, 0x83, 0x52,
  0x08, 0x91, 0xd3, 0x48, 0xf8, 0x20, 0x18, 0x31, 0x40, 0x00, 0x10, 0x04,
  0x83, 0x52, 0x10, 0x11, 0xd4, 0x48, 0xf4, 0x20, 0x18, 0x31, 0x50, 0x00,
  0x10, 0x04, 0x83, 0x3a, 0x68, 0x91, 0xd3, 0xf8, 0x85, 0x52, 0xe0, 0x8b,
  0xf3, 0x40, 0x8d, 0xd1, 0x84, 0x00, 0x18, 0x4d, 0x10, 0x82, 0xd1, 0x84,
  0x41, 0xb0, 0xe1, 0x14, 0xe4, 0x33, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06,
  0xa5, 0x80, 0x22, 0xae, 0x31, 0x94, 0x42, 0x30, 0x62, 0x80, 0x00, 0x20,
  0x08, 0x06, 0xa5, 0x90, 0x22, 0xaf, 0x31, 0x8c, 0x42, 0x60, 0x46, 0x2a,
  0xc8, 0x67, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0x4a, 0x61, 0x45, 0x62,
  0xc3, 0x38, 0x85, 0x60, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0x4a, 0x81,
  0x45, 0x64, 0xc3, 0x28, 0x85, 0xc0, 0x92, 0x55, 0x90, 0xcf, 0x88, 0x01,
  0x02, 0x80, 0x20, 0x18, 0x94, 0x82, 0x8b, 0xd0, 0x46, 0x92, 0x0a, 0xc1,
  0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x94, 0xc2, 0x8b, 0xd4, 0x46, 0x72,
  0x0a, 0xc1, 0x88, 0x81, 0x02, 0x80, 0x20, 0x18, 0xd4, 0x81, 0x8e, 0xd0,
  0x06, 0x3b, 0xc4, 0x42, 0x6a, 0xd0, 0x47, 0x6d, 0x8c, 0x26, 0x04, 0xc0,
  0x68, 0x82, 0x10, 0x8c, 0x26, 0x0c, 0x82, 0x0d, 0xb4, 0x20, 0x9f, 0x11,
  0x03, 0x04, 0x00, 0x41, 0x30, 0x28, 0x85, 0x1a, 0xd9, 0x8d, 0x41, 0x16,
  0x82, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0x28, 0x05, 0x1b, 0xe1, 0x8d,
  0x01, 0x16, 0x02, 0x33, 0x6c, 0x41, 0x3e, 0x23, 0x06, 0x08, 0x00, 0x82,
  0x60, 0x50, 0x0a, 0x38, 0xe2, 0x1b, 0x06, 0x2d, 0x04, 0x23, 0x06, 0x08,
  0x00, 0x82, 0x60, 0x50, 0x0a, 0x39, 0xf2, 0x1b, 0x86, 0x2c, 0x04, 0x96,
  0xe0, 0x82, 0x7c, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1, 0xa0, 0x14, 0x76,
  0x24, 0x3c, 0x12, 0x5b, 0x08, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1, 0xa0,
  0x14, 0x78, 0x44, 0x3c, 0x12, 0x5a, 0x08, 0x46, 0x0c, 0x14, 0x00, 0x04,
  0xc1, 0xa0, 0x0e, 0xce, 0x24, 0x3c, 0x6c, 0x62, 0x26, 0xdc, 0x63, 0x44,
  0xc4, 0x63, 0x34, 0x21, 0x00, 0x46, 0x0c, 0x14, 0x00, 0x04, 0xc1, 0xa0,
  0x0e, 0xd2, 0x64, 0x3c, 0xf6, 0x41, 0x1c, 0x78, 0x83, 0x44, 0xc8, 0x63,
  0x34, 0x21, 0x00, 0x46, 0x13, 0x84, 0xc0, 0x04, 0x42, 0x3e, 0x26, 0x14,
  0xf2, 0x19, 0x31, 0x50, 0x00, 0x10, 0x04, 0x83, 0x3a, 0x70, 0x13, 0xf4,
  0x00, 0x09, 0x73, 0x08, 0x8f, 0x14, 0x49, 0x8f, 0xd1, 0x84, 0x00, 0x18,
  0x4d, 0x10, 0x02, 0x13, 0x12, 0xf9, 0x98, 0xa0, 0xc8, 0x67, 0xc4, 0x40,
  0x01, 0x40, 0x10, 0x0c, 0xea, 0x60, 0x4e, 0xda, 0xa3, 0x24, 0xd4, 0xc1,
  0x3c, 0x5c, 0xc4, 0x3d, 0x46, 0x13, 0x02, 0x60, 0x34, 0x41, 0x08, 0x4c,
  0x70, 0xe4, 0x63, 0xc2, 0x23, 0x9f, 0x11, 0x03, 0x05, 0x00, 0x41, 0x30,
  0xa8, 0x03, 0x3c, 0x91, 0x0f, 0x95, 0x88, 0x87, 0xf2, 0x90, 0x91, 0xf9,
  0x18, 0x4d, 0x08, 0x80, 0xd1, 0x04, 0x21, 0x18, 0x4d, 0x18, 0x04, 0x1b,
  0xe4, 0x41, 0x3e, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0x50, 0x0a, 0x73,
  0x92, 0x1f, 0x03, 0x3c, 0x04, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0x50,
  0x0a, 0x74, 0xa2, 0x1f, 0x83, 0x3b, 0x04, 0x66, 0xd0, 0x83, 0x7c, 0x46,
  0x0c, 0x10, 0x00, 0x04, 0xc1, 0xa0, 0x14, 0xec, 0x84, 0x3f, 0x0c, 0x79,
  0x08, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1, 0xa0, 0x14, 0xee, 0xa4, 0x3f,
  0x0c, 0x78, 0x08, 0x2c, 0xb1, 0x07, 0xf9, 0x8c, 0x18, 0x20, 0x00, 0x08,
  0x82, 0x41, 0x29, 0xe4, 0xc9, 0x7f, 0x24, 0xf4, 0x10, 0x8c, 0x18, 0x20,
  0x00, 0x08, 0x82, 0x41, 0x29, 0xe8, 0x09, 0x88, 0x24, 0xf2, 0x10, 0x8c,
  0x18, 0x28, 0x00, 0x08, 0x82, 0x41, 0x1d, 0x94, 0xca, 0x7f, 0xdc, 0x44,
  0x3f, 0xc8, 0xc7, 0x8f, 0x80, 0xc8, 0x68, 0x42, 0x00, 0x8c, 0x26, 0x08,
  0xc1, 0x68, 0xc2, 0x20, 0xd8, 0xf0, 0x0f, 0xf2, 0x19, 0x31, 0x40, 0x00,
  0x10, 0x04, 0x83, 0x52, 0x00, 0x15, 0x13, 0x19, 0xfa, 0x21, 0x18, 0x31,
  0x40, 0x00, 0x10, 0x04, 0x83, 0x52, 0x08, 0x95, 0x13, 0x19, 0xf6, 0x21,
  0x30, 0x23, 0x24, 0xe4, 0x33, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0xa5,
  0x30, 0x2a, 0x29, 0x62, 0xfc, 0x43, 0x30, 0x62, 0x80, 0x00, 0x20, 0x08,
  0x06, 0xa5, 0x40, 0x2a, 0x2a, 0x62, 0xf4, 0x43, 0x60, 0xc9, 0x48, 0xc8,
  0x67, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0x4a, 0xc1, 0x54, 0x58, 0x24,
  0x09, 0x89, 0x60, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0x4a, 0xe1, 0x54,
  0x5a, 0x24, 0xf9, 0x87, 0x60, 0xc4, 0x40, 0x01, 0x40, 0x10, 0x0c, 0xea,
  0x40, 0x56, 0x58, 0x84, 0x2c, 0x52, 0xe2, 0x3f, 0xd8, 0xa4, 0x45, 0x46,
  0x13, 0x02, 0x60, 0x34, 0x41, 0x08, 0x46, 0x13, 0x06, 0xc1, 0x06, 0x96,
  0x90, 0xcf, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x94, 0x42, 0xab, 0xcc,
  0xc8, 0xa0, 0x12, 0xc1, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x94, 0x82,
  0xab, 0xd0, 0xc8, 0x80, 0x12, 0x81, 0x19, 0x2e, 0x21, 0x9f, 0x11, 0x03,
  0x04, 0x00, 0x41, 0x30, 0x28, 0x05, 0x58, 0xb1, 0x11, 0x83, 0x25, 0x82,
  0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0x28, 0x85, 0x58, 0xb9, 0x11, 0x43,
  0x25, 0x02, 0x4b, 0x60, 0x42, 0x3e, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60,
  0x50, 0x0a, 0xb3, 0x92, 0x23, 0x89, 0x4b, 0x04, 0x23, 0x06, 0x08, 0x00,
  0x82, 0x60, 0x50, 0x0a, 0xb4, 0xa2, 0x23, 0x09, 0x4b, 0x04, 0x23, 0x06,
  0x06, 0x00, 0x82, 0x60, 0x60, 0x06, 0xe7, 0x92, 0x22, 0x78, 0x32, 0x62,
  0x60, 0x00, 0x20, 0x08, 0x06, 0x66, 0x80, 0x2e, 0x2a, 0xc2, 0x27, 0x23,
  0x06, 0x06, 0x00, 0x82, 0x60, 0x60, 0x06, 0xe9, 0xb2, 0x22, 0x79, 0x32,
  0x62, 0x50, 0x00, 0x20, 0x08, 0x06, 0x68, 0x90, 0x2e, 0x6a, 0x32, 0x62,
  0x60, 0x00, 0x20, 0x08, 0x06, 0x66, 0xc0, 0x2e, 0x2c, 0xc2, 0x27, 0x23,
  0x06, 0x06, 0x00, 0x82, 0x60, 0x60, 0x06, 0xed, 0xd2, 0x22, 0xa0, 0x32,
  0x62, 0x60, 0x00, 0x20, 0x08, 0x06, 0x66, 0xe0, 0x2e, 0x2e, 0xd2, 0x27,
  0x36, 0x10, 0xf2, 0xb1, 0xa1, 0x90, 0x8f, 0x0d, 0x86, 0x7c, 0x6c, 0x50,
  0xe0, 0x63, 0x83, 0x02, 0x1f, 0x1b, 0x14, 0xf8, 0x6c, 0xcb, 0x90, 0x2a,
  0xb9, 0x92, 0x2b, 0x14, 0x54, 0xc6, 0x18, 0x42, 0xb0, 0x2b, 0xc6, 0x0b,
  0xe9, 0x10, 0x1f, 0xd3, 0x85, 0x73, 0x88, 0x8f, 0xe1, 0x42, 0x39, 0xc4,
  0xc7, 0x88, 0x41, 0x3e, 0x56, 0x0c, 0xf2, 0x31, 0x63, 0x90, 0x8f, 0x0d,
  0xef, 0x00, 0x1f, 0x1b, 0xda, 0x01, 0x3e, 0x36, 0xac, 0x03, 0x7c, 0xc6,
  0x10, 0x16, 0x74, 0xb1, 0x5c, 0x98, 0x87, 0xf8, 0xd8, 0x2d, 0xc4, 0x43,
  0x7c, 0xac, 0x16, 0xde, 0x21, 0x3e, 0x46, 0x0c, 0xf2, 0xb1, 0x62, 0x90,
  0x8f, 0x19, 0x83, 0x7c, 0x4c, 0x19, 0xe0, 0x63, 0xca, 0x00, 0x1f, 0x53,
  0x06, 0xf8, 0xd8, 0x2c, 0xe0, 0x42, 0x7c, 0x6c, 0x16, 0x70, 0x21, 0x3e,
  0x66, 0x09, 0xf2, 0xb1, 0x4b, 0x90, 0x8f, 0xc9, 0x02, 0x2f, 0xc4, 0xc7,
  0x64, 0x81, 0x17, 0xe2, 0x63, 0x90, 0x20, 0x1f, 0x8b, 0x04, 0xf9, 0x98,
  0x60, 0xc0, 0xc7, 0x82, 0x70, 0x80, 0x8f, 0x91, 0x43, 0x20, 0x1f, 0x23,
  0x10, 0xf8, 0x58, 0x30, 0x0e, 0xf0, 0xb1, 0x73, 0x08, 0xe4, 0x63, 0xa5,
  0x20, 0x0b, 0xf1, 0xb1, 0x51, 0x80, 0x85, 0xf8, 0x58, 0x28, 0xb8, 0x42,
  0x7c, 0xac, 0x0c, 0x06, 0xf9, 0x98, 0x19, 0x0c, 0xf2, 0xb1, 0x33, 0x18,
  0xe4, 0x63, 0x03, 0x2e, 0xc0, 0xc7, 0x06, 0x5b, 0x80, 0x8f, 0x0d, 0xb4,
  0x00, 0x1f, 0x0b, 0x85, 0x5d, 0x88, 0x8f, 0xfd, 0x41, 0x2e, 0xc4, 0xc7,
  0xfa, 0xe0, 0x16, 0xe2, 0x63, 0x64, 0x30, 0xc8, 0xc7, 0xca, 0x60, 0x90,
  0x8f, 0x99, 0xc1, 0x20, 0x1f, 0x4b, 0x06, 0xf8, 0x58, 0x32, 0xc0, 0xc7,
  0x92, 0x01, 0x3e, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0x30, 0x0a, 0x39,
  0x63, 0x2b, 0x35, 0xb2, 0x2e, 0xa3, 0x09, 0x01, 0x30, 0x9a, 0x20, 0x04,
  0xa3, 0x09, 0x83, 0x30, 0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0xa3, 0xd0,
  0x33, 0xba, 0x92, 0x23, 0xf0, 0x32, 0x9a, 0x10, 0x00, 0xa3, 0x09, 0x42,
  0x30, 0x9a, 0x30, 0x08, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0x30, 0x0a,
  0x61, 0xe3, 0x2b, 0x3d, 0xb2, 0x2b, 0xa3, 0x09, 0x01, 0x30, 0x9a, 0x20,
  0x04, 0xa3, 0x09, 0x83, 0xb0, 0x27, 0x04, 0xcb, 0xec, 0x4c, 0xce, 0xec,
  0x0c, 0x05, 0x87, 0x31, 0x86, 0x10, 0xf4, 0xcc, 0x18, 0x82, 0x10, 0x36,
  0x63, 0x08, 0x43, 0xcf, 0xec, 0x09, 0x11, 0x33, 0x60, 0xe3, 0x33, 0x63,
  0x43, 0xc1, 0x61, 0x8c, 0x21, 0x04, 0x62, 0x33, 0x86, 0x20, 0x98, 0xcd,
  0x18, 0xc2, 0x20, 0x36, 0x7b, 0x42, 0xd8, 0x4c, 0xd9, 0x88, 0x4d, 0xd9,
  0x50, 0x70, 0x18, 0x63, 0x08, 0xc1, 0xd9, 0x8c, 0x21, 0x08, 0x6b, 0x33,
  0x86, 0x30, 0x9c, 0xcd, 0x9e, 0x10, 0x3b, 0xa3, 0x36, 0x67, 0xd3, 0x36,
  0x14, 0x1c, 0xc6, 0x18, 0x42, 0xc0, 0x36, 0x63, 0x08, 0x02, 0xdc, 0x8c,
  0x21, 0x0c, 0x6c, 0x63, 0x52, 0x2e, 0xc4, 0xc7, 0xa4, 0x5c, 0x88, 0x8f,
  0x49, 0xb9, 0x10, 0x1f, 0x5b, 0x15, 0x53, 0x88, 0x8f, 0xb1, 0x8a, 0x29,
  0xc4, 0xc7, 0x5a, 0xc5, 0x14, 0xe2, 0x33, 0x62, 0xb0, 0x00, 0x20, 0x08,
  0x06, 0x61, 0x30, 0x3b, 0x21, 0x33, 0x08, 0x81, 0x51, 0x10, 0x63, 0x08,
  0xd5, 0xda, 0x8c, 0x21, 0x58, 0x3e, 0x33, 0x86, 0x70, 0x81, 0xcd, 0x88,
  0xc1, 0x02, 0x80, 0x20, 0x18, 0x84, 0xc1, 0xed, 0x94, 0x4c, 0x2b, 0xb0,
  0xc2, 0x2a, 0x0c, 0x42, 0x60, 0x45, 0x40, 0x1f, 0x0b, 0x32, 0xf9, 0x98,
  0x90, 0xc9, 0xc7, 0x86, 0x4c, 0x3e, 0x36, 0x84, 0x01, 0x7c, 0x6c, 0x08,
  0x03, 0xf8, 0xd8, 0x10, 0x06, 0xf0, 0x31, 0x6d, 0x1d, 0xe2, 0x63, 0xda,
  0x3a, 0xc4, 0xc7, 0xb4, 0x75, 0x88, 0xcf, 0x88, 0xc1, 0x02, 0x80, 0x20,
  0x18, 0x84, 0x81, 0xf8, 0xc0, 0x8c, 0x14, 0x41, 0x83, 0x10, 0x8c, 0x21,
  0x68, 0x7a, 0x33, 0x86, 0xb0, 0xb5, 0xcd, 0x18, 0x02, 0xf7, 0x36, 0x23,
  0x06, 0x0b, 0x00, 0x82, 0x60, 0x10, 0x06, 0xe6, 0x43, 0x33, 0xbc, 0xb0,
  0x0b, 0xba, 0x30, 0x08, 0x81, 0x15, 0x01, 0x7d, 0x2c, 0xf0, 0xe4, 0x63,
  0x82, 0x27, 0x1f, 0x1b, 0x3c, 0xf9, 0xd8, 0x60, 0x06, 0xf0, 0xb1, 0xc1,
  0x0c, 0xe0, 0x63, 0x83, 0x19, 0xc0, 0xc7, 0xee, 0xe3, 0x44, 0xe2, 0x63,
  0xf5, 0x41, 0x22, 0xf1, 0xb1, 0xf9, 0x08, 0x91, 0xf8, 0x58, 0x7b, 0xa8,
  0x48, 0x7c, 0x6c, 0x3d, 0x4e, 0x24, 0x3e, 0x96, 0x1e, 0x24, 0x12, 0x1f,
  0xc3, 0x58, 0x24, 0x3e, 0x86, 0xa5, 0x48, 0x7c, 0x0c, 0x33, 0x91, 0xf8,
  0x8c, 0x18, 0x2c, 0x00, 0x08, 0x82, 0x41, 0x18, 0xdc, 0x4f, 0xd9, 0x24,
  0xc8, 0x91, 0x20, 0xc7, 0x88, 0xc1, 0x02, 0x80, 0x20, 0x18, 0x84, 0x01,
  0xfe, 0x98, 0x8d, 0x92, 0x20, 0x87, 0x51, 0x8c, 0x18, 0x2c, 0x00, 0x08,
  0x82, 0x41, 0x18, 0xe4, 0xcf, 0xd9, 0x20, 0x87, 0x81, 0x1c, 0xc6, 0x88,
  0xc1, 0x02, 0x80, 0x20, 0x18, 0x84, 0x81, 0xfe, 0xa0, 0x8d, 0x51, 0x10,
  0xcc, 0xa2, 0x8c, 0x18, 0x2c, 0x00, 0x08, 0x82, 0x41, 0x18, 0xec, 0x4f,
  0xda, 0x1c, 0x46, 0xa1, 0x24, 0x88, 0x0d, 0x85, 0x7c, 0xac, 0x28, 0xe4,
  0x63, 0x42, 0x10, 0x1f, 0xc3, 0x97, 0x80, 0x3e, 0x66, 0x1c, 0xf2, 0x31,
  0x23, 0x91, 0x8f, 0x09, 0x41, 0x7c, 0x2c, 0x20, 0xe4, 0x63, 0x49, 0x23,
  0x1f, 0x5b, 0x1a, 0xf9, 0x98, 0x10, 0xc4, 0xc7, 0x02, 0x44, 0x3e, 0x16,
  0x32, 0x45, 0x7c, 0x2c, 0x10, 0xe2, 0x63, 0x9f, 0x98, 0xc4, 0xc7, 0xbe,
  0x1f, 0x89, 0x8f, 0x7d, 0x3c, 0x12, 0x9f, 0x11, 0x83, 0x05, 0x00, 0x41,
  0x30, 0x08, 0x83, 0x16, 0xda, 0x9b, 0x41, 0x08, 0x3e, 0xaf, 0x1b, 0x31,
  0x58, 0x00, 0x10, 0x04, 0x83, 0x30, 0x70, 0x21, 0xbe, 0x21, 0x06, 0xa1,
  0xe3, 0x36, 0x13, 0x2c, 0xf9, 0x98, 0x80, 0xc9, 0xc7, 0x84, 0x20, 0x3e,
  0x16, 0x4c, 0xf2, 0xb1, 0x82, 0x93, 0x8f, 0x1d, 0x9c, 0x7c, 0x4c, 0x08,
  0xe2, 0x63, 0xc1, 0x25, 0x1f, 0x83, 0x99, 0x22, 0x3e, 0x16, 0x08, 0xf1,
  0x31, 0x48, 0x3c, 0xe4, 0x33, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0xa5,
  0x50, 0x42, 0xab, 0x73, 0xf9, 0x46, 0x30, 0x62, 0x80, 0x00, 0x20, 0x08,
  0x06, 0xa5, 0x60, 0x42, 0xac, 0x43, 0xe9, 0x46, 0x60, 0x13, 0x79, 0xc8,
  0x67, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0x4a, 0x01, 0x85, 0x5c, 0x47,
  0x03, 0x8f, 0x60, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0x4a, 0x21, 0x85,
  0x5e, 0xe7, 0xe2, 0x8d, 0xc0, 0x08, 0x94, 0x88, 0x8f, 0x09, 0x26, 0x11,
  0x1f, 0x4b, 0xd4, 0x43, 0x3e, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0x50,
  0x0a, 0x2d, 0x34, 0x3b, 0x90, 0x79, 0x04, 0x23, 0x06, 0x08, 0x00, 0x82,
  0x60, 0x50, 0x0a, 0x2e, 0x44, 0x3b, 0x8d, 0x78, 0x04, 0xc6, 0xb0, 0x87,
  0x7c, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1, 0xa0, 0x14, 0x60, 0xc8, 0x76,
  0x26, 0xf4, 0x08, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1, 0xa0, 0x14, 0x62,
  0xe8, 0x76, 0x20, 0xf2, 0x08, 0x8c, 0x80, 0x89, 0xf8, 0x98, 0xe0, 0x12,
  0xf1, 0x19, 0x31, 0x30, 0x00, 0x10, 0x04, 0x03, 0x56, 0x80, 0x21, 0xd5,
  0xa9, 0x99, 0x11, 0x83, 0x03, 0x00, 0x41, 0x30, 0x50, 0x05, 0x19, 0xba,
  0x9d, 0xe0, 0x67, 0x46, 0x0c, 0x2a, 0x00, 0x04, 0xc1, 0x20, 0x0f, 0x76,
  0x08, 0x75, 0x48, 0x26, 0xa0, 0x89, 0x98, 0x18, 0x9b, 0xb1, 0x69, 0xa1,
  0x16, 0x92, 0x1d, 0x66, 0x19, 0x1b, 0x62, 0x18, 0x9b, 0xb1, 0x19, 0x4d,
  0x08, 0x80, 0xd1, 0x04, 0x21, 0x18, 0x4d, 0x18, 0x84, 0x11, 0x83, 0x0a,
  0x00, 0x41, 0x30, 0xc8, 0x83, 0x1f, 0x62, 0x1d, 0x92, 0x29, 0x70, 0xa2,
  0x26, 0xce, 0xe6, 0x6c, 0x62, 0x28, 0x86, 0x6c, 0x07, 0x7a, 0xce, 0x06,
  0x39, 0xce, 0xe6, 0x6c, 0x46, 0x13, 0x02, 0x60, 0x34, 0x41, 0x08, 0x46,
  0x0c, 0x2a, 0x00, 0x04, 0xc1, 0x20, 0x0f, 0xc4, 0xe8, 0x75, 0x46, 0x06,
  0xd9, 0x09, 0x9c, 0x50, 0x1b, 0xb5, 0xa1, 0x21, 0x1a, 0xca, 0x9d, 0x49,
  0x52, 0x9b, 0x45, 0x51, 0x1b, 0xb5, 0x19, 0x4d, 0x08, 0x80, 0xd1, 0x04,
  0x21, 0x18, 0x4d, 0x18, 0x84, 0xd1, 0x04, 0x62, 0x18, 0x31, 0x50, 0x00,
  0x10, 0x04, 0x83, 0x3a, 0x60, 0x23, 0xf3, 0xd9, 0x19, 0x9c, 0xc1, 0x9f,
  0x11, 0x3a, 0x9f, 0xd1, 0x84, 0x00, 0x18, 0x4d, 0x10, 0x82, 0xd1, 0x84,
  0x41, 0xb0, 0x27, 0x6f, 0xe0, 0x63, 0x8f, 0xde, 0xc0, 0xc7, 0x9e, 0xbd,
  0x81, 0x8f, 0x0d, 0x7d, 0x23, 0x1f, 0x1b, 0xfc, 0x46, 0x3e, 0x36, 0xfc,
  0x8d, 0x7c, 0x46, 0x0c, 0x0c, 0x00, 0x04, 0xc1, 0xe0, 0x13, 0x25, 0xf3,
  0x19, 0x46, 0x0c, 0x0c, 0x00, 0x04, 0xc1, 0xe0, 0x1b, 0xa5, 0xf3, 0x19,
  0x46, 0x0c, 0x0c, 0x00, 0x04, 0xc1, 0xe0, 0x23, 0x25, 0xf4, 0x19, 0x6c,
  0x20, 0x1d, 0xf9, 0xd8, 0x50, 0x3a, 0xf2, 0xb1, 0xc1, 0x74, 0xe4, 0x33,
  0x62, 0x60, 0x00, 0x20, 0x08, 0x06, 0x1f, 0x2a, 0xb5, 0xcf, 0x30, 0x62,
  0x60, 0x00, 0x20, 0x08, 0x06, 0x5f, 0x2a, 0xb9, 0xcf, 0x30, 0x62, 0x60,
  0x00, 0x20, 0x08, 0x06, 0x9f, 0x2a, 0xbd, 0xcf, 0x60, 0xde, 0xea, 0xc8,
  0xc7, 0x3c, 0xd6, 0x91, 0x8f, 0x79, 0xad, 0x23, 0x9f, 0xe1, 0x88, 0x30,
  0x78, 0x1d, 0xe2, 0x1b, 0x8e, 0x08, 0x03, 0xd8, 0x21, 0xbe, 0xe1, 0x88,
  0x30, 0x88, 0x1d, 0xe2, 0x9b, 0x6e, 0x30, 0x92, 0x61, 0xba, 0xc1, 0x48,
  0x86, 0xe9, 0x06, 0x23, 0x19, 0xac, 0x2c, 0x7e, 0x23, 0x3e, 0x56, 0x16,
  0xbf, 0x11, 0x1f, 0x2b, 0x8b, 0xdf, 0x88, 0xcf, 0x88, 0xc1, 0x02, 0x80,
  0x20, 0x18, 0x84, 0x81, 0x2d, 0x91, 0xd0, 0x20, 0x04, 0x83, 0x10, 0x8c,
  0x18, 0x18, 0x00, 0x08, 0x82, 0xc1, 0x87, 0x4b, 0xf3, 0x13, 0x58, 0x50,
  0xc8, 0xc7, 0x84, 0x42, 0x3e, 0x36, 0x14, 0xf2, 0x19, 0x31, 0x38, 0x00,
  0x10, 0x04, 0x83, 0x51, 0x38, 0x25, 0x12, 0x1a, 0x1d, 0x10, 0x1a, 0x4d,
  0x08, 0x80, 0xd1, 0x04, 0x21, 0x18, 0x4d, 0x18, 0x04, 0xd3, 0x9d, 0x21,
  0x3e, 0xb6, 0x3b, 0x43, 0x7c, 0x8c, 0x77, 0x86, 0xf8, 0x98, 0x1c, 0xf8,
  0x8e, 0x7c, 0x4c, 0x0e, 0x7e, 0x47, 0x3e, 0x26, 0x9c, 0x0f, 0x7c, 0x4c,
  0x40, 0x1f, 0xf8, 0x8c, 0x18, 0x24, 0x00, 0x08, 0x82, 0x81, 0x1b, 0xf8,
  0x12, 0x1a, 0x09, 0x81, 0x10, 0x18, 0xf8, 0x04, 0xf1, 0x19, 0x31, 0x30,
  0x00, 0x10, 0x04, 0x83, 0x2f, 0x9d, 0x60, 0x28, 0x18, 0x31, 0x58, 0x00,
  0x10, 0x04, 0x83, 0x30, 0x48, 0xa7, 0x1b, 0xfa, 0x0b, 0xbf, 0xe8, 0x8b,
  0xdf, 0xf0, 0x8d, 0xde, 0xb0, 0x00, 0x3c, 0xe4, 0x63, 0x02, 0x78, 0xc8,
  0xc7, 0x06, 0xf0, 0x90, 0x8f, 0x8d, 0xc6, 0x10, 0x1f, 0x1b, 0x8d, 0x21,
  0x3e, 0x36, 0x1a, 0x43, 0x7c, 0x2c, 0x28, 0x0f, 0xf9, 0xd8, 0x50, 0x1e,
  0xf2, 0x31, 0x21, 0x88, 0x8f, 0x19, 0xe7, 0x21, 0x1f, 0x2b, 0xd4, 0x43,
  0x3e, 0x26, 0x04, 0xf1, 0x31, 0x84, 0x3d, 0xe4, 0x63, 0x0a, 0x7b, 0xc8,
  0xc7, 0x84, 0x20, 0x3e, 0xc6, 0x54, 0xf2, 0x19, 0x31, 0x40, 0x00, 0x10,
  0x04, 0x83, 0x52, 0x28, 0xa7, 0x35, 0xaa, 0x90, 0x60, 0xc4, 0x00, 0x01,
  0x40, 0x10, 0x0c, 0x4a, 0xc1, 0x9c, 0xd8, 0x68, 0x8a, 0x8f, 0xc0, 0x1c,
  0x4c, 0x3e, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0x50, 0x0a, 0xe8, 0xe4,
  0x46, 0x18, 0x12, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0x41, 0x29, 0xa4,
  0xd3, 0x1b, 0x59, 0xf3, 0x11, 0x18, 0xb4, 0xc9, 0x67, 0xc4, 0x00, 0x01,
  0x40, 0x10, 0x0c, 0x4a, 0x61, 0x9d, 0xe2, 0x68, 0x43, 0x82, 0x11, 0x03,
  0x04, 0x00, 0x41, 0x30, 0x28, 0x05, 0x76, 0x92, 0xa3, 0xac, 0x3e, 0x82,
  0x11, 0x83, 0x05, 0x00, 0x41, 0x30, 0x08, 0x03, 0x91, 0x82, 0xa3, 0x83,
  0x08, 0x0e, 0x22, 0x18, 0x31, 0x30, 0x00, 0x10, 0x04, 0x83, 0x8f, 0xa4,
  0x7e, 0x28, 0xb0, 0x20, 0x91, 0x8f, 0x09, 0x87, 0x7c, 0x6c, 0x28, 0xe4,
  0x33, 0x1c, 0x31, 0x0b, 0x24, 0x44, 0x7c, 0xb3, 0x0c, 0x86, 0x12, 0xcc,
  0x31, 0xe0, 0x50, 0x4f, 0xa8, 0xd3, 0x1c, 0x43, 0xd0, 0x13, 0xee, 0x34,
  0xc7, 0x10, 0xf4, 0x84, 0x3a, 0xcd, 0x31, 0xec, 0xd0, 0x5b, 0xb4, 0xd3,
  0x1c, 0x43, 0xf0, 0x16, 0xf1, 0x34, 0xc7, 0x10, 0xbc, 0x45, 0x3b, 0x8d,
  0x18, 0x2c, 0x00, 0x08, 0x82, 0x41, 0x18, 0xb8, 0x14, 0x1f, 0x81, 0xc9,
  0x8f, 0xf8, 0x88, 0x92, 0x20, 0x16, 0xac, 0x90, 0x7c, 0x2c, 0x60, 0xe4,
  0x63, 0x02, 0x23, 0x1f, 0x1b, 0x18, 0xf9, 0x58, 0x99, 0x0c, 0xf1, 0xb1,
  0x32, 0x19, 0xe2, 0x63, 0x65, 0x32, 0xc4, 0x67, 0x8e, 0xc1, 0x8c, 0x06,
  0x7c, 0x9a, 0x63, 0x08, 0x06, 0x7e, 0x9a, 0x63, 0x08, 0x06, 0x7c, 0xb2,
  0x17, 0xe9, 0x21, 0xf9, 0xd8, 0x8b, 0xf8, 0x90, 0x7c, 0xec, 0x45, 0x7e,
  0x48, 0x3e, 0x37, 0x20, 0xe8, 0x06, 0x04, 0xdd, 0x80, 0xa0, 0x61, 0x03,
  0xc2, 0x3c, 0xa4, 0x01, 0x18, 0x36, 0x20, 0xc2, 0xe3, 0x18, 0x80, 0x61,
  0x03, 0x82, 0x37, 0xaa, 0x01, 0x18, 0x36, 0x20, 0x6e, 0xe3, 0x18, 0x80,
  0x3d, 0x19, 0xe4, 0x29, 0xa4, 0x48, 0x8a, 0x02, 0xc4, 0x18, 0x6e, 0x08,
  0x4c, 0x4a, 0x0c, 0xf6, 0x64, 0xa8, 0x27, 0x92, 0x22, 0xa9, 0x59, 0x86,
  0x03, 0x11, 0x86, 0x0d, 0x88, 0x80, 0x8e, 0x06, 0x60, 0x96, 0x20, 0x19,
  0x31, 0x30, 0x00, 0x10, 0x04, 0x83, 0x8f, 0xac, 0x4c, 0xea, 0x4d, 0x86,
  0x23, 0x82, 0x34, 0x22, 0x3e, 0xdb, 0x91, 0x35, 0x92, 0x8f, 0x05, 0x72,
  0x02, 0x9f, 0x9b, 0x13, 0xc4, 0x0e, 0x47, 0xd0, 0x89, 0x18, 0x11, 0x9f,
  0xad, 0x54, 0x13, 0x82, 0xe9, 0x86, 0xc0, 0x11, 0x2c, 0x20, 0x40, 0x70,
  0x01, 0x61, 0xa7, 0x1b, 0x8e, 0x20, 0x19, 0x31, 0x30, 0x00, 0x10, 0x04,
  0x83, 0xef, 0xad, 0x62, 0x2a, 0x4f, 0x86, 0x23, 0x02, 0x3a, 0x22, 0x3e,
  0x2b, 0x13, 0x3b, 0x92, 0x8f, 0x05, 0x7c, 0x02, 0x9f, 0xeb, 0x13, 0xc4,
  0x0e, 0x47, 0xf8, 0x49, 0x1b, 0x11, 0x9f, 0xd9, 0xd4, 0x15, 0x82, 0xe9,
  0x86, 0x00, 0x13, 0x2c, 0x20, 0x40, 0x70, 0x01, 0x61, 0xa7, 0x1b, 0x8e,
  0x20, 0x19, 0x31, 0x30, 0x00, 0x10, 0x04, 0x83, 0x4f, 0xaf, 0x78, 0x6a,
  0x54, 0x86, 0x23, 0x82, 0x3f, 0x22, 0x3e, 0x7b, 0x93, 0x50, 0x92, 0x8f,
  0x05, 0xa6, 0x02, 0x9f, 0x3b, 0x15, 0xc4, 0x0e, 0x47, 0xa0, 0x0a, 0x1e,
  0x11, 0x9f, 0x85, 0x55, 0x18, 0x84, 0x60, 0xba, 0x21, 0x10, 0x03, 0xc1,
  0x02, 0x02, 0x04, 0x17, 0x10, 0x76, 0xba, 0xe1, 0x08, 0x92, 0x22, 0x83,
  0xb4, 0x82, 0x61, 0x03, 0xc2, 0x0c, 0x82, 0x01, 0x18, 0x31, 0x38, 0x00,
  0x10, 0x04, 0x03, 0x50, 0x90, 0x2b, 0x77, 0x6a, 0xa3, 0x76, 0x1a, 0x4d,
  0x08, 0x80, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0xe8, 0x52, 0x2b, 0x9e,
  0x02, 0x99, 0x92, 0xa9, 0x11, 0x83, 0x03, 0x00, 0x41, 0x30, 0x50, 0x05,
  0xb8, 0xaa, 0xa7, 0xa0, 0x8e, 0x46, 0x0c, 0x28, 0x00, 0x04, 0xc1, 0x00,
  0x0e, 0x40, 0x8b, 0xa5, 0x82, 0xb5, 0x6a, 0xa9, 0xb5, 0x5a, 0xab, 0xb5,
  0xe2, 0x22, 0x63, 0x94, 0xec, 0xa0, 0x0e, 0xe8, 0x80, 0x96, 0x78, 0x8a,
  0xce, 0xe0, 0x30, 0x66, 0x09, 0x92, 0x81, 0x8a, 0xc3, 0x2e, 0x83, 0x43,
  0x40, 0xc6, 0x10, 0x82, 0xb6, 0x1a, 0x43, 0x10, 0xe2, 0x6a, 0x0c, 0x61,
  0x68, 0xab, 0x59, 0x02, 0x65, 0xa0, 0x82, 0x30, 0x12, 0x98, 0x0c, 0x8a,
  0x81, 0x0a, 0xc2, 0x48, 0x64, 0x32, 0x28, 0x06, 0x2a, 0x08, 0x23, 0xa1,
  0xc9, 0xa0, 0x18, 0x31, 0x30, 0x00, 0x10, 0x04, 0x03, 0x35, 0x58, 0x2d,
  0x75, 0xfa, 0xa9, 0x11, 0x03, 0x03, 0x00, 0x41, 0x30, 0x50, 0x03, 0xd6,
  0x5a, 0xa7, 0xb1, 0x1a, 0x31, 0x30, 0x00, 0x10, 0x04, 0x03, 0x35, 0x70,
  0xad, 0x75, 0x0a, 0xab, 0x11, 0x03, 0x03, 0x00, 0x41, 0x30, 0x50, 0x83,
  0xd7, 0x62, 0xa7, 0xb2, 0x3a, 0x82, 0x50, 0x37, 0x10, 0xca, 0x84, 0x80,
  0x3e, 0x67, 0x10, 0xea, 0x0a, 0x42, 0x99, 0x10, 0xd0, 0x67, 0xc4, 0x40,
  0x01, 0x40, 0x10, 0x0c, 0xea, 0x00, 0xb6, 0x54, 0x2a, 0x8f, 0xf0, 0xa8,
  0xaf, 0xce, 0x6a, 0xa5, 0x46, 0x13, 0x02, 0x60, 0x34, 0x41, 0x08, 0x46,
  0x13, 0x06, 0x61, 0x34, 0x81, 0x18, 0x46, 0x0c, 0x14, 0x00, 0x04, 0xc1,
  0xa0, 0x0e, 0x6a, 0xeb, 0xa5, 0xfc, 0xa8, 0x8f, 0x46, 0x8a, 0xad, 0x60,
  0x6a, 0x34, 0x21, 0x00, 0x46, 0x13, 0x84, 0x60, 0x34, 0x61, 0x10, 0x46,
  0x13, 0x88, 0x61, 0xc4, 0x40, 0x01, 0x40, 0x10, 0x0c, 0xea, 0x40, 0xb7,
  0x68, 0x6a, 0x94, 0x44, 0xe9, 0xa4, 0xe2, 0xaa, 0xa6, 0x46, 0x13, 0x02,
  0x60, 0x34, 0x41, 0x08, 0x46, 0x13, 0x06, 0x61, 0x34, 0x81, 0x18, 0x46,
  0x0c, 0x14, 0x00, 0x04, 0xc1, 0xa0, 0x0e, 0x7e, 0x2b, 0xa7, 0x50, 0xe9,
  0x94, 0xde, 0xca, 0xae, 0x74, 0x6a, 0x34, 0x21, 0x00, 0x46, 0x13, 0x84,
  0x60, 0x34, 0x61, 0x10, 0x46, 0x13, 0x88, 0x61, 0xc4, 0xe0, 0x00, 0x40,
  0x10, 0x0c, 0x46, 0x61, 0xb7, 0x70, 0xea, 0x96, 0x64, 0x6a, 0xc4, 0xe0,
  0x00, 0x40, 0x10, 0x0c, 0x46, 0x81, 0xb7, 0x72, 0x0a, 0x97, 0xec, 0x6a,
  0xc4, 0xe0, 0x00, 0x40, 0x10, 0x0c, 0x46, 0xa1, 0xb7, 0x74, 0x2a, 0x97,
  0xf0, 0x6a, 0x34, 0x21, 0x00, 0x46, 0x13, 0x84, 0x60, 0x34, 0x61, 0x10,
  0x46, 0x13, 0x88, 0x61, 0xc4, 0xe0, 0x00, 0x40, 0x10, 0x0c, 0x4e, 0xe1,
  0xb7, 0xc2, 0x0a, 0xb7, 0x48, 0x6b, 0xc4, 0xe0, 0x00, 0x40, 0x10, 0x0c,
  0x4e, 0x01, 0xbc, 0xc4, 0x8a, 0xb7, 0x4a, 0x6b, 0xc4, 0xe0, 0x00, 0x40,
  0x10, 0x0c, 0x4e, 0x21, 0xbc, 0xc6, 0x0a, 0xb7, 0x4c, 0x6b, 0xc4, 0xe0,
  0x00, 0x40, 0x10, 0x0c, 0x4e, 0x41, 0xbc, 0xc8, 0x6a, 0xb7, 0x54, 0x6b,
  0xc4, 0xe0, 0x00, 0x40, 0x10, 0x0c, 0x4e, 0x61, 0xbc, 0xca, 0xea, 0xb7,
  0x56, 0x6b, 0xc4, 0xe0, 0x00, 0x40, 0x10, 0x0c, 0x4e, 0x81, 0xbc, 0xcc,
  0x6a, 0xb7, 0x58, 0x6b, 0xc4, 0xe0, 0x00, 0x40, 0x10, 0x0c, 0x4e, 0xa1,
  0xbc, 0xce, 0xca, 0xb7, 0x52, 0x6b, 0xc4, 0xe0, 0x00, 0x40, 0x10, 0x0c,
  0x4e, 0xc1, 0xbc, 0xd0, 0x4a, 0xbc, 0x54, 0x6b, 0xc4, 0xe0, 0x00, 0x40,
  0x10, 0x0c, 0x4e, 0xe1, 0xbc, 0xd2, 0xca, 0xb7, 0x56, 0x6b, 0xc4, 0xe0,
  0x00, 0x40, 0x10, 0x0c, 0x4e, 0x01, 0xbd, 0xd4, 0x2a, 0xbc, 0x5e, 0x6b,
  0xc4, 0xe0, 0x00, 0x40, 0x10, 0x0c, 0x4e, 0x21, 0xbd, 0xd6, 0xaa, 0xbc,
  0x60, 0x6b, 0xc4, 0xe0, 0x00, 0x40, 0x10, 0x0c, 0x4e, 0x41, 0xbd, 0xd8,
  0x2a, 0xbc, 0x62, 0xcb, 0x18, 0x97, 0x91, 0xcf, 0x88, 0x01, 0x02, 0x80,
  0x20, 0x18, 0x94, 0x82, 0x7b, 0xd1, 0x95, 0xcb, 0x28, 0xc1, 0x88, 0x01,
  0x02, 0x80, 0x20, 0x18, 0x94, 0xc2, 0x7b, 0xd5, 0x95, 0xcb, 0x20, 0x81,
  0x05, 0x06, 0x74, 0xec, 0x91, 0x19, 0xf9, 0x8c, 0x18, 0x20, 0x00, 0x08,
  0x82, 0x41, 0x29, 0xc8, 0x17, 0x5e, 0xc9, 0x4c, 0x13, 0x8c, 0x18, 0x20,
  0x00, 0x08, 0x82, 0x41, 0x29, 0xcc, 0x57, 0x5e, 0xc9, 0xcc, 0x12, 0x58,
  0x90, 0x40, 0xc7, 0x24, 0x9b, 0x91, 0xcf, 0x88, 0x01, 0x02, 0x80, 0x20,
  0x18, 0x94, 0x82, 0x7d, 0xf1, 0x95, 0xcd, 0x40, 0xc1, 0x88, 0x01, 0x02,
  0x80, 0x20, 0x18, 0x94, 0xc2, 0x7d, 0xf5, 0x95, 0xcd, 0x38, 0x81, 0x05,
  0x0c, 0x74, 0x2c, 0x91, 0x03, 0xf9, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82,
  0x41, 0x29, 0xe8, 0x17, 0x68, 0x19, 0x72, 0x10, 0x8c, 0x18, 0x20, 0x00,
  0x08, 0x82, 0x41, 0x29, 0xec, 0x57, 0x68, 0x0d, 0x72, 0x10, 0x58, 0x20,
  0x07, 0xd0, 0xb1, 0x26, 0x0e, 0xe4, 0x33, 0x62, 0x80, 0x00, 0x20, 0x08,
  0x06, 0xa5, 0xe0, 0x5f, 0xa4, 0xa5, 0xc4, 0x41, 0x30, 0x62, 0x80, 0x00,
  0x20, 0x08, 0x06, 0xa5, 0xf0, 0x5f, 0xa5, 0x75, 0xc4, 0x41, 0x60, 0x41,
  0x1c, 0x40, 0xc7, 0x22, 0x38, 0x90, 0xcf, 0x88, 0x01, 0x02, 0x80, 0x20,
  0x18, 0x94, 0x82, 0x88, 0xa1, 0x96, 0x03, 0x07, 0xc1, 0x88, 0x01, 0x02,
  0x80, 0x20, 0x18, 0x94, 0xc2, 0x88, 0xa5, 0xd6, 0x02, 0x07, 0x81, 0x05,
  0x70, 0x00, 0x1d, 0xab, 0xde, 0x40, 0x3e, 0x23, 0x06, 0x08, 0x00, 0x82,
  0x60, 0x50, 0x0a, 0x26, 0xc6, 0x5a, 0xd2, 0x1b, 0x04, 0x23, 0x06, 0x08,
  0x00, 0x82, 0x60, 0x50, 0x0a, 0x27, 0xd6, 0x5a, 0xcf, 0x1b, 0x04, 0x16,
  0xbc, 0x01, 0x74, 0xac, 0x61, 0x03, 0xf9, 0x8c, 0x18, 0x20, 0x00, 0x08,
  0x82, 0x41, 0x29, 0xa8, 0x18, 0x6c, 0x29, 0x6c, 0x10, 0x8c, 0x18, 0x20,
  0x00, 0x08, 0x82, 0x41, 0x29, 0xac, 0x58, 0x6c, 0x1d, 0x6c, 0x10, 0x8c,
  0x18, 0x20, 0x00, 0x08, 0x82, 0x41, 0x29, 0xb0, 0x98, 0x6c, 0x11, 0x6c,
  0x10, 0x8c, 0x18, 0x18, 0x00, 0x08, 0x82, 0x01, 0x2b, 0xa4, 0xd8, 0x68,
  0xb5, 0xd4, 0x88, 0xc1, 0x01, 0x80, 0x20, 0x18, 0xa8, 0xc2, 0x8a, 0xc1,
  0x56, 0x80, 0x53, 0x23, 0x06, 0x0f, 0x00, 0x82, 0x60, 0xb0, 0x07, 0x33,
  0xf6, 0x57, 0xf3, 0x14, 0xb4, 0x82, 0x2a, 0xf0, 0x14, 0x4f, 0x99, 0x98,
  0x89, 0xad, 0x96, 0x4f, 0x8d, 0x26, 0x04, 0xc0, 0x88, 0xc1, 0x03, 0x80,
  0x20, 0x18, 0xec, 0x41, 0x8d, 0x85, 0xd6, 0x3c, 0x0d, 0xaf, 0xc0, 0x0a,
  0x3e, 0xe5, 0x53, 0x28, 0x86, 0x62, 0xad, 0x05, 0x56, 0xa3, 0x09, 0x01,
  0x30, 0x62, 0xb0, 0x00, 0x20, 0x08, 0x06, 0x61, 0x80, 0x66, 0xb6, 0xe5,
  0x33, 0x3d, 0xc3, 0x33, 0x64, 0x31, 0x16, 0x62, 0x31, 0x62, 0x60, 0x00,
  0x20, 0x08, 0x06, 0x9f, 0x9a, 0xb1, 0x58, 0x30, 0x62, 0x70, 0x00, 0x20,
  0x08, 0x06, 0x6c, 0x30, 0x66, 0xf2, 0x15, 0x8c, 0x95, 0x05, 0x81, 0x7c,
  0xac, 0xac, 0x82, 0xf8, 0x58, 0x20, 0xd0, 0xc7, 0x02, 0xbd, 0x92, 0xcf,
  0x88, 0x81, 0x01, 0x80, 0x20, 0x18, 0x7c, 0x70, 0x36, 0x63, 0xc1, 0x88,
  0xc1, 0x02, 0x80, 0x20, 0x18, 0x84, 0x01, 0x9c, 0xf9, 0x96, 0xd9, 0x94,
  0x0d, 0xd9, 0xc4, 0x06, 0x6c, 0xbc, 0xc6, 0x88, 0x81, 0x01, 0x80, 0x20,
  0x18, 0x7c, 0x72, 0x46, 0x63, 0xc1, 0x88, 0xc1, 0x01, 0x80, 0x20, 0x18,
  0xb0, 0xc1, 0x9a, 0xa5, 0x56, 0xc0, 0x57, 0x16, 0x04, 0xf2, 0xb1, 0xb6,
  0x0a, 0xe2, 0x63, 0x81, 0x40, 0x1f, 0x0b, 0x0e, 0xf9, 0x58, 0x00, 0x57,
  0xf0, 0x19, 0x31, 0x30, 0x00, 0x10, 0x04, 0x83, 0x2f, 0xcf, 0xc0, 0x2b,
  0xb0, 0x40, 0xae, 0xe0, 0x63, 0x76, 0x15, 0xd0, 0x67, 0xc4, 0x60, 0x01,
  0x40, 0x10, 0x0c, 0xc2, 0x60, 0xcf, 0xd2, 0xeb, 0x2e, 0xec, 0xa2, 0x2e,
  0xc6, 0x43, 0x3c, 0xc2, 0x63, 0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c, 0xbe,
  0x3e, 0x03, 0xb3, 0xc0, 0x52, 0x24, 0x45, 0xe4, 0x63, 0xee, 0x91, 0x22,
  0xf2, 0x31, 0xf7, 0x50, 0x11, 0xf9, 0x98, 0x7b, 0xac, 0x88, 0x7c, 0x2c,
  0x3e, 0x86, 0xf8, 0x58, 0x7c, 0x0c, 0xf1, 0xb1, 0xf8, 0x18, 0xe2, 0x63,
  0x43, 0x8c, 0xc8, 0xc7, 0x06, 0x19, 0x91, 0x8f, 0x0d, 0x33, 0x22, 0x1f,
  0xbb, 0x0f, 0xd7, 0x82, 0x8f, 0xdd, 0xc7, 0x6b, 0xc1, 0xc7, 0xee, 0x03,
  0xb6, 0xe0, 0x63, 0x43, 0x8d, 0xc8, 0xc7, 0x06, 0x1b, 0x91, 0x8f, 0x0d,
  0x37, 0x22, 0x1f, 0x1b, 0x6a, 0x0b, 0x3e, 0x36, 0xd8, 0x16, 0x7c, 0x6c,
  0xb8, 0x2d, 0xf8, 0xd8, 0xd0, 0x23, 0xf2, 0xb1, 0xc1, 0x47, 0xe4, 0x63,
  0xc3, 0x8f, 0xc8, 0xc7, 0xf6, 0xe3, 0x3e, 0xe2, 0x63, 0xfb, 0x71, 0x1f,
  0xf1, 0xb1, 0xfd, 0xb8, 0x8f, 0xf8, 0x8c, 0x18, 0x2c, 0x00, 0x08, 0x82,
  0x41, 0x18, 0xd8, 0x1a, 0x89, 0x0d, 0x42, 0x30, 0x08, 0xc1, 0x88, 0x81,
  0x01, 0x80, 0x20, 0x18, 0x7c, 0xb8, 0x36, 0x5f, 0x81, 0x05, 0x85, 0x7c,
  0x4c, 0x28, 0xe4, 0x63, 0x43, 0x21, 0x9f, 0x11, 0x83, 0x05, 0x00, 0x41,
  0x30, 0x08, 0x83, 0x5d, 0x4b, 0xb1, 0xdb, 0xb0, 0x8d, 0xda, 0xe0, 0x8f,
  0xfd, 0xd0, 0x8f, 0x11, 0x03, 0x03, 0x00, 0x41, 0x30, 0xf8, 0x7a, 0x0d,
  0xd4, 0x82, 0x11, 0x83, 0x05, 0x00, 0x41, 0x30, 0x08, 0x83, 0x5e, 0x5b,
  0x31, 0xff, 0xe8, 0x0f, 0xfe, 0x28, 0x88, 0x61, 0xc4, 0xc0, 0x00, 0x40,
  0x10, 0x0c, 0xbe, 0x5f, 0x13, 0xb5, 0x60, 0xc4, 0x60, 0x01, 0x40, 0x10,
  0x0c, 0xc2, 0xe0, 0xd7, 0x5a, 0x6c, 0x37, 0x74, 0x23, 0x37, 0x0e, 0xa3,
  0x18, 0x31, 0x30, 0x00, 0x10, 0x04, 0x83, 0x2f, 0xdc, 0x48, 0x2d, 0xb0,
  0x36, 0xe9, 0x2d, 0xf9, 0x18, 0x41, 0xc8, 0xc7, 0x02, 0x41, 0x3e, 0x16,
  0xc4, 0x17, 0x7c, 0xcc, 0xb7, 0x92, 0xf8, 0x8c, 0x18, 0x18, 0x00, 0x08,
  0x82, 0xc1, 0x77, 0x6e, 0x2b, 0x16, 0x58, 0x00, 0x5f, 0xf2, 0x19, 0x31,
  0x30, 0x00, 0x10, 0x04, 0x83, 0x2f, 0xdd, 0x5c, 0x2c, 0xb0, 0xa0, 0x90,
  0x8f, 0x05, 0xe3, 0x05, 0x1f, 0x23, 0xaf, 0x37, 0x88, 0xcf, 0x88, 0x81,
  0x01, 0x80, 0x20, 0x18, 0x7c, 0xed, 0x16, 0x63, 0x81, 0x05, 0xf6, 0x25,
  0x9f, 0x11, 0x03, 0x03, 0x00, 0x41, 0x30, 0xf8, 0xde, 0x8d, 0xc6, 0x02,
  0x0b, 0x16, 0xf9, 0x58, 0x90, 0x5e, 0xf0, 0xb1, 0xe0, 0x90, 0x8f, 0xd5,
  0x41, 0x1d, 0xc8, 0xc7, 0x02, 0xfb, 0x82, 0x8f, 0x51, 0x94, 0x7c, 0x2c,
  0x10, 0xe4, 0x63, 0xc1, 0x7b, 0xc1, 0xc7, 0x82, 0x40, 0x3e, 0x16, 0x98,
  0x98, 0x7c, 0x46, 0x0c, 0x0e, 0x00, 0x04, 0xc1, 0x80, 0x0d, 0xe4, 0x0d,
  0xc6, 0x46, 0x2c, 0x30, 0x24, 0xa0, 0x8f, 0xd1, 0x57, 0x17, 0x9f, 0x11,
  0x03, 0x03, 0x00, 0x41, 0x30, 0xf8, 0xfa, 0x2d, 0xcc, 0x02, 0x0b, 0x4c,
  0x4c, 0x3e, 0x23, 0x06, 0x06, 0x00, 0x82, 0x60, 0xf0, 0xfd, 0x1b, 0x99,
  0x05, 0x86, 0x5f, 0x5d, 0x7c, 0xcc, 0x79, 0x31, 0xf9, 0x58, 0x20, 0xc8,
  0xc7, 0x02, 0x30, 0x80, 0x8f, 0xf1, 0x57, 0x40, 0x1f, 0x9b, 0xfc, 0x40,
  0x3e, 0xe6, 0x5f, 0x73, 0x10, 0x1f, 0x43, 0x02, 0xf9, 0x58, 0x50, 0x07,
  0xf0, 0x31, 0x47, 0x56, 0xe4, 0x63, 0x81, 0x21, 0x1f, 0x0b, 0x06, 0xf9,
  0x58, 0x70, 0xc0, 0xc7, 0x64, 0x81, 0x76, 0xe4, 0x63, 0x41, 0x1c, 0xc8,
  0xc7, 0x82, 0x41, 0x3e, 0xe6, 0xa9, 0x82, 0x7c, 0x2c, 0xc5, 0xfe, 0x20,
  0x3e, 0x36, 0x05, 0xf2, 0xb1, 0x20, 0x14, 0xe0, 0x63, 0x4a, 0x20, 0x1f,
  0x0b, 0x0a, 0xf8, 0xd8, 0x2e, 0xf8, 0x8e, 0x7c, 0x2c, 0xd0, 0x03, 0xf9,
  0x58, 0x30, 0xc8, 0xc7, 0xce, 0x80, 0x16, 0xe4, 0x63, 0x32, 0x96, 0x0a,
  0xf1, 0x31, 0x2e, 0x90, 0x8f, 0x05, 0xab, 0x00, 0x1f, 0x9b, 0x02, 0xf9,
  0x58, 0x50, 0xc0, 0xc7, 0xc8, 0x01, 0x7d, 0xe4, 0x63, 0xc1, 0x28, 0xc8,
  0xc7, 0x82, 0x41, 0x3e, 0xd6, 0x0b, 0xef, 0x23, 0x1f, 0x0b, 0xfa, 0x41,
  0x3e, 0xe6, 0x0b, 0xf0, 0x23, 0x1f, 0x0b, 0xfe, 0x41, 0x3e, 0xf6, 0x0b,
  0xf1, 0x23, 0x1f, 0x0b, 0x42, 0x42, 0x3e, 0x96, 0x1b, 0xb7, 0x20, 0x1f,
  0xcb, 0x8d, 0x5b, 0x90, 0x8f, 0xe5, 0xc6, 0x2d, 0xc8, 0xc7, 0x94, 0x01,
  0x3e, 0x16, 0x90, 0x84, 0x7c, 0x4c, 0xa1, 0x17, 0xf8, 0x58, 0x20, 0xc0,
  0xc7, 0x2e, 0x03, 0x3e, 0x16, 0xa0, 0x84, 0x7c, 0x8c, 0xb9, 0x17, 0xf8,
  0x58, 0x20, 0xc0, 0xc7, 0xc8, 0x20, 0x81, 0x8f, 0x05, 0x2c, 0x21, 0x1f,
  0x73, 0xf4, 0x05, 0x3e, 0x16, 0x08, 0xf0, 0x19, 0x31, 0x38, 0x00, 0x10,
  0x04, 0x03, 0x50, 0x18, 0xbb, 0x5f, 0xf3, 0x31, 0x5f, 0x1b, 0x4d, 0x08,
  0x86, 0xe1, 0x86, 0x40, 0xe7, 0xc0, 0x60, 0x96, 0x81, 0x59, 0x82, 0x39,
  0x86, 0x54, 0x63, 0x76, 0x6e, 0x8e, 0x21, 0x48, 0x7e, 0x6e, 0x8e, 0x21,
  0x30, 0x76, 0x6e, 0x96, 0xa0, 0x19, 0x4d, 0x60, 0x8d, 0x61, 0x34, 0xa1,
  0x35, 0x84, 0xd1, 0x04, 0xd7, 0x08, 0x46, 0x13, 0x5e, 0x03, 0xb0, 0xb7,
  0x08, 0xe4, 0x33, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0xa5, 0xc0, 0x76,
  0xf2, 0xc6, 0x16, 0x43, 0x30, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0xa5,
  0xd0, 0x76, 0xf3, 0x96, 0x16, 0x45, 0x30, 0x62, 0x80, 0x00, 0x20, 0x08,
  0x06, 0xa5, 0xe0, 0x76, 0xf4, 0x66, 0x16, 0x47, 0x60, 0xc1, 0x58, 0xd0,
  0x67, 0x34, 0xc1, 0x36, 0x86, 0xd1, 0x84, 0xdb, 0x10, 0x46, 0x13, 0x70,
  0x23, 0x18, 0x4d, 0xc8, 0x0d, 0xc0, 0xf0, 0x22, 0x90, 0xcf, 0x88, 0x01,
  0x02, 0x80, 0x20, 0x18, 0x94, 0x42, 0xdd, 0xed, 0x5b, 0x5d, 0x0c, 0xc1,
  0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x94, 0x82, 0xdd, 0xf1, 0x9b, 0x5c,
  0x14, 0xc1, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x94, 0xc2, 0xdd, 0xf5,
  0xdb, 0x5b, 0x1c, 0x81, 0x05, 0x6c, 0x41, 0x9f, 0x11, 0x83, 0x07, 0x00,
  0x41, 0x30, 0xd8, 0x83, 0xbe, 0x4b, 0xb7, 0x1c, 0x5b, 0x8b, 0x40, 0x31,
  0x35, 0x53, 0x83, 0x3b, 0xb8, 0xab, 0x37, 0x54, 0x1b, 0x4d, 0x08, 0x80,
  0xd1, 0x04, 0x21, 0x18, 0x4d, 0x18, 0x04, 0x1b, 0xca, 0x20, 0x3e, 0x36,
  0x88, 0x41, 0x7c, 0x6c, 0xf8, 0xe2, 0x63, 0x83, 0xac, 0xc9, 0xc7, 0x86,
  0x59, 0x93, 0x8f, 0x0d, 0xb4, 0x26, 0x1f, 0x1b, 0xd6, 0x00, 0x3e, 0x36,
  0xa0, 0x01, 0x7c, 0x6c, 0x28, 0x03, 0xf8, 0xcc, 0x31, 0xac, 0xdb, 0xd0,
  0x77, 0x73, 0x0c, 0xc1, 0x10, 0x7a, 0x73, 0x0c, 0xc1, 0xd0, 0x77, 0xb3,
  0x04, 0xcd, 0x40, 0xc5, 0x21, 0x30, 0xa6, 0xb0, 0xec, 0xc9, 0x20, 0x77,
  0xa1, 0x17, 0x7a, 0xc3, 0x06, 0x44, 0x20, 0x0c, 0x00, 0x86, 0x03, 0x01,
  0x04, 0x00, 0x00, 0x00, 0xc6, 0x43, 0x00, 0xd3, 0x14, 0xd9, 0xce, 0xf1,
  0x00, 0xd8, 0xe2, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x31, 0x00, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x5b, 0x0a, 0x1b, 0x0a, 0x58, 0xe1, 0xb8, 0x85,
  0x2d, 0x85, 0x0e, 0x05, 0xa9, 0x70, 0xdc, 0xc2, 0x96, 0xc2, 0x8f, 0x02,
  0x56, 0x38, 0x6e, 0x61, 0xcb, 0x40, 0x4a, 0x41, 0x2a, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x61, 0x20, 0x00, 0x00, 0xa3, 0x02, 0x00, 0x00,
  0x13, 0x04, 0x48, 0x2c, 0x10, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00,
  0x04, 0x28, 0x81, 0x32, 0x28, 0x87, 0x11, 0x80, 0x22, 0x20, 0xce, 0x08,
  0x00, 0x35, 0x8a, 0xa0, 0x04, 0x08, 0x51, 0xb6, 0x02, 0xc5, 0x55, 0x08,
  0x65, 0x29, 0x50, 0xae, 0x02, 0xe5, 0x56, 0xb0, 0x03, 0x05, 0x53, 0xb4,
  0x03, 0x85, 0x31, 0x03, 0x50, 0xa6, 0x02, 0x85, 0x2a, 0x50, 0xc0, 0x02,
  0x85, 0x89, 0x50, 0x20, 0xe5, 0xff, 0x7f, 0x50, 0x1a, 0x65, 0x57, 0xa0,
  0x01, 0xa5, 0x29, 0x50, 0xaa, 0x03, 0x85, 0x55, 0xc2, 0x02, 0x95, 0x50,
  0xb4, 0x02, 0x85, 0x57, 0x92, 0x10, 0xc5, 0x51, 0x7e, 0x44, 0x18, 0x23,
  0x68, 0xcd, 0x39, 0xe7, 0xbd, 0x31, 0x02, 0x10, 0x04, 0x41, 0xfc, 0x1b,
  0x23, 0x00, 0x41, 0x10, 0x04, 0x41, 0x61, 0x06, 0x80, 0x92, 0x73, 0x08,
  0xb6, 0xd0, 0x06, 0x73, 0x08, 0xb3, 0x80, 0x0b, 0x73, 0x08, 0xb3, 0xb0,
  0x0b, 0x73, 0x08, 0x75, 0xc0, 0x06, 0x73, 0x08, 0x6e, 0x00, 0x0e, 0x73,
  0x08, 0xe1, 0xc0, 0x06, 0x00, 0x00, 0x00, 0x00, 0xd4, 0x0e, 0x82, 0x41,
  0xeb, 0xa0, 0x00, 0x23, 0x06, 0x06, 0x00, 0x82, 0x60, 0xe0, 0x0a, 0xa7,
  0xd0, 0x05, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0xa0, 0x0a, 0xaa, 0x50,
  0x06, 0x41, 0xb2, 0x27, 0x83, 0x1d, 0x94, 0x42, 0x29, 0x50, 0x70, 0x18,
  0x7b, 0x32, 0xe0, 0xc1, 0x29, 0xa8, 0x02, 0x05, 0x88, 0xb1, 0x27, 0x84,
  0x1e, 0xa4, 0xc2, 0x29, 0xa4, 0x02, 0x05, 0x87, 0x31, 0x86, 0x10, 0xac,
  0xc2, 0x18, 0x82, 0xf0, 0x0a, 0x63, 0x08, 0xc3, 0x2a, 0xec, 0x09, 0xf1,
  0x07, 0xae, 0xc0, 0x0a, 0xb1, 0x40, 0xc1, 0x61, 0x8c, 0x21, 0x04, 0xb0,
  0x30, 0x86, 0x20, 0xd0, 0xc2, 0x18, 0xc2, 0x00, 0x0b, 0x7b, 0x42, 0x90,
  0xc2, 0x2c, 0xc0, 0xc2, 0x2c, 0x50, 0x70, 0x18, 0x63, 0x08, 0x41, 0x2d,
  0x8c, 0x21, 0x08, 0xb9, 0x30, 0x86, 0x30, 0xd4, 0xc2, 0x9e, 0x10, 0xa9,
  0x80, 0x0b, 0xb5, 0xb0, 0x0b, 0x14, 0x1c, 0xc6, 0x18, 0x42, 0xa0, 0x0b,
  0x63, 0x08, 0x82, 0x2f, 0x8c, 0x21, 0x0c, 0xba, 0x30, 0x62, 0x70, 0x00,
  0x20, 0x08, 0x06, 0xa0, 0x80, 0x0e, 0x72, 0x90, 0xf5, 0xc1, 0x68, 0x42,
  0x10, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0x41, 0xf7, 0x0f, 0x7e, 0x10,
  0xa4, 0x42, 0x2a, 0x8c, 0x18, 0x1c, 0x00, 0x08, 0x82, 0x81, 0x2a, 0x98,
  0x43, 0x28, 0x04, 0x64, 0x30, 0x62, 0x50, 0x00, 0x20, 0x08, 0x06, 0x77,
  0x00, 0x0f, 0x74, 0x30, 0x62, 0x50, 0x00, 0x20, 0x08, 0x06, 0x77, 0x30,
  0x0f, 0x74, 0x50, 0x81, 0x00, 0x23, 0x06, 0x0a, 0x00, 0x82, 0x60, 0x40,
  0x06, 0x21, 0x81, 0x0a, 0x44, 0x40, 0x0e, 0xb3, 0x90, 0x0a, 0xa3, 0x09,
  0x01, 0x30, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x9d, 0x49, 0x94, 0x42,
  0x00, 0x0b, 0xb0, 0x30, 0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0xaa, 0xd0,
  0x0e, 0xa8, 0x10, 0xa8, 0xc1, 0x88, 0x81, 0x02, 0x80, 0x20, 0x18, 0x90,
  0x41, 0x49, 0xb0, 0x02, 0x52, 0xb4, 0xc2, 0x2d, 0xb4, 0xc2, 0x68, 0x42,
  0x00, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0x41, 0xa7, 0x12, 0xa9, 0x10,
  0xd0, 0x02, 0x2d, 0x8c, 0x18, 0x14, 0x00, 0x08, 0x82, 0xc1, 0x1d, 0xec,
  0xc3, 0x1e, 0x8c, 0x18, 0x28, 0x00, 0x08, 0x82, 0x01, 0x19, 0xa4, 0x04,
  0x2c, 0x30, 0x09, 0x3a, 0xec, 0x42, 0x2c, 0x8c, 0x26, 0x04, 0xc0, 0x70,
  0x43, 0xe0, 0x0e, 0x61, 0x30, 0xdd, 0x00, 0x0f, 0xad, 0x10, 0x54, 0x50,
  0xc8, 0x70, 0x03, 0x11, 0x0f, 0x60, 0x30, 0x62, 0x70, 0x00, 0x20, 0x08,
  0x06, 0xaa, 0x80, 0x0f, 0xb3, 0x80, 0xd0, 0xc1, 0x2c, 0x03, 0x11, 0x08,
  0x35, 0x88, 0x82, 0x8e, 0x18, 0x28, 0x00, 0x08, 0x82, 0x01, 0x19, 0xc4,
  0x04, 0x2e, 0x08, 0x41, 0x2c, 0x88, 0x43, 0x2e, 0x8c, 0x26, 0x04, 0xc0,
  0x68, 0x82, 0x10, 0x0c, 0x37, 0x10, 0x07, 0x18, 0xd4, 0x00, 0x0b, 0x58,
  0x03, 0x2c, 0xe8, 0x2c, 0x83, 0x30, 0x0c, 0x55, 0xc4, 0x82, 0xce, 0x12,
  0x14, 0x55, 0xcc, 0x02, 0xce, 0x12, 0x14, 0x23, 0x06, 0x0a, 0x00, 0x82,
  0x60, 0x40, 0x06, 0x39, 0x01, 0x0e, 0x0a, 0x93, 0x0b, 0xe9, 0x10, 0x0e,
  0xa3, 0x09, 0x01, 0x30, 0x9a, 0x20, 0x04, 0xa3, 0x09, 0x83, 0x30, 0x4b,
  0x50, 0x0c, 0x74, 0x20, 0x06, 0xc1, 0x08, 0xd0, 0x30, 0xd0, 0x81, 0x18,
  0x84, 0x24, 0x40, 0xc3, 0x40, 0x07, 0x62, 0x10, 0x92, 0xe0, 0x0c, 0x23,
  0x06, 0x07, 0x00, 0x82, 0x60, 0x70, 0x0a, 0x2b, 0x61, 0x0e, 0x23, 0xf1,
  0x0e, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0x70, 0x0a, 0x2c, 0x71, 0x0e,
  0x27, 0x01, 0x0f, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0x70, 0x0a, 0x2d,
  0x81, 0x0e, 0x23, 0x11, 0x0f, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0x70,
  0x0a, 0x2e, 0x91, 0x0e, 0x26, 0x51, 0x0f, 0x23, 0x06, 0x07, 0x00, 0x82,
  0x60, 0x70, 0x0a, 0x2f, 0xa1, 0x0e, 0x2a, 0x61, 0x0f, 0x23, 0x06, 0x07,
  0x00, 0x82, 0x60, 0x70, 0x0a, 0x30, 0xb1, 0x0e, 0x26, 0x71, 0x0f, 0x23,
  0x06, 0x07, 0x00, 0x82, 0x60, 0x70, 0x0a, 0x31, 0xc1, 0x0e, 0x29, 0x41,
  0x0f, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0x70, 0x0a, 0x32, 0xd1, 0x0e,
  0x2d, 0x51, 0x0f, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0x70, 0x0a, 0x33,
  0xe1, 0x0e, 0x29, 0x61, 0x0f, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0x70,
  0x0a, 0x34, 0xf1, 0x0e, 0x2c, 0xa1, 0x0f, 0x23, 0x06, 0x07, 0x00, 0x82,
  0x60, 0x70, 0x0a, 0x35, 0x01, 0x0f, 0x30, 0xb1, 0x0f, 0x23, 0x06, 0x07,
  0x00, 0x82, 0x60, 0x70, 0x0a, 0x36, 0x11, 0x0f, 0x2c, 0xc1, 0x0f, 0x23,
  0x06, 0x0a, 0x00, 0x82, 0x60, 0x50, 0x07, 0x62, 0x31, 0x0f, 0x68, 0xf0,
  0xbc, 0x04, 0x3f, 0xd0, 0xc3, 0x68, 0x42, 0x00, 0x8c, 0x26, 0x08, 0xc1,
  0x68, 0xc2, 0x20, 0xd8, 0x00, 0xc9, 0x67, 0xc4, 0x00, 0x01, 0x40, 0x10,
  0x0c, 0x4a, 0xa1, 0x27, 0xf4, 0x61, 0x70, 0x82, 0x11, 0x03, 0x04, 0x00,
  0x41, 0x30, 0x28, 0x05, 0x9f, 0xd8, 0x87, 0x81, 0x09, 0x2c, 0x50, 0xa0,
  0x63, 0xc7, 0x24, 0x9f, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0x28, 0x85,
  0xb0, 0xf0, 0x87, 0x23, 0x0a, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1, 0xa0,
  0x14, 0xc4, 0xe2, 0x1f, 0x8e, 0x27, 0xb0, 0xa0, 0x81, 0x8e, 0x2d, 0x96,
  0x7c, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1, 0xa0, 0x14, 0xca, 0x42, 0x24,
  0x16, 0x2a, 0x18, 0x31, 0x40, 0x00, 0x10, 0x04, 0x83, 0x52, 0x30, 0x8b,
  0x91, 0x58, 0xa4, 0xc0, 0x02, 0x08, 0x3a, 0x23, 0x06, 0x0a, 0x00, 0x82,
  0x60, 0x50, 0x07, 0x72, 0x31, 0x12, 0x78, 0xe0, 0xfd, 0x04, 0x4b, 0x90,
  0xc4, 0x68, 0x42, 0x00, 0x8c, 0x26, 0x08, 0xc1, 0x68, 0xc2, 0x20, 0xd8,
  0x00, 0x06, 0xf2, 0x19, 0x31, 0x40, 0x00, 0x10, 0x04, 0x83, 0x52, 0x68,
  0x0b, 0x95, 0x18, 0xbc, 0x60, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0x4a,
  0xc1, 0x2d, 0x56, 0x62, 0xe0, 0x02, 0x33, 0xc4, 0x40, 0x3e, 0x23, 0x06,
  0x08, 0x00, 0x82, 0x60, 0x50, 0x0a, 0x70, 0xd1, 0x12, 0x06, 0x18, 0x04,
  0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0x50, 0x0a, 0x71, 0xe1, 0x12, 0x86,
  0x17, 0x58, 0x42, 0x06, 0xf2, 0x19, 0x31, 0x40, 0x00, 0x10, 0x04, 0x83,
  0x52, 0x98, 0x0b, 0x98, 0x48, 0xc4, 0x20, 0x18, 0x31, 0x40, 0x00, 0x10,
  0x04, 0x83, 0x52, 0xa0, 0x8b, 0x98, 0x48, 0xc0, 0x20, 0x18, 0x31, 0x50,
  0x00, 0x10, 0x04, 0x83, 0x3a, 0xf8, 0x0b, 0x98, 0x28, 0x05, 0x35, 0x60,
  0x8b, 0x9c, 0x88, 0x89, 0xd1, 0x84, 0x00, 0x18, 0x4d, 0x10, 0x82, 0xd1,
  0x84, 0x41, 0xb0, 0xa1, 0x0d, 0xe4, 0x33, 0x62, 0x80, 0x00, 0x20, 0x08,
  0x06, 0xa5, 0xa0, 0x17, 0x37, 0x31, 0xac, 0x41, 0x30, 0x62, 0x80, 0x00,
  0x20, 0x08, 0x06, 0xa5, 0xb0, 0x17, 0x38, 0x31, 0xa4, 0x41, 0x60, 0xc6,
  0x1b, 0xc8, 0x67, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0x4a, 0xa1, 0x2f,
  0x74, 0xc2, 0x68, 0x83, 0x60, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0x4a,
  0xc1, 0x2f, 0x76, 0xc2, 0x58, 0x83, 0xc0, 0x92, 0x38, 0x90, 0xcf, 0x88,
  0x01, 0x02, 0x80, 0x20, 0x18, 0x94, 0x02, 0x68, 0xf4, 0x44, 0xf2, 0x06,
  0xc1, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x94, 0x42, 0x68, 0xf8, 0x44,
  0xd2, 0x06, 0xc1, 0x88, 0x81, 0x02, 0x80, 0x20, 0x18, 0xd4, 0x01, 0x6b,
  0xf4, 0x84, 0x2c, 0xe4, 0xc1, 0x4d, 0x98, 0x85, 0x4f, 0x8c, 0x26, 0x04,
  0xc0, 0x68, 0x82, 0x10, 0x8c, 0x26, 0x0c, 0x82, 0x0d, 0x7a, 0x20, 0x9f,
  0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0x28, 0x85, 0xd3, 0x20, 0x8b, 0x01,
  0x0f, 0x82, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0x28, 0x05, 0xd4, 0x28,
  0x8b, 0xc1, 0x0e, 0x02, 0x33, 0xf8, 0x40, 0x3e, 0x23, 0x06, 0x08, 0x00,
  0x82, 0x60, 0x50, 0x0a, 0xaa, 0x71, 0x16, 0x86, 0x1e, 0x04, 0x23, 0x06,
  0x08, 0x00, 0x82, 0x60, 0x50, 0x0a, 0xab, 0x81, 0x16, 0x06, 0x1e, 0x04,
  0x96, 0xf8, 0x81, 0x7c, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1, 0xa0, 0x14,
  0x5a, 0x43, 0x2d, 0x12, 0x3e, 0x08, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1,
  0xa0, 0x14, 0x5c, 0x63, 0x2d, 0x12, 0x3d, 0x08, 0x46, 0x0c, 0x14, 0x00,
  0x04, 0xc1, 0xa0, 0x0e, 0x72, 0x43, 0x2d, 0x7e, 0xa1, 0x14, 0xc8, 0x62,
  0x2e, 0xd6, 0x62, 0x34, 0x21, 0x00, 0x46, 0x13, 0x84, 0x60, 0x34, 0x61,
  0x10, 0x6c, 0x38, 0x05, 0xf9, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0x41,
  0x29, 0xd0, 0x46, 0x5c, 0x0c, 0xa5, 0x10, 0x8c, 0x18, 0x20, 0x00, 0x08,
  0x82, 0x41, 0x29, 0xd4, 0x86, 0x5c, 0x0c, 0xa3, 0x10, 0x98, 0x91, 0x0a,
  0xf2, 0x19, 0x31, 0x40, 0x00, 0x10, 0x04, 0x83, 0x52, 0xb8, 0x0d, 0xba,
  0x30, 0x4e, 0x21, 0x18, 0x31, 0x40, 0x00, 0x10, 0x04, 0x83, 0x52, 0xc0,
  0x8d, 0xba, 0x30, 0x4a, 0x21, 0xb0, 0x64, 0x15, 0xe4, 0x33, 0x62, 0x80,
  0x00, 0x20, 0x08, 0x06, 0xa5, 0xa0, 0x1b, 0x77, 0x91, 0xa4, 0x42, 0x30,
  0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0xa5, 0xb0, 0x1b, 0x78, 0x91, 0x9c,
  0x42, 0x30, 0x62, 0xa0, 0x00, 0x20, 0x08, 0x06, 0x75, 0x60, 0x1e, 0x77,
  0xc1, 0x0e, 0xb1, 0x10, 0x17, 0xa0, 0x81, 0x17, 0xa3, 0x09, 0x01, 0x30,
  0x9a, 0x20, 0x04, 0xa3, 0x09, 0x83, 0x60, 0x03, 0x2d, 0xc8, 0x67, 0xc4,
  0x00, 0x01, 0x40, 0x10, 0x0c, 0x4a, 0x21, 0x3c, 0xfc, 0x62, 0x90, 0x85,
  0x60, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0x4a, 0x41, 0x3c, 0xfe, 0x62,
  0x80, 0x85, 0xc0, 0x0c, 0x5b, 0x90, 0xcf, 0x88, 0x01, 0x02, 0x80, 0x20,
  0x18, 0x94, 0x02, 0x79, 0x84, 0x86, 0x41, 0x0b, 0xc1, 0x88, 0x01, 0x02,
  0x80, 0x20, 0x18, 0x94, 0x42, 0x79, 0x88, 0x86, 0x21, 0x0b, 0x81, 0x25,
  0xb8, 0x20, 0x9f, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0x28, 0x85, 0xf3,
  0x20, 0x8d, 0xc4, 0x16, 0x82, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0x28,
  0x05, 0xf4, 0x28, 0x8d, 0x84, 0x16, 0x82, 0x11, 0x03, 0x05, 0x00, 0x41,
  0x30, 0xa8, 0x83, 0xf9, 0x20, 0x8d, 0x7c, 0x00, 0x07, 0xd0, 0x70, 0x8d,
  0xd2, 0x18, 0x4d, 0x08, 0x80, 0xd1, 0x04, 0x21, 0x18, 0x31, 0x50, 0x00,
  0x10, 0x04, 0x83, 0x3a, 0xb0, 0x8f, 0xd3, 0xe0, 0x07, 0x71, 0x18, 0x8d,
  0xd8, 0x40, 0x8d, 0xd1, 0x84, 0x00, 0x18, 0x4d, 0x10, 0x82, 0x11, 0x03,
  0x05, 0x00, 0x41, 0x30, 0xa8, 0x83, 0xfc, 0x50, 0x8d, 0x7f, 0x20, 0x07,
  0xd3, 0xa0, 0x8d, 0xd5, 0x18, 0x4d, 0x08, 0x80, 0xd1, 0x04, 0x21, 0x18,
  0x31, 0x30, 0x00, 0x10, 0x04, 0x03, 0x33, 0x20, 0x91, 0xd2, 0xa8, 0x8d,
  0x11, 0x03, 0x03, 0x00, 0x41, 0x30, 0x30, 0x83, 0x12, 0x31, 0x8d, 0xdc,
  0x18, 0x31, 0x30, 0x00, 0x10, 0x04, 0x03, 0x33, 0x30, 0x91, 0xd3, 0xb0,
  0x8d, 0x11, 0x83, 0x02, 0x00, 0x41, 0x30, 0x40, 0x03, 0x13, 0xd1, 0x8b,
  0x11, 0x03, 0x03, 0x00, 0x41, 0x30, 0x30, 0x83, 0x14, 0x41, 0x8d, 0xdc,
  0x18, 0x31, 0x30, 0x00, 0x10, 0x04, 0x03, 0x33, 0x50, 0x91, 0xd4, 0xe8,
  0x8d, 0x11, 0x03, 0x03, 0x00, 0x41, 0x30, 0x30, 0x83, 0x15, 0x51, 0x0d,
  0xdd, 0xb0, 0x81, 0x90, 0x8f, 0x0d, 0x85, 0x7c, 0x6c, 0x30, 0xe4, 0x63,
  0x83, 0x02, 0x1f, 0x1b, 0x14, 0xf8, 0xd8, 0xa0, 0xc0, 0x67, 0x5b, 0x06,
  0xf3, 0xb0, 0x0f, 0xfb, 0xa0, 0xa0, 0x32, 0xc6, 0x10, 0x02, 0xfc, 0xb0,
  0x36, 0xd0, 0x83, 0xf8, 0xd8, 0x1a, 0xe0, 0x41, 0x7c, 0x2c, 0x0d, 0xec,
  0x20, 0x3e, 0x46, 0x0c, 0xf2, 0xb1, 0x62, 0x90, 0x8f, 0x19, 0x83, 0x7c,
  0x6c, 0x00, 0x05, 0xf8, 0xd8, 0xe0, 0x07, 0xf0, 0xb1, 0x81, 0x0f, 0xe0,
  0x33, 0x86, 0xb0, 0x94, 0x88, 0xa9, 0x01, 0x29, 0xc4, 0xc7, 0xd0, 0x40,
  0x14, 0xe2, 0x63, 0x66, 0x00, 0x0a, 0xf1, 0x31, 0x62, 0x90, 0x8f, 0x15,
  0x83, 0x7c, 0xcc, 0x18, 0xe4, 0x63, 0xca, 0x00, 0x1f, 0x53, 0x06, 0xf8,
  0x98, 0x32, 0xc0, 0xc7, 0xd0, 0x60, 0x0d, 0xe2, 0x63, 0x68, 0xb0, 0x06,
  0xf1, 0x31, 0x4b, 0x90, 0x8f, 0x5d, 0x82, 0x7c, 0x4c, 0x78, 0x03, 0xf8,
  0x98, 0xf0, 0x06, 0xf0, 0xb1, 0x35, 0x88, 0x83, 0xf8, 0xd8, 0x1a, 0xc4,
  0x41, 0x7c, 0x4c, 0x12, 0xe4, 0x63, 0x93, 0x20, 0x1f, 0x33, 0x04, 0xf8,
  0x98, 0x21, 0xc0, 0xc7, 0x5a, 0xa3, 0x0c, 0xe2, 0x63, 0xad, 0x51, 0x06,
  0xf1, 0xb1, 0xd6, 0x28, 0x83, 0xf8, 0x98, 0x78, 0x48, 0xf1, 0xb1, 0xf1,
  0x90, 0xe2, 0x63, 0xe4, 0x21, 0xc5, 0x67, 0xc4, 0x60, 0x01, 0x40, 0x10,
  0x0c, 0xc2, 0x80, 0x4f, 0x40, 0x64, 0x10, 0x02, 0xa3, 0x20, 0xc6, 0x10,
  0x60, 0x83, 0x46, 0xc6, 0x10, 0x62, 0x03, 0x45, 0xc6, 0x10, 0x64, 0x43,
  0x45, 0x46, 0x0c, 0x16, 0x00, 0x04, 0xc1, 0x20, 0x0c, 0x40, 0x85, 0x44,
  0x32, 0xec, 0x1a, 0x84, 0xc0, 0x8a, 0x80, 0x3e, 0x16, 0xd0, 0x86, 0x7c,
  0x4c, 0xa0, 0x0d, 0xf9, 0xd8, 0x40, 0x1b, 0xf2, 0x31, 0xd9, 0xa0, 0x83,
  0xf8, 0x98, 0x6c, 0xd0, 0x41, 0x7c, 0x4c, 0x36, 0xe8, 0x20, 0x3e, 0x23,
  0x06, 0x0b, 0x00, 0x82, 0x60, 0x10, 0x06, 0xa8, 0xc2, 0x22, 0x8f, 0xd3,
  0x0c, 0x42, 0x30, 0x86, 0x20, 0x1b, 0x60, 0x32, 0x86, 0x30, 0x1b, 0x34,
  0x32, 0x86, 0x40, 0x1b, 0x36, 0x32, 0x62, 0xb0, 0x00, 0x20, 0x08, 0x06,
  0x61, 0xc0, 0x2a, 0x30, 0x52, 0x06, 0x64, 0x30, 0x06, 0x83, 0x10, 0x58,
  0x11, 0xd0, 0xc7, 0x02, 0xdb, 0x90, 0x8f, 0x09, 0xb6, 0x21, 0x1f, 0x1b,
  0x6c, 0x43, 0x3e, 0xe6, 0x12, 0x3e, 0x11, 0x1f, 0x63, 0x89, 0x9d, 0x88,
  0x8f, 0xa9, 0x04, 0x4e, 0xc4, 0xc7, 0x48, 0x22, 0x2c, 0xe2, 0x63, 0x22,
  0xe1, 0x13, 0xf1, 0x31, 0x90, 0xd8, 0x89, 0xf8, 0x98, 0x7b, 0x8c, 0x45,
  0x7c, 0x2c, 0xb0, 0xe0, 0x63, 0xef, 0x11, 0x16, 0xf1, 0xb1, 0xe0, 0x82,
  0x8f, 0xc1, 0xc7, 0x4f, 0xc4, 0xc7, 0x02, 0x0c, 0x3e, 0x23, 0x06, 0x0b,
  0x00, 0x82, 0x60, 0x10, 0x06, 0xbd, 0x12, 0x26, 0xcc, 0xa2, 0x30, 0x8b,
  0x32, 0x62, 0xb0, 0x00, 0x20, 0x08, 0x06, 0x61, 0xe0, 0x2b, 0x62, 0xd2,
  0x30, 0x8b, 0x92, 0x20, 0x23, 0x06, 0x0b, 0x00, 0x82, 0x60, 0x10, 0x06,
  0xbf, 0x32, 0x26, 0x8b, 0x92, 0x2c, 0x4a, 0x32, 0x62, 0xb0, 0x00, 0x20,
  0x08, 0x06, 0x61, 0x00, 0x2e, 0x64, 0x82, 0x18, 0xc4, 0xe3, 0x34, 0x23,
  0x06, 0x0b, 0x00, 0x82, 0x60, 0x10, 0x06, 0xe1, 0x52, 0x26, 0xc9, 0x51,
  0x34, 0xcc, 0x62, 0x43, 0x21, 0x1f, 0x2b, 0x0a, 0xf9, 0x98, 0x10, 0xc4,
  0xc7, 0x5e, 0x24, 0xa0, 0x8f, 0x19, 0x87, 0x7c, 0xcc, 0x48, 0xe4, 0x63,
  0x42, 0x10, 0x1f, 0x0b, 0x08, 0xf9, 0x58, 0xd2, 0xc8, 0xc7, 0x96, 0x46,
  0x3e, 0x26, 0x04, 0xf1, 0xb1, 0x00, 0x91, 0x8f, 0xe1, 0x48, 0x11, 0x1f,
  0x0b, 0x84, 0xf8, 0x58, 0x7f, 0xf0, 0x45, 0x7c, 0x2c, 0x18, 0x03, 0xf8,
  0x98, 0x7f, 0xe8, 0x45, 0x7c, 0x2c, 0x20, 0x03, 0xf8, 0xd8, 0x7f, 0xe0,
  0x45, 0x7c, 0x2c, 0x28, 0x03, 0xf8, 0x8c, 0x18, 0x2c, 0x00, 0x08, 0x82,
  0x41, 0x18, 0xd8, 0x8b, 0x9e, 0x14, 0x43, 0x50, 0x06, 0x64, 0x30, 0x06,
  0x23, 0x06, 0x0b, 0x00, 0x82, 0x60, 0x10, 0x06, 0xf7, 0xb2, 0x27, 0x06,
  0x21, 0x8c, 0x81, 0x18, 0x84, 0x81, 0x09, 0x99, 0x7c, 0x4c, 0xd8, 0xe4,
  0x63, 0x42, 0x10, 0x1f, 0x0b, 0x2c, 0xf9, 0x58, 0xf1, 0xc9, 0xc7, 0x8e,
  0x4f, 0x3e, 0x26, 0x04, 0xf1, 0xb1, 0x40, 0x93, 0x8f, 0xa9, 0x49, 0x11,
  0x1f, 0x0b, 0x84, 0xf8, 0xd8, 0x34, 0x12, 0xf2, 0x19, 0x31, 0x40, 0x00,
  0x10, 0x04, 0x83, 0x52, 0x70, 0x97, 0x55, 0xd1, 0x42, 0x22, 0x18, 0x31,
  0x40, 0x00, 0x10, 0x04, 0x83, 0x52, 0x78, 0x17, 0x56, 0xb9, 0xfe, 0x21,
  0x30, 0xab, 0x24, 0xe4, 0x33, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0xa5,
  0x10, 0x2f, 0xae, 0xd2, 0x8d, 0x44, 0x30, 0x62, 0x80, 0x00, 0x20, 0x08,
  0x06, 0xa5, 0x20, 0x2f, 0xaf, 0xa2, 0x85, 0x44, 0x60, 0x04, 0x2d, 0xc4,
  0xc7, 0x04, 0x5a, 0x88, 0x8f, 0x25, 0x2b, 0x21, 0x9f, 0x11, 0x03, 0x04,
  0x00, 0x41, 0x30, 0x28, 0x05, 0x7b, 0x99, 0x15, 0x28, 0x25, 0x82, 0x11,
  0x03, 0x04, 0x00, 0x41, 0x30, 0x28, 0x85, 0x7b, 0xa1, 0x95, 0xe6, 0x24,
  0x02, 0x63, 0x5a, 0x42, 0x3e, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0x50,
  0x0a, 0xf9, 0x62, 0x2b, 0xd3, 0x4a, 0x04, 0x23, 0x06, 0x08, 0x00, 0x82,
  0x60, 0x50, 0x0a, 0xfa, 0x72, 0x2b, 0x50, 0x4a, 0x04, 0x46, 0xf0, 0x42,
  0x7c, 0x4c, 0xe0, 0x85, 0xf8, 0x8c, 0x18, 0x28, 0x00, 0x08, 0x82, 0x01,
  0x19, 0xc4, 0x0c, 0xae, 0xd0, 0x48, 0x8c, 0x84, 0xca, 0xb8, 0xe4, 0xca,
  0x68, 0x42, 0x00, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0x41, 0x67, 0x33,
  0xb5, 0x12, 0x80, 0x0b, 0xb8, 0x8c, 0x18, 0x1c, 0x00, 0x08, 0x82, 0x81,
  0x2a, 0xf4, 0x0b, 0xae, 0x04, 0x78, 0x32, 0x62, 0x60, 0x00, 0x20, 0x08,
  0x06, 0xac, 0xd0, 0x2f, 0xb2, 0x72, 0x27, 0x23, 0x06, 0x07, 0x00, 0x82,
  0x60, 0xa0, 0x0a, 0xff, 0xa2, 0x2b, 0x41, 0x9e, 0x8c, 0x18, 0x54, 0x00,
  0x08, 0x82, 0x41, 0x1e, 0xa0, 0x0c, 0xa9, 0x0c, 0x01, 0x39, 0x8c, 0x03,
  0xa8, 0x80, 0x8a, 0xbe, 0xe8, 0xcb, 0xad, 0x40, 0x0f, 0xa8, 0x20, 0x07,
  0xa8, 0x80, 0xca, 0x68, 0x42, 0x30, 0x0c, 0x47, 0x04, 0xa5, 0x42, 0x7c,
  0xb3, 0x0c, 0xc6, 0x11, 0x0c, 0x1b, 0x10, 0x78, 0x72, 0x27, 0x03, 0x30,
  0x6c, 0x40, 0xd8, 0x49, 0x9d, 0x0c, 0xc0, 0xb0, 0x01, 0x41, 0x27, 0x73,
  0x32, 0x00, 0xc3, 0x06, 0xc4, 0x9b, 0xb8, 0xc9, 0x00, 0x0c, 0x1b, 0x10,
  0x6a, 0x92, 0x26, 0x03, 0x30, 0x6c, 0x40, 0x94, 0x09, 0x99, 0x0c, 0xc0,
  0x88, 0x41, 0x01, 0x80, 0x20, 0x18, 0xf4, 0x41, 0xca, 0x90, 0x8b, 0x0e,
  0x1b, 0x10, 0x78, 0x72, 0x27, 0x03, 0x30, 0x6c, 0x40, 0xd8, 0x49, 0x9d,
  0x0c, 0xc0, 0xb0, 0x01, 0x41, 0x27, 0x73, 0x32, 0x00, 0xc3, 0x06, 0xc4,
  0x9b, 0xb8, 0xc9, 0x00, 0x0c, 0x1b, 0x10, 0x6a, 0x92, 0x26, 0x03, 0x30,
  0x6c, 0x40, 0x94, 0x09, 0x99, 0x0c, 0x00, 0x86, 0x03, 0x01, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0xc6, 0x43, 0x00, 0xd3, 0x14, 0xd9, 0xce, 0xf1,
  0x00, 0xd8, 0xe2, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x61, 0x20, 0x00, 0x00, 0x96, 0x00, 0x00, 0x00, 0x13, 0x04, 0x41, 0x2c,
  0x10, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x04, 0x18, 0x01, 0x28,
  0x81, 0x22, 0x20, 0xce, 0x08, 0x00, 0x21, 0xca, 0xad, 0xf8, 0x8a, 0xa3,
  0x24, 0x19, 0x8a, 0x76, 0xa0, 0x34, 0x0a, 0x58, 0x60, 0x06, 0xa0, 0xec,
  0xca, 0xa5, 0x54, 0x0a, 0x76, 0xa0, 0x50, 0x05, 0xe8, 0x30, 0x03, 0x40,
  0x84, 0x31, 0x02, 0x10, 0x04, 0x41, 0x1d, 0x0c, 0x46, 0x00, 0x66, 0x00,
  0xc6, 0x08, 0x40, 0x10, 0x04, 0x41, 0x50, 0x18, 0x23, 0x30, 0xef, 0x75,
  0x95, 0xbd, 0x31, 0x82, 0x98, 0x07, 0xfb, 0xdc, 0x1b, 0x23, 0xd0, 0x59,
  0x73, 0x0e, 0xc1, 0x60, 0x8c, 0xe0, 0xdd, 0xd3, 0xf2, 0xfe, 0xc6, 0x08,
  0xdc, 0x3e, 0x16, 0x6d, 0x8f, 0x92, 0x73, 0x08, 0xa5, 0xd0, 0x06, 0x73,
  0x08, 0x73, 0x30, 0x0a, 0x73, 0x08, 0xa2, 0xc0, 0x06, 0x00, 0x00, 0x00,
  0x94, 0x0b, 0x82, 0x41, 0xb8, 0xa0, 0x00, 0x23, 0x06, 0x06, 0x00, 0x82,
  0x60, 0xe0, 0x0a, 0x74, 0x60, 0x05, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60,
  0xa0, 0x0a, 0x77, 0x20, 0x05, 0xc6, 0x88, 0x81, 0x01, 0x80, 0x20, 0x18,
  0x98, 0x81, 0x2b, 0x48, 0x62, 0x30, 0x62, 0x60, 0x00, 0x20, 0x08, 0x06,
  0x66, 0xf0, 0x0a, 0x93, 0x18, 0x8c, 0x18, 0x18, 0x00, 0x08, 0x82, 0x81,
  0x19, 0xc0, 0x02, 0x25, 0x06, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0xd0,
  0xd5, 0x42, 0x97, 0x89, 0x81, 0x18, 0x8c, 0x18, 0x1c, 0x00, 0x08, 0x82,
  0x81, 0x2a, 0xf0, 0xc1, 0x15, 0x28, 0x23, 0x06, 0x06, 0x00, 0x82, 0x60,
  0xc0, 0x0a, 0x7c, 0xd0, 0x25, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0xa0,
  0x0a, 0x7e, 0x90, 0x05, 0xcb, 0x88, 0xc1, 0x03, 0x80, 0x20, 0x18, 0xec,
  0x81, 0x29, 0x90, 0xc1, 0x10, 0x1c, 0x46, 0x51, 0x79, 0x9e, 0x67, 0x8d,
  0x26, 0x04, 0xc0, 0x68, 0x82, 0x10, 0x8c, 0x26, 0x0c, 0x82, 0x0d, 0x13,
  0x7c, 0x6c, 0xa0, 0xe0, 0x63, 0x43, 0x05, 0x1f, 0x1b, 0x2e, 0xf9, 0xd8,
  0x80, 0xc9, 0xc7, 0x86, 0x4c, 0x3e, 0x23, 0x06, 0x06, 0x00, 0x82, 0x60,
  0xf0, 0x89, 0x83, 0x19, 0x0c, 0x23, 0x06, 0x06, 0x00, 0x82, 0x60, 0xf0,
  0x8d, 0xc3, 0x19, 0x0c, 0x23, 0x06, 0x06, 0x00, 0x82, 0x60, 0xf0, 0x91,
  0x03, 0x1a, 0x0c, 0x36, 0x78, 0xf2, 0xb1, 0xe1, 0x93, 0x8f, 0x0d, 0x60,
  0x20, 0x9f, 0x11, 0x03, 0x03, 0x00, 0x41, 0x30, 0xf8, 0xd0, 0x61, 0x0d,
  0x86, 0x11, 0x03, 0x03, 0x00, 0x41, 0x30, 0xf8, 0xd2, 0x81, 0x0d, 0x86,
  0x11, 0x03, 0x03, 0x00, 0x41, 0x30, 0xf8, 0xd4, 0xa1, 0x0d, 0x06, 0x93,
  0xca, 0x40, 0x3e, 0x26, 0x99, 0x81, 0x7c, 0x4c, 0x3a, 0x03, 0xf9, 0x0c,
  0x47, 0x54, 0x69, 0x40, 0x7c, 0xc3, 0x11, 0x95, 0x1a, 0x10, 0xdf, 0x70,
  0x44, 0xb5, 0x06, 0xc4, 0x37, 0xdd, 0x60, 0x24, 0xc3, 0x74, 0x83, 0x91,
  0x0c, 0xd3, 0x0d, 0x46, 0x32, 0x8c, 0x18, 0x1c, 0x00, 0x08, 0x82, 0xc1,
  0x28, 0xfc, 0x42, 0x1e, 0x90, 0x01, 0x1e, 0x8c, 0x26, 0x04, 0xc0, 0x68,
  0x82, 0x10, 0x8c, 0x26, 0x0c, 0x82, 0xd1, 0xc1, 0x10, 0x1f, 0xab, 0x83,
  0x21, 0x3e, 0x66, 0x07, 0x43, 0x7c, 0x46, 0x0c, 0x16, 0x00, 0x04, 0xc1,
  0x20, 0x0c, 0xf4, 0x01, 0x15, 0xd4, 0x20, 0x0d, 0xd0, 0x60, 0x10, 0x82,
  0x11, 0x03, 0x03, 0x00, 0x41, 0x30, 0xf8, 0xf8, 0xe1, 0x17, 0x82, 0x11,
  0x03, 0x03, 0x00, 0x41, 0x30, 0xf8, 0xfa, 0x21, 0x14, 0x02, 0x0b, 0xfa,
  0x40, 0x3e, 0x23, 0x06, 0x06, 0x00, 0x82, 0x60, 0xf0, 0xfd, 0x83, 0x28,
  0x04, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0x30, 0x0a, 0xeb, 0x50, 0x0a,
  0x70, 0x30, 0x0a, 0xa3, 0x09, 0x01, 0x30, 0x9a, 0x20, 0x04, 0xa3, 0x09,
  0x83, 0x60, 0xc3, 0x14, 0x1f, 0x1b, 0xa6, 0xf8, 0xd8, 0x30, 0xc5, 0xc7,
  0x06, 0x44, 0x3e, 0x36, 0x24, 0xf2, 0xb1, 0x41, 0x91, 0x8f, 0x0d, 0x19,
  0x7c, 0x6c, 0xc8, 0xe0, 0x63, 0x43, 0x06, 0x9f, 0x39, 0x86, 0x56, 0x18,
  0xdc, 0x61, 0x8e, 0x21, 0x18, 0xe4, 0x61, 0x8e, 0x21, 0x18, 0xdc, 0x61,
  0x4f, 0x06, 0x71, 0x88, 0x87, 0x78, 0x18, 0x36, 0x20, 0x02, 0x61, 0x00,
  0x30, 0x1c, 0x08, 0x00, 0x02, 0x00, 0x00, 0x00, 0xb6, 0x73, 0x3c, 0x00,
  0xb6, 0x38, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x61, 0x20, 0x00, 0x00,
  0x06, 0x00, 0x00, 0x00, 0x13, 0x04, 0x01, 0x86, 0x03, 0x01, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0xb6, 0x73, 0x3c, 0x00, 0xb6, 0x38, 0xc0, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
